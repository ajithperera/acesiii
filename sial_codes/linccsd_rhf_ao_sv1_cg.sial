#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL LINCCSD_RHF_SV1_CG
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i)
      distributed t1a_safe(a,i)
      distributed z1a(a,i)
      distributed r1a(a,i) 
#
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1) 
      served Vaaii(a,a1,i,i1)
      served Vaaai(a2,a,a1,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      served Vpiqj(p,i,q,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxxq(mu,nu,lambda,j)
      temp Txxpp(mu,nu,p1,i)
      temp Txxqq(mu,nu,q1,j)
      temp Txppp(mu,p2,p1,i)
      temp Txqpp(mu,q,p1,i)
      temp Txqqq(mu,q2,q1,j)
      temp Txpqq(mu,p,q1,j)
      temp Tpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,j)
      temp Tqqpp(q1,q,p1,i)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Tipqx(i,p,q,sigma) 
      temp Tipqq(i,p,q,q1) 
      temp Txiai(lambda,i,a1,i1) 
      temp Txjbj(lambda,j,b1,j1) 
      temp Txibj(lambda,i,b1,j1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp3_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp T2ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
      temp T2bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp T1pppp(p,p1,p2,p3) 
      temp T1qqqq(q,q1,q2,q3) 
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1)  
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp tpx(p,mu) 
      temp t1px(p,mu) 
      temp tqx(q,mu) 
      temp t1qx(q,mu) 
      temp txi(mu,i) 
      temp t1xi(mu,i) 
      temp txj(mu,j) 
      temp t1xj(mu,j) 
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_ab(a,i,b,j)
      served T2old_aa(a,i,a1,i1)
      served T2old_ab(a,i,b,j)
      served T2safe_ab(a,i,b,j)
      served Z2_ab(a,i,b,j)
      served R2_ab(a,i,b,j)
                 
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yab(lambda,i,mu,j)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)   
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TZaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served TAO_ab(lambda,i,sigma,j)
     served T2AO_ab(lambda,i,sigma,j)
     distributed t1a_ax(a,mu) 
     distributed t1a_xi(mu,i) 
     distributed t1b_xj(mu,j) 
     distributed TDaixj(a,i,nu,j)
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai(i2,i,a,i1) 
     local L1iiai(i,i1,a2,i2) 
     local L2iiai(i2,i1,a2,i)  
     local L3iiai(i,i1,a,i2)  
     local L4iiai(i2,i1,a,i)  
     local Laiai(a,i,a2,i1) 
     local L1aiai(a,i,a1,i2) 
     local L2aiai(a1,i1,a2,i) 
     local L3aiai(a2,i1,a,i2) 
     local L4aiai(a1,i,a2,i1) 
     local Laaai(a,a2,a1,i) 
#
     local Ljjbj(j2,j,b,j1) 
     local Lbjbj(b,j,b2,j1) 
     local L1bjbj(b,j,b1,j2) 
     local L2bjbj(b1,j1,b2,j) 
     local L3bjbj(b2,j1,b,j2) 
     local L4bjbj(b1,j,b2,j1) 
     local Lbbbj(b,b2,b1,j) 
#
     local Laijj(a,i,j1,j) 
     local Laibj(a,i,b1,j) 
     local L1aibj(a1,i,b,j) 
     local L2aibj(a,i,b,j2) 
     local L3aibj(a,i1,b,j) 
     local L4aibj(a,i,b1,j) 
     local Liibj(i1,i,b,j) 
     local L1iibj(i,i1,b,j) 
     local Lbbai(b,b1,a,i) 
     local Laabj(a,a1,b,j) 
     local LLaiai(a,i,a1,i1) 
     local Lxiai(lambda,i,a1,i1) 
     local LLbjbj(b,j,b1,j1) 
     local Lxjbj(lambda,j,b1,j1) 
     local LLaibj(a,i,b,j) 
     local Lxibj(lambda,i,b,j) 
     local L1xixi(mu,i,nu,i1)  
     local L2xixi(nu,i1,mu,i)  
     local L1xjxj(mu,j,nu,j1)  
     local L2xjxj(nu,j1,mu,j)  
     local L1xixj(mu,i,nu,j)  
     local Laiii(a,i,i2,i1) 
     local L1aiii(a1,i2,i,i1) 
     local Lbjjj(b,j,j2,j1) 
     local L1bjjj(b1,j2,j,j1) 
     local Ljjai(a,i,j,j1) 
#
     local LWaaai(a2,a,a1,i1) 
     local LWbbbj(b2,b,b1,j1) 
     local LWbbai(b1,b,a,i) 
     local LWaabj(a1,a,b,j) 
     local LXbbai(b1,b,a1,i1) 
     local LXaabj(a1,a,b1,j1) 
     local LWaiai(a2,i,a,i1) 
     local LWbjbj(b2,j,b,j1) 
     local LWaibj(a,i,b,j) 
     local LWiaai(i1,a,a2,i)
     local LWjbai(j,b,a,i)
#
# Distributed two-particle arrays 
# ------------------------------- 
#
     distributed Wminj_aa(i2,i,i3,i1) 
     distributed Wminj_bb(j2,j,j3,j1) 
     distributed Wminj_ab(i2,i,j3,j1) 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
      scalar half
      scalar gamma
      scalar gsum
      scalar gtemp
      scalar asum
      scalar aaccum
      scalar atemp
      scalar alpha
      scalar bsum
      scalar btemp
      scalar baccum
      scalar beta
      scalar sumn
      scalar rtemp
      scalar rsum
      scalar rnorm2

#
#    ------------------------------------------------------------------------ 
#
     PROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                Vaaai
      execute list_to_blocks                Vpiqj
      execute read_list_to_blocks
      execute server_barrier
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1) 
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                Vaaai
      execute blocks_to_list                Vpiqj(p,i,q,j) 
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, b, i, j 
#
           REQUEST                     Vpiqj(a,i,b,j) j  
           Taibj(a,i,b,j)            = Vpiqj(a,i,b,j)
           execute energy_reg_denominator  Taibj 
           PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i
#
           tai(a,i) = 0.0
           PUT t1a_old(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
#     
#    ------------------------------------------------------------------------ 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i
#
            tai(a,i) = 0.0
#
            DO b
            DO j
#
               REQUEST Viaai(i,a,b,j) j
               GET t1a_old(b,j)
#
               t2ai(a,i)  = Viaai(i,a,b,j)*t1a_old(b,j)
               tai(a,i) += t2ai(a,i)
#
            ENDDO j
            ENDDO b
#
            DO a1
#
               DO i1
#
                  REQUEST Vaaii(a,a1,i1,i) i
                  REQUEST Viaai(i1,a1,a,i) i
                  GET t1a_old(a1,i1)
#
                  Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
                  Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)
#
                  t2ai(a,i) = Tpppp(i1,a1,a,i)*t1a_old(a1,i1)
                  tai(a,i) -= t2ai(a,i)
#
               ENDDO i1
#
            ENDDO a1
#
            PUT t1a_new(a,i) += tai(a,i)
#
      ENDPARDO a, i
#
      PARDO a1, a2, i1
#
            allocate L4aiai(a1,*,a2,i1)
#
            DO i
#
               REQUEST T2old_aa(a1,i,a2,i1) i1
               L4aiai(a1,i,a2,i1) = T2old_aa(a1,i,a2,i1)
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai(a2,a,a1,i1)   i1
               REQUEST Vaaai(a1,a,a2,i1)   i1
               taaai(a2,a,a1,i1) = Vaaai(a2,a,a1,i1) 
               t1aaai(a2,a,a1,i1)= Vaaai(a1,a,a2,i1) 
               taaai(a2,a,a1,i1)-= t1aaai(a2,a,a1,i1) 
#
               DO i
#
                  tai(a,i)  = taaai(a2,a,a1,i1)*L4aiai(a1,i,a2,i1)
                  tai(a,i) *= -0.5
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L4aiai(a1,*,a2,i1)
#
      ENDPARDO a1, a2, i1
#
      PARDO a1, i1, i2
#
            allocate L1aiii(a1,i2,*,i1)
#
            DO i
#
               REQUEST VSpipi(a1,i2,i,i1) i1
               L1aiii(a1,i2,i,i1) = VSpipi(a1,i2,i,i1)
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_aa(a,i1,a1,i2) i1
#
               DO i
#
                  tai(a,i)  = L1aiii(a1,i2,i,i1)*T2old_aa(a,i1,a1,i2)
                  tai(a,i) *= -0.5
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aiii(a1,i2,*,i1)
#
      ENDPARDO a1, i1, i2
#
      PARDO a1, b, j
#
            allocate L1aibj(a1,*,b,j)
#
            DO i
#
               REQUEST T2old_ab(a1,i,b,j) j
               L1aibj(a1,i,b,j) = T2old_ab(a1,i,b,j)
#
            ENDDO i
#
            DO a
#
               REQUEST Vaaai(a1,a,b,j) j
#
               DO i
#
                  tai(a,i)  = Vaaai(a1,a,b,j)*L1aibj(a1,i,b,j)
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1aibj(a1,*,b,j)
#
      ENDPARDO a1, b, j
#
      PARDO b, j, i1
#
            allocate L1iibj(*,i1,b,j)
#
            DO i
#
               REQUEST Vpiqj(i,i1,b,j) j
               L1iibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            ENDDO i
#
            DO a
#
               REQUEST T2old_ab(a,i1,b,j) j
#
               DO i
#
                  tai(a,i)  = L1iibj(i,i1,b,j)*T2old_ab(a,i1,b,j)
                  tai(a,i) *= -1.0
#
                  PUT t1a_new(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            deallocate L1iibj(*,i1,b,j)
#
      ENDPARDO b, j, i1
#
      ENDPROC T1ANEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC WminjAB
#     ------------
#
      create Wminj_ab
      execute sip_barrier
      PARDO i, i1, j, j1
#
            REQUEST                    Vpiqj(i1,i,j1,j) j
            PUT Wminj_ab(i1,i,j1,j) += Vpiqj(i1,i,j1,j)
#
      ENDPARDO i, i1, j, j1
#
      execute sip_barrier
#
      PARDO i1, j1, a, b
#
            REQUEST T2old_ab(a,i1,b,j1) j1
#
            DO i
            DO j
#
               GET                          Wminj_ab(i1,i,j1,j)
               T1aibj(a,i,b,j)            = T2old_ab(a,i1,b,j1)*Wminj_ab(i1,i,j1,j)
               PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j)
#
            ENDDO j
            ENDDO i
#
      ENDPARDO i1, j1, a, b
      execute sip_barrier
      delete Wminj_ab
#
      ENDPROC WminjAB
#     --------------- 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      PARDO i, b, j 
#
            allocate Liibj(*,i,b,j) 
#
            DO i1 
#
               REQUEST           Vpiqj(i1,i,b,j) j 
               Liibj(i1,i,b,j) = Vpiqj(i1,i,b,j) 
#
            ENDDO i1 
#
            DO a 
#
#               REQUEST          Vpiqj(a,i,b,j) j 
#               Taibj(a,i,b,j) = Vpiqj(a,i,b,j)   
#               Taibj(a,i,b,j)*= 0.5
               Taibj(a,i,b,j) = 0.0  
#
               DO i1 
#
                  GET t1a_old(a,i1) 
#
                  T1aibj(a,i,b,j) = Liibj(i1,i,b,j)*t1a_old(a,i1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               T1aibj(b,j,a,i)            = Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(b,j,a,i) += T1aibj(b,j,a,i)  
#
            ENDDO a 
#
            deallocate Liibj(*,i,b,j) 
#
      ENDPARDO i, b, j 
#
      PARDO a, b, j 
#
            allocate Laabj(a,*,b,j) 
#
            DO a1 
#
               REQUEST Vaaai(a,a1,b,j) j  
               Laabj(a,a1,b,j) = Vaaai(a,a1,b,j)  
#
            ENDDO a1 
#
            DO i 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO a1 
#
                  GET t1a_old(a1,i) 
#
                  T1aibj(a,i,b,j) = Laabj(a,a1,b,j)*t1a_old(a1,i)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO a1 
#
               T1aibj(b,j,a,i)            = Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
               PREPARE T2NEW_AB(b,j,a,i) += T1aibj(b,j,a,i)  
#
            ENDDO i 
#
            deallocate Laabj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC T2NEWAB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    First create and zero-out intermediate arrays
#    ---------------------------------------------
#
     PARDO mu, nu, i, j
           Txixj(mu,i,nu,j)           = 0.0
           PREPARE TAO_ab(mu,i,nu,j)  = Txixj(mu,i,nu,j)
           PREPARE T2AO_ab(mu,i,nu,j) = Txixj(mu,i,nu,j)
     ENDPARDO mu, nu, i, j
#
     execute server_barrier 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
#    AB spin combination
#     -------------------
#
     PARDO b, a, j, i
#
           REQUEST T2old_ab(a,i,b,j) a
#
           DO mu
#
              Taixj(a,i,mu,j) = T2old_ab(a,i,b,j)*ca(mu,b)
#
              DO nu
#
                 Txixj(nu,i,mu,j)           = Taixj(a,i,mu,j)*ca(nu,a)
                 PREPARE TAO_ab(nu,i,mu,j) += Txixj(nu,i,mu,j)
#
              ENDDO nu
#
           ENDDO mu
#
      ENDPARDO b, a, j, i
#
     execute server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, lambda, sigma
#
           DO nu
#
           IF mu == nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(mu,lambda,nu,sigma)*TAO_ab(lambda,i,sigma,j)
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
#
           ENDDO j
           ENDDO i
#
           ENDIF
#
           IF mu < nu
#
           compute_integrals aoint(lambda,mu,sigma,nu)
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
              Y1ab(nu,j,mu,i)             = Yab(mu,i,nu,j)
#
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
              PREPARE T2AO_ab(nu,j,mu,i) += Y1ab(nu,j,mu,i)
#
           ENDDO j
           ENDDO i
           ENDIF
#
           ENDDO nu
#
     ENDPARDO mu, lambda, sigma
#
     execute server_barrier  
     execute sip_barrier  
#
#    Perform final transformation 
#    ---------------------------- 
#
     DO a
     DO nu
#
        create TDaixj(a,*,nu,*)
        execute sip_barrier
#
        PARDO mu, i, j
#
              REQUEST                 T2AO_ab(mu,i,nu,j) j
              Taixj(a,i,nu,j)       = T2AO_ab(mu,i,nu,j)*ca(mu,a)
              PUT TDaixj(a,i,nu,j) += Taixj(a,i,nu,j)
#
        ENDPARDO mu, i, j
        execute sip_barrier
#
        PARDO b, i, j
#
              GET                          TDaixj(a,i,nu,j)
#
              Taibj(a,i,b,j)             = TDaixj(a,i,nu,j)*ca(nu,b)
#
              PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
#
        ENDPARDO b, i, j
#
        execute sip_barrier
        delete TDaixj(a,*,nu,*)
#
     ENDDO nu
     ENDDO a
#
     execute sip_barrier  
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
# --------------------------------------------------------------------------- 
#
 
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, a1, i1 
#       
            REQUEST              Viaai(i1,a1,a,i) i  
            REQUEST              Vaaii(a,a1,i1,i) i
            
            TYaiai(a1,i1,a,i) = Viaai(i1,a1,a,i)
            Taiai(a1,i1,a,i) = Vaaii(a,a1,i1,i)
            TYaiai(a1,i1,a,i) -= Taiai(a1,i1,a,i)  
#
            DO j  
            DO b
#
               REQUEST                      T2old_ab(a1,i1,b,j) j  
               R1aibj(a,i,b,j)            = TYaiai(a1,i1,a,i)*T2old_ab(a1,i1,b,j) 
               Taibj(b,j,a,i)             = R1aibj(a,i,b,j) 
               PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
               PREPARE T2new_ab(b,j,a,i) += Taibj(b,j,a,i)
#
            ENDDO b  
            ENDDO j  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO i1, a1, a, i
#
            REQUEST T2old_aa(a1,i1,a,i) i 
#
            DO j 
            DO b 
#
               REQUEST						  Viaai(i,a,b,j) j  
               R1aibj(a1,i1,b,j)            = T2old_aa(a1,i1,a,i)*Viaai(i,a,b,j)  
               Taibj(b,j,a1,i1)             = R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(b,j,a1,i1) += Taibj(b,j,a1,i1) 
#
            ENDDO b 
            ENDDO j 
#
      ENDPARDO i1, a1, a, i
      execute server_barrier 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. 
#
      PROC WMJBEab
#     -------------


#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO a, j, i1, b1
#
            REQUEST T2old_ab(a,i1,b1,j) j
#
            DO i
            DO b
#
               REQUEST						Vaaii(b,b1,i1,i) i
#
               Taibj(a,i,b,j)             = T2old_ab(a,i1,b1,j)*Vaaii(b,b1,i1,i)
               Taibj(a,i,b,j)            *= -1.0  
#
               T2aibj(b,j,a,i)            = Taibj(a,i,b,j) 
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
               PREPARE T2new_ab(b,j,a,i) += T2aibj(b,j,a,i)
#
            ENDDO b
            ENDDO i
#
      ENDPARDO a, j, i1, b1
#
      ENDPROC WMJBEab
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJAB
           CALL WMJBEab
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     ecorrab = 0.0 
     esumab  = 0.0 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
           REQUEST Vpiqj(a,j,b,i) j  
#
           REQUEST T2safe_ab(a,i,b,j) j   
#
           T1aibj(a,i,b,j) = Vpiqj(a,i,b,j)  
           T2aibj(a,i,b,j) = Vpiqj(a,j,b,i)  
           T1aibj(a,i,b,j)*= 2.0  
           T1aibj(a,i,b,j)-= T2aibj(a,i,b,j)  
#
           etemp = T2safe_ab(a,i,b,j)*T1aibj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     execute sip_barrier 
#
     collective ecorrab += esumab
     execute print_scalar ecorrab 

     ecorrT = ecorrab 
     execute print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 1-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, i 
                tai(a,i) = 0.0 
                PUT t1a_new(a,i) = tai(a,i) 
          ENDPARDO a, i 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
          PARDO a, b, i, j 
                Taibj(a,i,b,j) = 0.0
                PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j) 
          ENDPARDO a, b, i, j 
# 
     ENDPROC T2NEW_ZERO
     
#    ---------------
     PROC ADD_DIAGT1
     
     PARDO a, i
       GET t1a_old(a,i)
       t1ai(a,i) = t1a_old(a,i)
       t1ai(a,i) *= -1.0
       execute energy_reg_product t1ai
       PUT t1a_new(a,i) += t1ai(a,i)
     ENDPARDO a, i 
     
     execute sip_barrier t1a_new
     
     ENDPROC ADD_DIAGT1
#    ------------------
#    ---------------
     PROC ADD_DIAGT2   
     
     PARDO a, i, b, j
     	REQUEST T2old_ab(a,i,b,j) j
     	Taibj(a,i,b,j) = T2old_ab(a,i,b,j)
     	Taibj(a,i,b,j) *= -1.0
     	execute energy_reg_product Taibj
     	PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
     
     execute server_barrier T2new_ab
     
     ENDPROC ADD_DIAGT2
#    ------------------
#    ---------------
     PROC CG_INIT
     
# Save T amplitudes in a safe place
     
     PARDO a, i, b, j
     	REQUEST T2old_ab(a,i,b,j) j
        PREPARE T2safe_ab(a,i,b,j) = T2old_ab(a,i,b,j)
     ENDPARDO a, i, b, j
     
     PARDO a, i     
     	GET t1a_old(a,i)
     	PUT t1a_safe(a,i) = t1a_old(a,i)
     ENDPARDO a, i
     
     execute sip_barrier
     execute server_barrier    
     
# Move denominator free residual to new vector and denominator weight z residual
     
     PARDO a, i, b, j
     	REQUEST T2new_ab(a,i,b,j) j
     	Taibj(a,i,b,j) = T2new_ab(a,i,b,j)
     	REQUEST Vpiqj(a,i,b,j) j
     	Taibj(a,i,b,j) += Vpiqj(a,i,b,j)
     	PREPARE R2_ab(a,i,b,j) = Taibj(a,i,b,j)
        execute energy_reg_denominator Taibj
        Taibj(a,i,b,j) *= -1.0
        PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)
        PREPARE Z2_ab(a,i,b,j) = Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
     
     PARDO a, i     
     	GET t1a_new(a,i)
     	t1ai(a,i) = t1a_new(a,i)
     	PUT r1a(a,i) = t1ai(a,i)
     	execute energy_reg_denominator t1ai
     	t1ai(a,i) *= -1.0
     	PUT t1a_old(a,i) = t1ai(a,i)
     	PUT z1a(a,i) = t1ai(a,i)
     ENDPARDO a, i     
     
     execute sip_barrier
     execute server_barrier    
     
# Calculate gamma

     gamma = 0.0
     gsum = 0.0
     PARDO a, i, b, j
     	REQUEST R2_ab(a,i,b,j) j
     	REQUEST T2old_ab(a,i,b,j) j
     	gtemp = R2_ab(a,i,b,j)*T2old_ab(a,i,b,j)
     	gsum += gtemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET r1a(a,i)
     	GET t1a_old(a,i)
     	gtemp = r1a(a,i)*t1a_old(a,i)
     	gsum += gtemp
     ENDPARDO a,i
     
     execute sip_barrier
#     execute server_barrier
     collective gamma+=gsum
     sumn = gamma
     
     ENDPROC CG_INIT
#    ------------------     
#    -------------
     PROC CONJ_GRAD
     
# Construct alpha
# alpha(n) = gamma(n)/d^T C
     aaccum = 0.0
     asum   = 0.0
     PARDO a, i, b, j
     	REQUEST T2old_ab(a,i,b,j) j
     	REQUEST T2new_ab(a,i,b,j) j
     	atemp = T2old_ab(a,i,b,j)*T2new_ab(a,i,b,j)
     	asum += atemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	GET t1a_new(a,i)
     	atemp = t1a_old(a,i)*t1a_new(a,i)
     	asum += atemp
     ENDPARDO a,i     
     
     execute sip_barrier
     collective aaccum+=asum
     
     alpha = gamma / aaccum
     alpha *= -1.0
     
# Calculate new T
     
     PARDO a, i, b, j
        REQUEST T2old_ab(a,i,b,j) j
     	Taibj(a,i,b,j) = alpha*T2old_ab(a,i,b,j) 
     	PREPARE T2safe_ab(a,i,b,j) += Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	t1ai(a,i) = alpha*t1a_old(a,i) 
     	PUT t1a_safe(a,i) += t1ai(a,i)  
     ENDPARDO a, i     

# Calculate new R
     PARDO a, i, b, j
     	REQUEST T2new_ab(a,i,b,j) j
     	Taibj(a,i,b,j) = alpha*T2new_ab(a,i,b,j)
     	Taibj(a,i,b,j) = alpha*T2new_ab(a,i,b,j) 
     	PREPARE R2_ab(a,i,b,j) += Taibj(a,i,b,j)
     	Taibj(a,i,b,j) *= -1.0
     	execute energy_reg_denominator Taibj
     	PREPARE Z2_ab(a,i,b,j) += Taibj(a,i,b,j)  
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_new(a,i)
     	t1ai(a,i) = alpha*t1a_new(a,i)
     	PUT r1a(a,i) += t1ai(a,i)
     	t1ai(a,i) *= -1.0
     	execute energy_reg_denominator t1ai
     	PUT z1a(a,i) += t1ai(a,i) 
     ENDPARDO a, i
 
     execute sip_barrier
     execute server_barrier

# Form new Z
# Denominator weighting

# Form beta
     baccum=0.0
     bsum = 0.0
     PARDO a, i, b, j
     	REQUEST R2_ab(a,i,b,j) j
     	REQUEST Z2_ab(a,i,b,j) j
     	btemp = R2_ab(a,i,b,j)*Z2_ab(a,i,b,j)
     	bsum += btemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET r1a(a,i)
     	GET z1a(a,i)
     	btemp = r1a(a,i)*z1a(a,i)
     	bsum += btemp
     ENDPARDO a,i     
     
     execute sip_barrier
     collective baccum+=bsum
     
     beta = baccum / gamma       
# Form new gamma
     gamma *= beta
     
# Calculate new D

     PARDO a, i, b, j
        REQUEST T2old_ab(a,i,b,j) j
        REQUEST Z2_ab(a,i,b,j) j
        Taibj(a,i,b,j) = beta*T2old_ab(a,i,b,j)
        Taibj(a,i,b,j) += Z2_ab(a,i,b,j)
        PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     execute server_barrier
     
     PARDO a, i, b, j
     	REQUEST T2new_ab(a,i,b,j) j
     	PREPARE T2old_ab(a,i,b,j)=T2new_ab(a,i,b,j)     
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	t1ai(a,i) = beta*t1a_old(a,i)
     	GET z1a(a,i)
     	t1ai(a,i) += z1a(a,i)
     	PUT t1a_old(a,i)=t1ai(a,i)          
     ENDPARDO a, i
     
     execute sip_barrier
     execute server_barrier
     ENDPROC CONJ_GRAD     
#    -----------------
#    ---------------
     PROC CHECK_CONV
     
     rnorm2 = 0.0
     rsum  = 0.0
     PARDO a, i, b, j
     	REQUEST Z2_ab(a,i,b,j) j
     	rtemp = Z2_ab(a,i,b,j)*Z2_ab(a,i,b,j)
     	rsum += rtemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET z1a(a,i)
     	rtemp = z1a(a,i)*z1a(a,i)
     	rsum += rtemp
     ENDPARDO a,i
     
     execute sip_barrier
     collective rnorm2+=rsum 
     
     half=0.5
     execute square_root rnorm2 half
     execute print_scalar rnorm2
          
     ENDPROC CHECK_CONV
#    ------------------              
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
#
# Read transformed integrals from lists 
# ------------------------------------- 
#
      CALL READ_2EL 
#
      CREATE t1a_old 
      CREATE t1a_new   
      CREATE t1a_safe
      CREATE r1a
      CREATE z1a
#
      EXECUTE SIP_BARRIER  
#
# Get initial second-order guess 
# ------------------------------ 
      CALL IGUESS_UHF
      EXECUTE SIP_BARRIER  
      EXECUTE SERVER_BARRIER  
#
      PARDO a, i, b, j 
            REQUEST                     T2old_ab(a,i,b,j) a 
            REQUEST                     T2old_ab(a,j,b,i) a 
            taiai(a,i,b,j)            = T2old_ab(a,i,b,j) 
            t1aiai(a,i,b,j)           = T2old_ab(a,j,b,i) 
            taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
            PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
      ENDPARDO a, i, b, j 
      EXECUTE SERVER_BARRIER  
#
# Start iterations
# ---------------- 
      DO KITER 
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO

         EXECUTE SIP_BARRIER  
         EXECUTE SERVER_BARRIER  

#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CALL T1ANEW 
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAB  
#
         CALL WMINJ 
         CALL AOLADDER 
         CALL WMEBJ 
#
#        Wait for all to finish 
#        ---------------------- 
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
         
         # Add in eps(ijab)*t(ijab) or eps(ijab)*r(ijab) term
         CALL ADD_DIAGT1
         CALL ADD_DIAGT2
         
         if kiter == 1         
         	CALL CG_INIT                  	
         else
	     	CALL CONJ_GRAD
	     endif
     	     
#         CALL CHECK_CONV    
#
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
         CALL ENERGY_NEW 
         EXECUTE SIP_BARRIER  
         EXECUTE SERVER_BARRIER

         EXECUTE SERVER_BARRIER  
         PARDO a, i, b, j 
               REQUEST                     T2old_ab(a,i,b,j) a 
               REQUEST                     T2old_ab(a,j,b,i) a 
               taiai(a,i,b,j)            = T2old_ab(a,i,b,j) 
               t1aiai(a,i,b,j)           = T2old_ab(a,j,b,i) 
               taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
               PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
         ENDPARDO a, i, b, j 
         EXECUTE SERVER_BARRIER   

#
#        Check on convergence 
#        -------------------- 
#
         IF ecorrT < eold 
            ediff = eold - ecorrT 
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
         IF ecorrT > eold 
            ediff = ecorrT - eold  
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
         
         eold = ecorrT 
#         if rnorm2 < ecrit
#         	exit
#         endif          
#
      ENDDO KITER 

      execute sip_barrier 
      totenerg  = ecorrT  
      totenerg += scfeneg  
      execute print_scalar totenerg  
      PARDO a, i, b, j 
            REQUEST                     T2safe_ab(a,i,b,j) a 
            REQUEST                     T2safe_ab(a,j,b,i) a 
            taiai(a,i,b,j)            = T2safe_ab(a,i,b,j) 
            t1aiai(a,i,b,j)           = T2safe_ab(a,j,b,i) 
            taiai(a,i,b,j)           -= t1aiai(a,i,b,j) 
            PREPARE T2old_aa(a,i,b,j) = taiai(a,i,b,j) 
      ENDPARDO a, i, b, j 
      EXECUTE SERVER_BARRIER  
#
# Write amplitudes to file
# ------------------------
#
      CALL WRITE_2EL   
#
      execute sip_barrier
      execute blocks_to_list                t1a_safe
      execute blocks_to_list                T2old_aa
      execute blocks_to_list                T2safe_ab
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL LINCCSD_RHF_SV1_CG    
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
