#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL LINCCSD_UHF_AO1_MOSYMM1_CG
#
# Updated TRANSFORMATION --> ADAPTABLE TO SERVED. Modified from temp6 to 
# use less memory/disk but less efficient.  
#
# AOLADDER --> optimized to use permutational symmetry. 
# T2NEW    --> partially optimized to use permutational symmetry. 
# WAEBF    --> optimized to use permutational symmetry.  
# WMINJ    --> optimized to use permutational symmetry.  
# T2AAXS2 --> optimized to use permutational symmetry. 
# WMEBJ   --> optimized as far as possible 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter    
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j)
      distributed t1a_safe(a,i)
      distributed t1b_safe(b,j)
      distributed r1a(a,i)
      distributed r1b(b,j)
      distributed z1a(a,i)
      distributed z1b(b,j) 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      distributed Vxixi(mu,i1,lambda,i)
      distributed Vxxii(mu,nu,i1,i)
      distributed Viixx(i1,i,mu,nu)
      distributed Vixxi(i1,nu,lambda,i)
      distributed Vxipi(mu,i,p,i1)
      distributed VSpipi(p1,i,p,i1)
      distributed Vixai(i,mu,a,i1)
      distributed Vxaii(mu,a,i,i1)
      distributed Viaai(i,a1,a,i1)
      distributed Vaaii(a,a1,i,i1)
      distributed Vxaai(mu,a1,a,i)
      distributed VSaaai(a2,a,a1,i)
      distributed Vxxai(mu,nu,a,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      distributed Vxjxj(mu,j1,lambda,j)
      distributed Vxxjj(mu,nu,j1,j)
      distributed Vjjxx(j1,nu,lambda,j)
      distributed Vjxxj(j1,nu,lambda,j)
      distributed Vxjqj(mu,j,q,j1)
      distributed VSqjqj(q1,j,q,j1)
      distributed Vjxbj(j,mu,b,j1)
      distributed Vxbjj(mu,b,j,j1)
      distributed Vjbbj(j,b1,b,j1)
      distributed Vbbjj(b,b1,j,j1)
      distributed Vxbbj(mu,b1,b,j)
      distributed VSbbbj(b2,b,b1,j)
      distributed Vxxbj(mu,nu,b,j) 
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      distributed Vxixj(mu,i,nu,j)
      distributed Vxiqj(mu,i,q,j)
      distributed Vpiqj(p,i,q,j)
      distributed Viixb(i,i1,mu,b)
      distributed Viibb(i,i1,b1,b)
      distributed Vxajj(mu,a,j,j1)
      distributed Vaajj(a,a1,j,j1)
      distributed Vxabj(mu,a,b,j)
      distributed Vixxj(i,mu,nu,j)
      distributed Vixbj(i,mu,b,j)
      distributed Viabj(i,a,b,j)
      distributed Vaabj(a,a1,b,j) 
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      distributed Vxbii(mu,b,i,i1)
      distributed Vbbii(b,b1,i,i1)
      distributed Vjbii(j,b,i,i1)
      distributed Vxbai(mu,b,a,i)
      distributed Vbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxxq(mu,nu,lambda,j)
      temp Txxpp(mu,nu,p1,i)
      temp Txxqq(mu,nu,q1,j)
      temp Txppp(mu,p2,p1,i)
      temp Txqpp(mu,q,p1,i)
      temp Txqqq(mu,q2,q1,j)
      temp Txpqq(mu,p,q1,j)
      temp Tpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,j)
      temp Tqqpp(q1,q,p1,i)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Tipqx(i,p,q,sigma) 
      temp Tipqq(i,p,q,q1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp T1pppp(p,p1,p2,p3) 
      temp T1qqqq(q,q1,q2,q3) 
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
# Declare distributed arrays 
# -------------------------- 
#
      distributed Vxxxp(mu,nu,lambda,i)
      distributed Vixxx(i,mu,nu,lambda)
      distributed Vipxx(i,p,nu,lambda)
      distributed Vipqx(i,p,q,lambda)
      distributed Vxxxq(mu,nu,lambda,j)
      distributed Vxxpp(mu,nu,p1,i)
      distributed Vxxqq(mu,nu,q1,j)
      distributed Vxppp(mu,p2,p1,i)
      distributed Vxqpp(mu,q,p1,i)
      distributed Vxqqq(mu,q2,q1,j)
      distributed Vxpqq(mu,p,q1,j)
#
      distributed Wminj_AA(i,i1,i2,i3)
      distributed Wminj_BB(j,j1,j2,j3)
      distributed Wminj_AB(i,i1,j,j1)
      distributed Iiiii(i,i1,i2,i3)
      distributed Ijjjj(j,j1,j2,j3)
      distributed Iiijj(i,i1,j,j1)
      distributed T2new_aa(a,i,a1,i1)
      distributed T2new_bb(b,j,b1,j1)
      distributed T2new_ab(a,i,b,j)
      distributed T2old_aa(a,i,a1,i1)
      distributed T2old_bb(b,j,b1,j1)
      distributed T2old_ab(a,i,b,j)
      distributed T2safe_aa(a,i,a1,i1)
      distributed T2safe_bb(b,j,b1,j1)
      distributed T2safe_ab(a,i,b,j)
      distributed R2_aa(a,i,a1,i1)
      distributed R2_bb(b,j,b1,j1)
      distributed R2_ab(a,i,b,j)
      distributed Z2_aa(a,i,a1,i1)
      distributed Z2_bb(b,j,b1,j1)
      distributed Z2_ab(a,i,b,j)
#
# Declare served arrays 
# --------------------- 
#
      served AOINT(mu,nu,lambda,sigma) 
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Y1aa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Y1bb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     distributed TAO_aa(lambda,i,sigma,i1)
     distributed TAO_bb(lambda,j,sigma,j1)
     distributed TAO_ab(lambda,i,sigma,j)
     distributed T2AO_aa(lambda,i,sigma,i1)
     distributed T2AO_bb(lambda,j,sigma,j1)
     distributed T2AO_ab(lambda,i,sigma,j)
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
      scalar half
      scalar gamma
      scalar gsum
      scalar gtemp
      scalar asum
      scalar aaccum
      scalar atemp
      scalar alpha
      scalar bsum
      scalar btemp
      scalar baccum
      scalar beta
      scalar rtemp
      scalar rsum
      scalar rnorm2

#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      create VSpipi
      create Vaaii
      create Viaai
      create VSaaai
      create VSqjqj
      create Vbbjj
      create Vjbbj
      create VSbbbj
      create Vbbii
      create Vjbii
      create Vbbai
      create Vpiqj
      create Vaajj
      create Viabj
      create Vaabj
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
      execute read_list_to_blocks
      execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1)
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j)
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#    ------------------------------------------------------------------------
#
     ENDPROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_XXII
#
#    ------------------------------------------------------------------------
#
     CREATE Vxixi
     CREATE Vxxii
     CREATE Vixxi
     CREATE Vxxai
     execute sip_barrier
#
     PARDO mu, nu, lambda, sigma
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO i
#
                 Txxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1
                    Txixi(mu,i1,lambda,i)      = Txxxi(mu,nu,lambda,i)*ca(nu,i1)
                    put Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
                 ENDDO i1
#
                 DO i1
                    Txxii(mu,nu,i1,i)      = Txxxi(mu,nu,lambda,i)*ca(lambda,i1)
                    put Vxxii(mu,nu,i1,i) += Txxii(mu,nu,i1,i)
                 ENDDO i1
#
                 DO i1
                    Tixxi(i1,nu,lambda,i)      = Txxxi(mu,nu,lambda,i)*ca(mu,i1)
                    put Vixxi(i1,nu,lambda,i) += Tixxi(i1,nu,lambda,i)
                 ENDDO i1
#
                 DO a
                    Txxai(mu,nu,a,i)      = Txxxi(mu,nu,lambda,i)*ca(lambda,a)
                    put Vxxai(mu,nu,a,i) += Txxai(mu,nu,a,i)
                 ENDDO a
#
              ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
     execute sip_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_XXII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
     CREATE Vxipi
     CREATE VSpipi
     execute sip_barrier
     PARDO mu, nu, i, i1
#
           GET Vxixi(mu,i,nu,i1)
#
           DO p
              Txipi(mu,i,p,i1) = Vxixi(mu,i,nu,i1)*ca(nu,p)
              PUT Vxipi(mu,i,p,i1) += Txipi(mu,i,p,i1)
           ENDDO p
#
     ENDPARDO mu, nu, i, i1
     execute sip_barrier
     DELETE Vxixi
#
     PARDO mu, p, i, i1
#
           GET Vxipi(mu,i,p,i1)
           GET Vxipi(mu,i1,p,i)
#
           DO p1
              Tpipi(p1,i,p,i1)       = Vxipi(mu,i,p,i1)*ca(mu,p1)
              T1pipi(p1,i,p,i1)      = Vxipi(mu,i1,p,i)*ca(mu,p1)
              Tpipi(p1,i,p,i1)      -= T1pipi(p1,i,p,i1)  
              PUT VSpipi(p1,i,p,i1) += Tpipi(p1,i,p,i1) 
           ENDDO p1
#
     ENDPARDO mu, p, i, i1
#
     execute sip_barrier
     DELETE Vxipi
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AAII
#
#    ------------------------------------------------------------------------
#
     CREATE Vxaii
     CREATE Vaaii
     execute sip_barrier
     PARDO mu, nu, i, i1
#
           GET Vxxii(mu,nu,i,i1)
#
           DO a
              Txaii(mu,a,i,i1) = Vxxii(mu,nu,i,i1)*ca(nu,a)
              PUT Vxaii(mu,a,i,i1) += Txaii(mu,a,i,i1)
           ENDDO a
#
     ENDPARDO mu, nu, i, i1
     execute sip_barrier
     DELETE Vxxii
#
#
     PARDO mu, a, i, i1
#
           GET Vxaii(mu,a,i,i1)
#
           DO a1
              Taaii(a1,a,i,i1) = Vxaii(mu,a,i,i1)*ca(mu,a1)
              PUT Vaaii(a1,a,i,i1) += Taaii(a1,a,i,i1)
           ENDDO a1
#
     ENDPARDO mu, a, i, i1
#
     execute sip_barrier
     DELETE Vxaii
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AAII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IAAI
#
#    ------------------------------------------------------------------------
#
     CREATE Vixai
     CREATE Viaai
     execute sip_barrier
     PARDO mu, nu, i, i1
#
           GET Vixxi(i,mu,nu,i1)
#
           DO a
              Tixai(i,mu,a,i1) = Vixxi(i,mu,nu,i1)*ca(nu,a)
              PUT Vixai(i,mu,a,i1) += Tixai(i,mu,a,i1)
           ENDDO a
#
     ENDPARDO mu, nu, i, i1
     execute sip_barrier
     DELETE Vixxi
#
     PARDO mu, a, i, i1
#
           GET Vixai(i,mu,a,i1)
#
           DO a1
              Tiaai(i,a1,a,i1) = Vixai(i,mu,a,i1)*ca(mu,a1)
              PUT Viaai(i,a1,a,i1) += Tiaai(i,a1,a,i1)
           ENDDO a1
#
     ENDPARDO mu, a, i, i1
#
     execute sip_barrier
     DELETE Vixai
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IAAI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AAAI
#
#    ------------------------------------------------------------------------
#
     CREATE Vxaai
     CREATE VSaaai
     execute sip_barrier
     PARDO mu, nu, a, i
#
           GET Vxxai(mu,nu,a,i)
#
           DO a1
              Txaai(mu,a1,a,i) = Vxxai(mu,nu,a,i)*ca(nu,a1)
              PUT Vxaai(mu,a1,a,i) += Txaai(mu,a1,a,i)
           ENDDO a1
#
     ENDPARDO mu, nu, a, i
     execute sip_barrier
     DELETE Vxxai
#
     PARDO mu, a, a1, i
#
           GET Vxaai(mu,a,a1,i)
#
           DO a2
#
              GET Vxaai(mu,a,a2,i)
#
              Taaai(a2,a,a1,i)       = Vxaai(mu,a,a1,i)*ca(mu,a2)
              T1aaai(a2,a,a1,i)      = Vxaai(mu,a,a2,i)*ca(mu,a1)
              Taaai(a2,a,a1,i)      -= T1aaai(a2,a,a1,i)  
              PUT VSaaai(a2,a,a1,i) += Taaai(a2,a,a1,i)
           ENDDO a2
#
     ENDPARDO mu, a, a1, i
#
     execute sip_barrier
     DELETE Vxaai
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AAAI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PPPP
#
#    ------------------------------------------------------------------------
#
          CALL TRAN_XXII
          CALL TRAN_PIPI
          CALL TRAN_AAII
          CALL TRAN_IAAI
          CALL TRAN_AAAI
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PPPP
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_XXJJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxjxj
     CREATE Vxxjj
     CREATE Vjxxj
     CREATE Vxxbj
     execute sip_barrier
#
     PARDO mu, nu, lambda, sigma
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1
                    Txjxj(mu,j1,lambda,j)      = Txxxj(mu,nu,lambda,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
                 ENDDO j1
#
                 DO j1
                    Txxjj(mu,nu,j1,j)      = Txxxj(mu,nu,lambda,j)*cb(lambda,j1)
                    put Vxxjj(mu,nu,j1,j) += Txxjj(mu,nu,j1,j)
                 ENDDO j1
#
                 DO j1
                    Tjxxj(j1,nu,lambda,j)      = Txxxj(mu,nu,lambda,j)*cb(mu,j1)
                    put Vjxxj(j1,nu,lambda,j) += Tjxxj(j1,nu,lambda,j)
                 ENDDO j1
#
                 DO b
                    Txxbj(mu,nu,b,j)      = Txxxj(mu,nu,lambda,j)*cb(lambda,b)
                    put Vxxbj(mu,nu,b,j) += Txxbj(mu,nu,b,j)
                 ENDDO b
#
              ENDDO j
#
     ENDPARDO mu, nu, lambda, sigma
     execute sip_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_XXJJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_QJQJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxjqj
     CREATE VSqjqj
     execute sip_barrier
     PARDO mu, nu, j, j1
#
           GET Vxjxj(mu,j,nu,j1)
#
           DO q
              Txjqj(mu,j,q,j1) = Vxjxj(mu,j,nu,j1)*cb(nu,q)
              PUT Vxjqj(mu,j,q,j1) += Txjqj(mu,j,q,j1)
           ENDDO q
#
     ENDPARDO mu, nu, j, j1
     execute sip_barrier
     DELETE Vxjxj
#
     PARDO mu, q, j, j1
#
           GET Vxjqj(mu,j,q,j1)
           GET Vxjqj(mu,j1,q,j)
#
           DO q1
              Tqjqj(q1,j,q,j1)       = Vxjqj(mu,j,q,j1)*cb(mu,q1)
              T1qjqj(q1,j,q,j1)      = Vxjqj(mu,j1,q,j)*cb(mu,q1)
              Tqjqj(q1,j,q,j1)      -= T1qjqj(q1,j,q,j1) 
              PUT VSqjqj(q1,j,q,j1) += Tqjqj(q1,j,q,j1)
           ENDDO q1
#
     ENDPARDO mu, q, j, j1
#
     execute sip_barrier
     DELETE Vxjqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_QJQJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBJJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxbjj
     CREATE Vbbjj
     execute sip_barrier
     PARDO mu, nu, j, j1
#
           GET Vxxjj(mu,nu,j,j1)
#
           DO b
              Txbjj(mu,b,j,j1) = Vxxjj(mu,nu,j,j1)*cb(nu,b)
              PUT Vxbjj(mu,b,j,j1) += Txbjj(mu,b,j,j1)
           ENDDO b
#
     ENDPARDO mu, nu, j, j1
     execute sip_barrier
     DELETE Vxxjj
#
     PARDO mu, b, j, j1
#
           GET Vxbjj(mu,b,j,j1)
#
           DO b1
              Tbbjj(b1,b,j,j1) = Vxbjj(mu,b,j,j1)*cb(mu,b1)
              PUT Vbbjj(b1,b,j,j1) += Tbbjj(b1,b,j,j1)
           ENDDO b1
#
     ENDPARDO mu, b, j, j1
#
     execute sip_barrier
     DELETE Vxbjj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBJJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_JBBJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vjxbj
     CREATE Vjbbj
     execute sip_barrier
     PARDO mu, nu, j, j1
#
           GET Vjxxj(j,mu,nu,j1)
#
           DO b
              Tjxbj(j,mu,b,j1) = Vjxxj(j,mu,nu,j1)*cb(nu,b)
              PUT Vjxbj(j,mu,b,j1) += Tjxbj(j,mu,b,j1)
           ENDDO b
#
     ENDPARDO mu, nu, j, j1
     execute sip_barrier
     DELETE Vjxxj
#
     PARDO mu, b, j, j1
#
           GET Vjxbj(j,mu,b,j1)
#
           DO b1
              Tjbbj(j,b1,b,j1) = Vjxbj(j,mu,b,j1)*cb(mu,b1)
              PUT Vjbbj(j,b1,b,j1) += Tjbbj(j,b1,b,j1)
           ENDDO b1
#
     ENDPARDO mu, b, j, j1
#
     execute sip_barrier
     DELETE Vjxbj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_JBBJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBBJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxbbj
     CREATE VSbbbj
     execute sip_barrier
     PARDO mu, nu, b, j
#
           GET Vxxbj(mu,nu,b,j)
#
           DO b1
              Txbbj(mu,b1,b,j) = Vxxbj(mu,nu,b,j)*cb(nu,b1)
              PUT Vxbbj(mu,b1,b,j) += Txbbj(mu,b1,b,j)
           ENDDO b1
#
     ENDPARDO mu, nu, b, j
     execute sip_barrier
     DELETE Vxxbj
#
     PARDO mu, b, b1, j
#
           GET Vxbbj(mu,b,b1,j)
#
           DO b2
#
              GET Vxbbj(mu,b,b2,j)
#
              Tbbbj(b2,b,b1,j)       = Vxbbj(mu,b,b1,j)*cb(mu,b2)
              T1bbbj(b2,b,b1,j)      = Vxbbj(mu,b,b2,j)*cb(mu,b1)
              Tbbbj(b2,b,b1,j)      -= T1bbbj(b2,b,b1,j) 
              PUT VSbbbj(b2,b,b1,j) += Tbbbj(b2,b,b1,j)
           ENDDO b2
#
     ENDPARDO mu, b, b1, j
#
     execute sip_barrier
     DELETE Vxbbj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBBJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_QQQQ
#
#    ------------------------------------------------------------------------
#
          CALL TRAN_XXJJ
          CALL TRAN_QJQJ
          CALL TRAN_BBJJ
          CALL TRAN_JBBJ
          CALL TRAN_BBBJ
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_QQQQ
# 
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_YYII
#
#    ------------------------------------------------------------------------
#
     CREATE Vxxii
     CREATE Vxxai
     execute sip_barrier
#
     PARDO mu, nu, lambda, sigma
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO i
#
                 Txxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1
                    Txxii(mu,nu,i1,i)      = Txxxi(mu,nu,lambda,i)*ca(lambda,i1)
                    put Vxxii(mu,nu,i1,i) += Txxii(mu,nu,i1,i)
                 ENDDO i1
#
                 DO a
                    Txxai(mu,nu,a,i)      = Txxxi(mu,nu,lambda,i)*ca(lambda,a)
                    put Vxxai(mu,nu,a,i) += Txxai(mu,nu,a,i)
                 ENDDO a
#
              ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
     execute sip_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_YYII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBII
#
#    ------------------------------------------------------------------------
#
     CREATE Vxbii
     CREATE Vbbii
     CREATE Vjbii
     execute sip_barrier
     PARDO mu, nu, i, i1
#
           GET Vxxii(mu,nu,i,i1)
#
           DO b
              Txbii(mu,b,i,i1) = Vxxii(mu,nu,i,i1)*cb(nu,b)
              PUT Vxbii(mu,b,i,i1) += Txbii(mu,b,i,i1)
           ENDDO b
#
     ENDPARDO mu, nu, i, i1
     execute sip_barrier
     DELETE Vxxii
#
     PARDO mu, b, i, i1
#
           GET Vxbii(mu,b,i,i1)
#
           DO b1
#
              Tbbii(b1,b,i,i1) = Vxbii(mu,b,i,i1)*cb(mu,b1)
              PUT Vbbii(b1,b,i,i1) += Tbbii(b1,b,i,i1)
#
           ENDDO b1
#
     ENDPARDO mu, b, i, i1
#
     PARDO mu, b, i, i1
#
           GET Vxbii(mu,b,i,i1)
#
           DO j
#
              Tjbii(j,b,i,i1) = Vxbii(mu,b,i,i1)*cb(mu,j)
              PUT Vjbii(j,b,i,i1) += Tjbii(j,b,i,i1)
#
           ENDDO j
#
     ENDPARDO mu, b, i, i1
     execute sip_barrier
     DELETE Vxbii
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBAI
#
#    ------------------------------------------------------------------------
#
     CREATE Vxbai
     CREATE Vbbai
     execute sip_barrier
     PARDO mu, nu, a, i
#
           GET Vxxai(mu,nu,a,i)
#
           DO b
              Txbai(mu,b,a,i) = Vxxai(mu,nu,a,i)*cb(nu,b)
              PUT Vxbai(mu,b,a,i) += Txbai(mu,b,a,i)
           ENDDO b
#
     ENDPARDO mu, nu, a, i
     execute sip_barrier
     DELETE Vxxai
#
     PARDO mu, b, a, i
#
           GET Vxbai(mu,b,a,i)
#
           DO b1
#
              Tbbai(b1,b,a,i) = Vxbai(mu,b,a,i)*cb(mu,b1)
              PUT Vbbai(b1,b,a,i) += Tbbai(b1,b,a,i)
#
           ENDDO b1
#
     ENDPARDO mu, b, a, i
     execute sip_barrier
     DELETE Vxbai
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBAI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_QQPP
#
#    ------------------------------------------------------------------------
#
          CALL TRAN_YYII
          CALL TRAN_BBII
          CALL TRAN_BBAI
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_QQPP
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_XXIJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxixj
     CREATE Vixxj
     CREATE Vxxjj
#    CREATE Viixx
     CREATE Vxxbj
     execute sip_barrier
#
     PARDO mu, nu, lambda, sigma
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO i
                    Txixj(mu,i,lambda,j)      = Txxxj(mu,nu,lambda,j)*ca(nu,i)
                    put Vxixj(mu,i,lambda,j) += Txixj(mu,i,lambda,j)
                 ENDDO i
#
                 DO i
                    Tixxj(i,nu,lambda,j)      = Txxxj(mu,nu,lambda,j)*ca(mu,i)
                    put Vixxj(i,nu,lambda,j) += Tixxj(i,nu,lambda,j)
                 ENDDO i
#
                 DO j1
                    Txxjj(mu,nu,j1,j)      = Txxxj(mu,nu,lambda,j)*cb(lambda,j1)
                    put Vxxjj(mu,nu,j1,j) += Txxjj(mu,nu,j1,j)
                 ENDDO j1
#
                 DO b
                    Txxbj(mu,nu,b,j)      = Txxxj(mu,nu,lambda,j)*cb(lambda,b)
                    put Vxxbj(mu,nu,b,j) += Txxbj(mu,nu,b,j)
                 ENDDO b
#
              ENDDO j
#
#             DO i
#
#                Tixxx(i,nu,lambda,sigma) = AOINT(mu,nu,lambda,sigma)*ca(mu,i)
#
#                DO i1
#
#                   Tiixx(i,i1,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(nu,i1)
#                   PUT Viixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma)
#
#                ENDDO i1
#
#             ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
     execute sip_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_XXIJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxiqj
     CREATE Vpiqj
     execute sip_barrier
     PARDO mu, nu, i, j
#
           GET Vxixj(mu,i,nu,j)
#
           DO q
              Txiqj(mu,i,q,j) = Vxixj(mu,i,nu,j)*cb(nu,q)
              PUT Vxiqj(mu,i,q,j) += Txiqj(mu,i,q,j)
           ENDDO q
#
     ENDPARDO mu, nu, i, j
     execute sip_barrier
     DELETE Vxixj
#
     PARDO mu, q, i, j
#
           GET Vxiqj(mu,i,q,j)
#
           DO p
#
              Tpiqj(p,i,q,j) = Vxiqj(mu,i,q,j)*ca(mu,p)
              PUT Vpiqj(p,i,q,j) += Tpiqj(p,i,q,j)
#
           ENDDO p
#
     ENDPARDO mu, q, i, j
#
     execute sip_barrier
     DELETE Vxiqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AAJJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxajj
     CREATE Vaajj
     execute sip_barrier
     PARDO mu, nu, j, j1
#
           GET Vxxjj(mu,nu,j,j1)
#
           DO a
              Txajj(mu,a,j,j1) = Vxxjj(mu,nu,j,j1)*ca(nu,a)
              PUT Vxajj(mu,a,j,j1) += Txajj(mu,a,j,j1)
           ENDDO a
#
     ENDPARDO mu, nu, j, j1
     execute sip_barrier
     DELETE Vxxjj
#
     PARDO mu, a, j, j1
#
           GET Vxajj(mu,a,j,j1)
#
           DO a1
              Taajj(a1,a,j,j1) = Vxajj(mu,a,j,j1)*ca(mu,a1)
              PUT Vaajj(a1,a,j,j1) += Taajj(a1,a,j,j1)
           ENDDO a1
#
     ENDPARDO mu, a, j, j1
#
     execute sip_barrier
     DELETE Vxajj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AAJJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IABJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vixbj
     CREATE Viabj
     execute sip_barrier
     PARDO mu, nu, i, j
#
           GET Vixxj(i,mu,nu,j)
#
           DO b
              Tixbj(i,mu,b,j) = Vixxj(i,mu,nu,j)*cb(nu,b)
              PUT Vixbj(i,mu,b,j) += Tixbj(i,mu,b,j)
           ENDDO b
#
     ENDPARDO mu, nu, i, j
     execute sip_barrier
     DELETE Vixxj
#
     PARDO mu, b, i, j
#
           GET Vixbj(i,mu,b,j)
#
           DO a
              Tiabj(i,a,b,j) = Vixbj(i,mu,b,j)*ca(mu,a)
              PUT Viabj(i,a,b,j) += Tiabj(i,a,b,j)
           ENDDO a
#
     ENDPARDO mu, b, i, j
#
     execute sip_barrier
     DELETE Vixbj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IABJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IIBB
#
#    ------------------------------------------------------------------------
#
     CREATE Viixb
     CREATE Viibb
     execute sip_barrier
     PARDO mu, nu, i, i1
#
           GET Viixx(i,i1,mu,nu)
#
           DO b
              Tiixb(i,i1,mu,b) = Viixx(i,i1,mu,nu)*cb(nu,b)
              PUT Viixb(i,i1,mu,b) += Tiixb(i,i1,mu,b)
           ENDDO b
#
     ENDPARDO mu, nu, i, i1
     execute sip_barrier
     DELETE Viixx
#
     PARDO mu, b, i, i1
#
           GET Viixb(i,i1,mu,b)
#
           DO b1
              Tiibb(i,i1,b1,b) = Viixb(i,i1,mu,b)*cb(mu,b1)
              PUT Viibb(i,i1,b1,b) += Tiibb(i,i1,b1,b)
           ENDDO b1
#
     ENDPARDO mu, b, i, i1
#
     execute sip_barrier
     DELETE Viixb
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IIBB
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AABJ
#
#    ------------------------------------------------------------------------
#
     CREATE Vxabj
     CREATE Vaabj
     execute sip_barrier
     PARDO mu, nu, b, j
#
           GET Vxxbj(mu,nu,b,j)
#
           DO a
              Txabj(mu,a,b,j) = Vxxbj(mu,nu,b,j)*ca(nu,a)
              PUT Vxabj(mu,a,b,j) += Txabj(mu,a,b,j)
           ENDDO a
#
     ENDPARDO mu, nu, b, j
     execute sip_barrier
     DELETE Vxxbj
#
     PARDO mu, a, b, j
#
           GET Vxabj(mu,a,b,j)
#
           DO a1
              Taabj(a1,a,b,j) = Vxabj(mu,a,b,j)*ca(mu,a1)
              PUT Vaabj(a1,a,b,j) += Taabj(a1,a,b,j)
           ENDDO a1
#
     ENDPARDO mu, a, b, j
#
     execute sip_barrier
     DELETE Vxabj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AABJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PPQQ
#
#    ------------------------------------------------------------------------
#
          CALL TRAN_XXIJ
          CALL TRAN_PIQJ
          CALL TRAN_AAJJ
          CALL TRAN_IABJ
          CALL TRAN_AABJ
#         CALL TRAN_IIBB
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PPQQ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_UHF_P1 
# 
         CALL TRAN_PPPP  
         CALL TRAN_QQQQ  
         CALL TRAN_PPQQ  
         CALL TRAN_QQPP  
#
     ENDPROC TRAN_UHF_P1 
# 
#    ------------------------------------------------------------------------ 
# 
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, a1, i, i1 
#
           GET VSpipi(a,i,a1,i1) 
#
           Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1)
           execute energy_reg_denominator Taiai 
           PUT T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)  
#
     ENDPARDO a, a1, i, i1  
#
     PARDO b, b1, j, j1 
#
           GET VSqjqj(b,j,b1,j1) 
#
           Tbjbj(b,j,b1,j1) = VSqjqj(b,j,b1,j1)  
           execute energy_reg_denominator Tbjbj 
           PUT T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
#
     ENDPARDO b, b1, j, j1 
#
     PARDO a, b, i, j 
#
           GET Vpiqj(a,i,b,j) 
#
           Taibj(a,i,b,j) = Vpiqj(a,i,b,j)
           execute energy_reg_denominator Taibj 
           PUT T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i 
#
           tai(a,i) = 0.0 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i 
#
     PARDO b, j 
#
           tbj(b,j) = 0.0 
           PUT t1b_old(b,j) = tbj(b,j) 
     ENDPARDO b, j 
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i 
#
            tai(a,i) = 0.0 

            DO a1 
            DO i1 
#
               GET Vaaii(a,a1,i1,i) 
               GET Viaai(i1,a1,a,i) 
               GET t1a_old(a1,i1) 
#
               Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)  
               Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)  
#
               t1ai(a,i) = Tpppp(i1,a1,a,i)*t1a_old(a1,i1) 
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
            DO a2 
            DO i1 
#
               GET VSaaai(a2,a,a1,i1) 
               GET t2old_aa(a1,i,a2,i1) 
#
               t1ai(a,i)  = VSaaai(a2,a,a1,i1)*t2old_aa(a1,i,a2,i1) 
               t1ai(a,i) *= -0.5 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO i1 
            ENDDO a2 
            ENDDO a1 
#
            DO a1 
            DO i1 
            DO i2 
#
               GET VSpipi(a1,i2,i,i1) 
               GET t2old_aa(a,i1,a1,i2) 
#
               t1ai(a,i)  = VSpipi(a1,i2,i,i1)*t2old_aa(a,i1,a1,i2) 
               t1ai(a,i) *= -0.5 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO i2 
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
#
               GET Viabj(i,a,b,j)  
               GET t1b_old(b,j) 
               t1ai(a,i)  = Viabj(i,a,b,j)*t1b_old(b,j) 
               tai(a,i) += t1ai(a,i) 
#
            ENDDO j 
            ENDDO b 
#
            DO a1 
            DO b 
            DO j 
#
               GET Vaabj(a1,a,b,j) 
               GET t2old_ab(a1,i,b,j) 
#
               t1ai(a,i)  = Vaabj(a1,a,b,j)*t2old_ab(a1,i,b,j) 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO j 
            ENDDO b 
            ENDDO a1 
#
            DO b 
            DO i1 
            DO j 
#
               GET Vpiqj(i,i1,b,j) 
               GET t2old_ab(a,i1,b,j) 
#
               t1ai(a,i)  = Vpiqj(i,i1,b,j)*t2old_ab(a,i1,b,j) 
               t1ai(a,i) *= -1.0 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO j 
            ENDDO i1 
            ENDDO b 
#
#            execute energy_reg_denominator tai(a,i) 
            PUT t1a_new(a,i) = tai(a,i) 
#
      ENDPARDO a, i 
#
      ENDPROC T1ANEW 
#     --------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In the procedure T1BNEW all contributions to the singles amplitude t1b 
# are computed. 
#
      PROC T1BNEW 
#     -----------
#
      PARDO b, j 
#
            tbj(b,j) = 0.0 

            DO b1 
            DO j1 
#
               GET Vbbjj(b,b1,j1,j) 
               GET Vjbbj(j1,b1,b,j) 
#
               Tqqqq(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)  
               Tqqqq(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)  
#
               GET t1b_old(b1,j1) 
               t1bj(b,j) = Tqqqq(j1,b1,b,j)*t1b_old(b1,j1) 
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
#
               GET Viabj(i,a,b,j)  
               GET t1a_old(a,i) 
#
               t1bj(b,j)  = Viabj(i,a,b,j)*t1a_old(a,i) 
               tbj(b,j) += t1bj(b,j) 
#
            ENDDO i 
            ENDDO a 
#
            DO b1 
            DO b2 
            DO j1 
#
               GET VSbbbj(b2,b,b1,j1) 
               GET t2old_bb(b1,j,b2,j1) 
#
               t1bj(b,j)  = VSbbbj(b2,b,b1,j1)*t2old_bb(b1,j,b2,j1) 
               t1bj(b,j) *= -0.5 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO j1 
            ENDDO b2 
            ENDDO b1 
#
            DO b1 
            DO a 
            DO i 
#
               GET Vbbai(b1,b,a,i) 
               GET T2old_ab(a,i,b1,j) 
#
               t1bj(b,j)  = Vbbai(b1,b,a,i)*T2old_ab(a,i,b1,j) 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO i 
            ENDDO a 
            ENDDO b1 
#
            DO b1 
            DO j1 
            DO j2 
#
               GET VSqjqj(b1,j2,j,j1) 
               GET t2old_bb(b,j1,b1,j2) 
#
               t1bj(b,j)  = VSqjqj(b1,j2,j,j1)*t2old_bb(b,j1,b1,j2) 
               t1bj(b,j) *= -0.5 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO j2 
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO j1 
            DO i 
#
               GET Vpiqj(a,i,j,j1)  
               GET t2old_ab(a,i,b,j1)  
#
               t1bj(b,j)  =  Vpiqj(a,i,j,j1)*t2old_ab(a,i,b,j1) 
               t1bj(b,j) *= -1.0 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO i 
            ENDDO j1 
            ENDDO a 
#
#            execute energy_reg_denominator tbj(b,j) 
            PUT t1b_new(b,j) = tbj(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC T1BNEW 
#     --------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
      PROC WminjAA
#
      PARDO i2, i3, i1
#
            DO i
#
               IF i < i1
#
                  GET VSpipi(i2,i,i3,i1)

                  DO a
                  DO a1
#
                     GET T2old_aa(a,i2,a1,i3)
#
                     Taiai(a,i,a1,i1)        = T2old_aa(a,i2,a1,i3)*VSpipi(i2,i,i3,i1)
                     Taiai(a,i,a1,i1)       *= 0.5
                     T1aiai(a1,i1,a,i)       = Taiai(a,i,a1,i1)
                     PUT T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
                     PUT T2new_aa(a1,i1,a,i) += T1aiai(a1,i1,a,i)
#
                  ENDDO a1
                  ENDDO a
#
               ENDIF # i < i1
#
               IF i == i1
#
                  GET VSpipi(i2,i,i3,i1)

                  DO a
                  DO a1
#
                     GET T2old_aa(a,i2,a1,i3)
#
                     Taiai(a,i,a1,i1)         = T2old_aa(a,i2,a1,i3)*VSpipi(i2,i,i3,i1)
                     Taiai(a,i,a1,i1)        *= 0.5
                     PUT T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
#
                  ENDDO a1
                  ENDDO a
#
               ENDIF # i == i1
#
            ENDDO i
#
      ENDPARDO i2, i3, i1
#
      ENDPROC WminjAA
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WminjBB 
#
      PARDO j1, j2, j3 
#
            DO j 
#
               IF j < j1 
#
                  GET VSqjqj(j2,j,j3,j1) 

                  DO b 
                  DO b1 
#
                     GET T2old_bb(b,j2,b1,j3)
#
                     Tbjbj(b,j,b1,j1)         = T2old_bb(b,j2,b1,j3)*VSqjqj(j2,j,j3,j1) 
                     Tbjbj(b,j,b1,j1)        *= 0.5 
                     T1bjbj(b1,j1,b,j)        = Tbjbj(b,j,b1,j1)  
                     PUT T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
                     PUT T2new_bb(b1,j1,b,j) += T1bjbj(b1,j1,b,j)  
#
                  ENDDO b1 
                  ENDDO b 
#
               ENDIF # j < j1 
#
               IF j == j1 
#
                  GET VSqjqj(j2,j,j3,j1) 

                  DO b 
                  DO b1 
#
                     GET T2old_bb(b,j2,b1,j3)
#
                     Tbjbj(b,j,b1,j1)         = T2old_bb(b,j2,b1,j3)*VSqjqj(j2,j,j3,j1) 
                     Tbjbj(b,j,b1,j1)        *= 0.5 
                     PUT T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
#
                  ENDDO b1 
                  ENDDO b 
#
               ENDIF # j == j1 
#
            ENDDO j 
#
      ENDPARDO j1, j2, j3 
#
      ENDPROC WminjBB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WminjAB 
#
      PARDO i, i1, j, j1 
#
            GET Vpiqj(i1,i,j1,j) 

            DO a   
            DO b  
#
               GET T2old_ab(a,i1,b,j1) 
#
               Taibj(a,i,b,j)         = T2old_ab(a,i1,b,j1)*Vpiqj(i1,i,j1,j)
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO b 
            ENDDO a  
#
      ENDPARDO i, i1, j, j1 
#
      ENDPROC WminjAB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAA 
           CALL WminjAB 
           CALL WminjBB 
#
      ENDPROC WMINJ 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAA the new amplitudes T2new_aa are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# The new amplitudes T2new_aa are FIRST updated in this procedure and 
# therefore created at the begining of the procedure. 
#
      PROC T2NEWAA    
#     ------------
#
      CREATE T2new_aa 
      EXECUTE SIP_BARRIER T2NEW_AA 
#
      PARDO a, i, a1, i1 
#
#            GET VSpipi(a,i,a1,i1) 
#
#            Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1)
            Taiai(a,i,a1,i1)   = 0.0 
            TYaiai(a1,i,a,i1)  = 0.0 
            TY1aiai(a,i1,a1,i) = 0.0 
#
            DO a2 
#
               GET VSaaai(a,a2,a1,i1) 
               GET t1a_old(a2,i) 
#
               T1aiai(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*t1a_old(a2,i) 
               T2aiai(a,i1,a1,i) = T1aiai(a,i,a1,i1)  
#
               Taiai(a,i,a1,i1)  += T1aiai(a,i,a1,i1) 
               TY1aiai(a,i1,a1,i)-= T2aiai(a,i1,a1,i) 
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(i2,i,a1,i1) 
               GET t1a_old(a,i2) 
#
               T1aiai(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*t1a_old(a,i2) 
               T2aiai(a1,i,a,i1) = T1aiai(a,i,a1,i1) 
# 
               Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1) 
               TYaiai(a1,i,a,i1) += T2aiai(a1,i,a,i1) 
#
            ENDDO i2 
#
            PUT T2NEW_aa(a,i,a1,i1) += Taiai(a,i,a1,i1) 
            PUT T2NEW_aa(a1,i,a,i1) += TYaiai(a1,i,a,i1) 
            PUT T2NEW_aa(a,i1,a1,i) += TY1aiai(a,i1,a1,i) 
#
      ENDPARDO a, i, a1, i1 
#
      EXECUTE SIP_BARRIER T2NEW_AA 
#
      ENDPROC T2NEWAA    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWBB the new amplitudes T2new_bb are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# The new amplitudes T2new_aa are FIRST updated in this procedure and 
# therefore created ate the begining of the procedure. 
#
      PROC T2NEWBB    
#     ------------
#
      CREATE T2new_bb 
      EXECUTE SIP_BARRIER T2NEW_BB
#
      PARDO b, j, b1, j1 
#
#            GET VSqjqj(b,j,b1,j1) 
#
#            Tbjbj(b,j,b1,j1)   = Vsqjqj(b,j,b1,j1)
            Tbjbj(b,j,b1,j1)   =  0.0 
            TYbjbj(b1,j,b,j1)  =  0.0 
            TY1bjbj(b,j1,b1,j) =  0.0 
#
            DO b2 
#
               GET VSbbbj(b,b2,b1,j1) 
               GET t1b_old(b2,j) 
#
               T1bjbj(b,j,b1,j1)   = VSbbbj(b,b2,b1,j1)*t1b_old(b2,j) 
               T2bjbj(b,j1,b1,j)   = T1bjbj(b,j,b1,j1) 
# 
               Tbjbj(b,j,b1,j1)   += T1bjbj(b,j,b1,j1) 
               TY1bjbj(b,j1,b1,j) -= T2bjbj(b,j1,b1,j)  

            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(j2,j,b1,j1) 
               GET t1b_old(b,j2) 
#
               T1bjbj(b,j,b1,j1)  = VSqjqj(j2,j,b1,j1)*t1b_old(b,j2) 
               T2bjbj(b1,j,b,j1)  = T1bjbj(b,j,b1,j1) 
#  
               Tbjbj(b,j,b1,j1)  -= T1bjbj(b,j,b1,j1) 
               TYbjbj(b1,j,b,j1) += T2bjbj(b1,j,b,j1) 

            ENDDO j2 
#
            PUT T2NEW_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)  
            PUT T2NEW_bb(b1,j,b,j1) += TYbjbj(b1,j,b,j1) 
            PUT T2NEW_bb(b,j1,b1,j) += TY1bjbj(b,j1,b1,j) 
#
      ENDPARDO b, j, b1, j1 
#
      EXECUTE SIP_BARRIER T2NEW_BB 
#
      ENDPROC T2NEWBB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      CREATE T2new_ab 
      EXECUTE SIP_BARRIER T2NEW_AB 
#
      PARDO a, i, b, j 
#
#            GET Vpiqj(a,i,b,j) 
#            Taibj(a,i,b,j) = Vpiqj(a,i,b,j)
            Taibj(a,i,b,j) = 0.0 
#
            DO a1 
#
               GET Vaabj(a,a1,b,j) 
               GET t1a_old(a1,i) 
#
               T1aibj(a,i,b,j) = Vaabj(a,a1,b,j)*t1a_old(a1,i)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO a1 
#
            DO b1 
#
               GET Vbbai(b,b1,a,i) 
               GET t1b_old(b1,j) 
#
               T1aibj(a,i,b,j) = Vbbai(b,b1,a,i)*t1b_old(b1,j)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO b1 
#
            DO i1 
#
               GET Vpiqj(i1,i,b,j) 
               GET t1a_old(a,i1) 
#
               T1aibj(a,i,b,j) = Vpiqj(i1,i,b,j)*t1a_old(a,i1) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO i1 
#
            DO j1 
#
               GET Vpiqj(a,i,j1,j) 
               GET t1b_old(b,j1) 
#
               T1aibj(a,i,b,j) = Vpiqj(a,i,j1,j)*t1b_old(b,j1) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO j1 
#
            PUT T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      EXECUTE SIP_BARRIER T2NEW_AB 
#
      ENDPROC T2NEWAB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
     CREATE  TAO_aa 
     CREATE  TAO_bb 
     CREATE  TAO_ab 
# 
     execute sip_barrier ca  
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
     PARDO a, a1, i1  
#
           DO i 
#
           IF i < i1 
#
              GET T2old_aa(a,i,a1,i1)
              GET T2old_aa(a,i1,a1,i)
              Taiai(a,i,a1,i1)   = T2old_aa(a,i,a1,i1)
              T1aiai(a,i,a1,i1)  = T2old_aa(a,i1,a1,i) 
              Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1)  
#
              DO lambda  
#
                 Zaa(lambda,i,a1,i1) = Taiai(a,i,a1,i1)*ca(lambda,a)
#
                 DO sigma 
#
                    ZZaa(lambda,i,sigma,i1)  = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                    ZZ1aa(sigma,i1,lambda,i) = ZZaa(lambda,i,sigma,i1) 
                    PUT TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
                    PUT TAO_aa(sigma,i1,lambda,i) += ZZ1aa(sigma,i1,lambda,i)  
#
                 ENDDO sigma 
#
              ENDDO lambda 
#
           ENDIF # i < i1 
#
           IF i == i1 
           
              GET T2old_aa(a,i,a1,i1)
              GET T2old_aa(a,i1,a1,i)
              Taiai(a,i,a1,i1)   = T2old_aa(a,i,a1,i1)
              T1aiai(a,i,a1,i1)  = T2old_aa(a,i1,a1,i) 
              Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1)  
#
              DO lambda  
#
                 Zaa(lambda,i,a1,i1) = Taiai(a,i,a1,i1)*ca(lambda,a)
#
                 DO sigma 
#
                    ZZaa(lambda,i,sigma,i1)  = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                    PUT TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
                 ENDDO sigma 
#
              ENDDO lambda 
#
           ENDIF # i == i1 
#
           ENDDO i 
#
     ENDPARDO a, a1, i1  
#
     PARDO b, b1, j1  
#
           DO j 
#
           IF j < j1 
#
              GET T2old_bb(b,j,b1,j1)
              GET T2old_bb(b,j1,b1,j)
              Tbjbj(b,j,b1,j1)   = T2old_bb(b,j,b1,j1)
              T1bjbj(b,j,b1,j1)  = T2old_bb(b,j1,b1,j) 
              Tbjbj(b,j,b1,j1)  -= T1bjbj(b,j,b1,j1)  
#
              DO lambda  
#
                 Zbb(lambda,j,b1,j1) = Tbjbj(b,j,b1,j1)*cb(lambda,b)
#
                 DO sigma 
#
                    ZZbb(lambda,j,sigma,j1)  = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                    ZZ1bb(sigma,j1,lambda,j) = ZZbb(lambda,j,sigma,j1)  
                    PUT TAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
                    PUT TAO_bb(sigma,j1,lambda,j) += ZZ1bb(sigma,j1,lambda,j)
#
                 ENDDO sigma 
#
              ENDDO lambda 
#
           ENDIF # j < j1 
#
           IF j == j1 
#
              GET T2old_bb(b,j,b1,j1)
              GET T2old_bb(b,j1,b1,j)
              Tbjbj(b,j,b1,j1)   = T2old_bb(b,j,b1,j1)
              T1bjbj(b,j,b1,j1)  = T2old_bb(b,j1,b1,j) 
              Tbjbj(b,j,b1,j1)  -= T1bjbj(b,j,b1,j1)  
#
              DO lambda  
#
                 Zbb(lambda,j,b1,j1) = Tbjbj(b,j,b1,j1)*cb(lambda,b)
#
                 DO sigma 
#
                       ZZbb(lambda,j,sigma,j1)  = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                       PUT TAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
#
                 ENDDO sigma 
#
              ENDDO lambda 
#
           ENDIF # j == j1 
#
           ENDDO j 
#
     ENDPARDO b, b1, j1  
#
     PARDO a, b, i, j  
#
           GET T2old_ab(a,i,b,j)
#
           DO lambda  
#
              Zab(lambda,i,b,j) = T2old_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma 
#
                 ZZab(lambda,i,sigma,j) = Zab(lambda,i,b,j)*cb(sigma,b)
                 PUT TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma 
#
           ENDDO lambda 
#
     ENDPARDO a, b, i, j  
     execute sip_barrier ca  
#
     CREATE T2AO_aa 
     CREATE T2AO_bb 
     CREATE T2AO_ab 
#
     execute sip_barrier ca  
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
#
           compute_integrals aoint(lambda,mu,sigma,nu)
#
           DO i
           DO i1 
#
              IF i < i1 
#
                 GET TAO_aa(lambda,i,sigma,i1)
                 Yaa(mu,i,nu,i1) = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i) = Yaa(mu,i,nu,i1) 
                 PUT T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PUT T2AO_aa(nu,i1,mu,i) += Y1aa(nu,i1,mu,i) 
#
              ENDIF # i < i1 
#
              IF i == i1 
#
                 GET TAO_aa(lambda,i,sigma,i1)
                 Yaa(mu,i,nu,i1) = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                 PUT T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
#
              ENDIF # i == i1 
#
           ENDDO i1 
           ENDDO i
#
           DO j
           DO j1 
#
              IF j < j1 
#
                 GET TAO_bb(lambda,j,sigma,j1)
                 Ybb(mu,j,nu,j1) = aoint(lambda,mu,sigma,nu)*TAO_bb(lambda,j,sigma,j1)
                 Y1bb(nu,j1,mu,j) = Ybb(mu,j,nu,j1) 
                 PUT T2AO_bb(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
                 PUT T2AO_bb(nu,j1,mu,j) += Y1bb(nu,j1,mu,j)  
#
              ENDIF # j < j1 
#
              IF j == j1 
#
                 GET TAO_bb(lambda,j,sigma,j1)
                 Ybb(mu,j,nu,j1) = aoint(lambda,mu,sigma,nu)*TAO_bb(lambda,j,sigma,j1)
                 PUT T2AO_bb(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
#
              ENDIF # j == j1 
#
           ENDDO j1  
           ENDDO j
#
           DO i 
           DO j
#
              GET TAO_ab(lambda,i,sigma,j)
              Yab(mu,i,nu,j)  = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
              PUT T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
#
           ENDDO j
           ENDDO i  
#
     ENDPARDO  mu, nu, lambda, sigma
     execute sip_barrier ca 
     DELETE TAO_aa 
     DELETE TAO_bb 
     DELETE TAO_ab 
#
#    Perform final transformation 
#    ---------------------------- 
#
     PARDO mu, nu, i, i1  
#
           GET T2AO_aa(mu,i,nu,i1)
           Txixi(mu,i,nu,i1) = T2AO_aa(mu,i,nu,i1) 
#
           DO a
#
              TXaiai(a,i,nu,i1) = Txixi(mu,i,nu,i1)*ca(mu,a)
#
              DO a1  
#
                 IF a < a1 
#
                    TYaiai(a,i,a1,i1)  = TXaiai(a,i,nu,i1)*ca(nu,a1)
                    TYaiai(a,i,a1,i1) *= 0.5  
                    TY1aiai(a1,i1,a,i) = TYaiai(a,i,a1,i1) 
                    PUT T2new_aa(a,i,a1,i1) += TYaiai(a,i,a1,i1)
                    PUT T2new_aa(a1,i1,a,i) += TY1aiai(a1,i1,a,i)
#
                 ENDIF # a < a1 
#
                 IF a == a1 
#
                    TYaiai(a,i,a1,i1)  = TXaiai(a,i,nu,i1)*ca(nu,a1)
                    TYaiai(a,i,a1,i1) *= 0.5  
                    PUT T2new_aa(a,i,a1,i1) += TYaiai(a,i,a1,i1)
#
                 ENDIF # a == a1 
#
              ENDDO a1  
#
           ENDDO a
#
     ENDPARDO mu, nu, i, i1  
#
     PARDO mu, nu, j, j1  
#
          GET T2AO_bb(mu,j,nu,j1)
          Txjxj(mu,j,nu,j1) = T2AO_bb(mu,j,nu,j1) 
#
           DO b
#
              TXbjbj(b,j,nu,j1) = Txjxj(mu,j,nu,j1)*cb(mu,b)
#
              DO b1  
#
                 IF b < b1 
#
                    TYbjbj(b,j,b1,j1)  = TXbjbj(b,j,nu,j1)*cb(nu,b1)
                    TYbjbj(b,j,b1,j1) *= 0.5  
                    TY1bjbj(b1,j1,b,j) = TYbjbj(b,j,b1,j1)                
                    PUT T2new_bb(b,j,b1,j1) += TYbjbj(b,j,b1,j1)
                    PUT T2new_bb(b1,j1,b,j) += TY1bjbj(b1,j1,b,j)
#
                 ENDIF # b < b1 
#
                 IF b == b1 
#
                    TYbjbj(b,j,b1,j1)  = TXbjbj(b,j,nu,j1)*cb(nu,b1)
                    TYbjbj(b,j,b1,j1) *= 0.5  
                    PUT T2new_bb(b,j,b1,j1) += TYbjbj(b,j,b1,j1)
#
                 ENDIF # b == b1 
#
              ENDDO b1  
#
           ENDDO b
#
     ENDPARDO mu, nu, j, j1  
#
     PARDO mu, nu, i, j  
#
           GET T2AO_ab(mu,i,nu,j)
#
           DO a
#
              TXaibj(a,i,nu,j) = T2AO_ab(mu,i,nu,j)*ca(mu,a)
#
              DO b  
#
                 TYaibj(a,i,b,j)  = TXaibj(a,i,nu,j)*cb(nu,b)
                 PUT T2new_ab(a,i,b,j) += TYaibj(a,i,b,j)
#
              ENDDO b  
#
           ENDDO a
#
     ENDPARDO mu, nu, i, j  
#
     execute sip_barrier Yab 
     DELETE T2AO_aa 
     DELETE T2AO_bb 
     DELETE T2AO_ab 
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO i1, a1, a, i 
#
            GET Viaai(i1,a1,a,i) 
            GET Vaaii(a,a1,i1,i) 
#
            Taiai(a1,i1,a,i)   = Vaaii(a,a1,i1,i) 
            TYaiai(a1,i1,a,i)  = Viaai(i1,a1,a,i) 
            TYaiai(a1,i1,a,i) -= Taiai(a1,i1,a,i)  
#
# Contributions to T2new_aa 
# ------------------------- 
#
            DO i2 
            DO a2 
#
               GET T2old_aa(a2,i2,a1,i1) 
#
               R1aiai(a2,i2,a,i) = T2old_aa(a2,i2,a1,i1)*TYaiai(a1,i1,a,i) 
#
               R2aiai(a2,i,a,i2) = R1aiai(a2,i2,a,i) 
               R2aiai(a2,i,a,i2)*= -1.0  
               R3aiai(a,i2,a2,i) = R2aiai(a2,i,a,i2)  
               R4aiai(a,i,a2,i2) = R1aiai(a2,i2,a,i) 
#
               PUT T2new_aa(a2,i2,a,i) += R1aiai(a2,i2,a,i) 
               PUT T2new_aa(a2,i,a,i2) += R2aiai(a2,i,a,i2) 
               PUT T2new_aa(a,i2,a2,i) += R3aiai(a,i2,a2,i) 
               PUT T2new_aa(a,i,a2,i2) += R4aiai(a,i,a2,i2) 
#
            ENDDO a2
            ENDDO i2 
#
# Contributions to T2new_ab 
# ------------------------- 
#
            Taiai(a,i,a1,i1) = TYaiai(a1,i1,a,i) 
            DO b 
            DO j 
#
               GET T2old_ab(a1,i1,b,j) 
               R1aibj(a,i,b,j) = Taiai(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
#
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO i1, a1, a, i 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBB 
#     ------------
#
      PARDO j1, b1, b, j 
#
            GET Vjbbj(j1,b1,b,j) 
            GET Vbbjj(b,b1,j1,j) 
#
            Tbjbj(b1,j1,b,j)   = Vbbjj(b,b1,j1,j) 
            TYbjbj(b1,j1,b,j)  = Vjbbj(j1,b1,b,j) 
            TYbjbj(b1,j1,b,j) -= Tbjbj(b1,j1,b,j)  

#
# Contributions to T2new_bb 
# ------------------------- 
#
            DO j2 
            DO b2 
#
               GET T2old_bb(b2,j2,b1,j1) 
#
               R1bjbj(b2,j2,b,j) = T2old_bb(b2,j2,b1,j1)*TYbjbj(b1,j1,b,j) 
#
               R2bjbj(b2,j,b,j2) = R1bjbj(b2,j2,b,j) 
               R2bjbj(b2,j,b,j2)*= -1.0  
               R3bjbj(b,j2,b2,j) = R1bjbj(b2,j2,b,j) 
               R3bjbj(b,j2,b2,j)*= -1.0  
               R4bjbj(b,j,b2,j2) = R1bjbj(b2,j2,b,j) 
#
               PUT T2new_bb(b2,j2,b,j) += R1bjbj(b2,j2,b,j) 
               PUT T2new_bb(b2,j,b,j2) += R2bjbj(b2,j,b,j2) 
               PUT T2new_bb(b,j2,b2,j) += R3bjbj(b,j2,b2,j) 
               PUT T2new_bb(b,j,b2,j2) += R4bjbj(b,j,b2,j2) 
#
            ENDDO b2
            ENDDO j2 
#
# Contributions to T2new_ab 
# ------------------------- 
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b1,j1) 
               R1aibj(a,i,b,j) = T2old_ab(a,i,b1,j1)*TYbjbj(b1,j1,b,j) 
#
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO j1, b1, b, j 
#
      ENDPROC WMEBJBB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
      PARDO i, a, b, j 
#
            GET Viabj(i,a,b,j) 
            Tiabj(i,a,b,j) = Viabj(i,a,b,j) 

#
# Contribution to T2new_bb 
# ------------------------ 
#
            DO b1 
            DO j1 
#
               GET T2old_ab(a,i,b1,j1) 
#
               R1bjbj(b1,j1,b,j) = T2old_ab(a,i,b1,j1)*Tiabj(i,a,b,j) 
#
               R2bjbj(b1,j,b,j1) = R1bjbj(b1,j1,b,j) 
               R2bjbj(b1,j,b,j1)*= -1.0  
               R3bjbj(b,j1,b1,j) = R1bjbj(b1,j1,b,j) 
               R3bjbj(b,j1,b1,j)*= -1.0  
               R4bjbj(b,j,b1,j1) = R1bjbj(b1,j1,b,j) 
#
               PUT T2new_bb(b1,j1,b,j) += R1bjbj(b1,j1,b,j) 
               PUT T2new_bb(b1,j,b,j1) += R2bjbj(b1,j,b,j1) 
               PUT T2new_bb(b,j1,b1,j) += R3bjbj(b,j1,b1,j) 
               PUT T2new_bb(b,j,b1,j1) += R4bjbj(b,j,b1,j1) 
#
            ENDDO j1 
            ENDDO b1 
#
# Contribution to T2new_ab 
# ------------------------ 
#
            DO i1 
            DO a1 
#
               GET T2old_aa(a1,i1,a,i)
#
               R1aibj(a1,i1,b,j) = T2old_aa(a1,i1,a,i)*Tiabj(i,a,b,j)  
#
               PUT T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO i, a, b, j 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBA  
#     ------------
#
      PARDO j, b, a, i  
# 
            GET Viabj(i,a,b,j) 
            Tjbai(j,b,a,i) = Viabj(i,a,b,j) 

#
# Contribution to T2new_aa 
# ------------------------ 
#
            DO a1 
            DO i1 
#
               GET T2old_ab(a1,i1,b,j) 
#
               R1aiai(a1,i1,a,i) =  T2old_ab(a1,i1,b,j)*Tjbai(j,b,a,i) 
# 
               R2aiai(a1,i,a,i1) =  R1aiai(a1,i1,a,i) 
               R2aiai(a1,i,a,i1)*= -1.0  
               R3aiai(a,i1,a1,i) =  R1aiai(a1,i1,a,i) 
               R3aiai(a,i1,a1,i)*= -1.0  
               R4aiai(a,i,a1,i1) =  R1aiai(a1,i1,a,i) 
#
               PUT T2new_aa(a1,i1,a,i) += R1aiai(a1,i1,a,i) 
               PUT T2new_aa(a1,i,a,i1) += R2aiai(a1,i,a,i1) 
               PUT T2new_aa(a,i1,a1,i) += R3aiai(a,i1,a1,i) 
               PUT T2new_aa(a,i,a1,i1) += R4aiai(a,i,a1,i1) 
#
            ENDDO i1 
            ENDDO a1 
#
# Contribution to T2new_ab 
# ------------------------ 
#
            DO j1 
            DO b1 
#
               GET T2old_bb(b1,j1,b,j)
#
               R1aibj(a,i,b1,j1) = T2old_bb(b1,j1,b,j)*Tjbai(j,b,a,i)  
#
               PUT T2new_ab(a,i,b1,j1) += R1aibj(a,i,b1,j1) 
#
            ENDDO b1 
            ENDDO j1 
#
      ENDPARDO j, b, a, i 
#
      ENDPROC WMEBJBA  
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC WMJBEab
#     -------------
#
      PARDO i1, b1, b, i 
#
            GET Vbbii(b,b1,i1,i) 
            Tiiqq(i1,i,b,b1) = Vbbii(b,b1,i1,i) 
#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
            DO a 
            DO j 
#
               GET T2old_ab(a,i1,b1,j) 
#
               Taibj(a,i,b,j)  = T2old_ab(a,i1,b1,j)*Tiiqq(i1,i,b,b1) 
               Taibj(a,i,b,j) *= -1.0  
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO j  
            ENDDO a  
#
      ENDPARDO i1, b1, b, i 
#
      ENDPROC WMJBEab
#     ---------------
#
      PROC WMJBEba
#     -------------
#
      PARDO j1, a1, a, j 
#
            GET Vaajj(a,a1,j1,j) 
            Tjjpp(j1,j,a,a1) = Vaajj(a,a1,j1,j) 

#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
            DO b 
            DO i 
#
               GET T2old_ab(a1,i,b,j1) 
#
               Taibj(a,i,b,j) = Tjjpp(j1,j,a,a1)*T2old_ab(a1,i,b,j1) 
               Taibj(a,i,b,j) *= -1.0  
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO i  
            ENDDO b  
#
      ENDPARDO j1, a1, a, j 
#
      ENDPROC WMJBEba
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJBB
           CALL WMEBJAB
           CALL WMEBJBA
           CALL WMJBEab
           CALL WMJBEba 
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     esum    = 0.0 
     ecorraa = 0.0 
     PARDO a, a1, i, i1 
#
           GET VSpipi(a,i,a1,i1) 
           GET T2safe_aa(a,i,a1,i1) 

           etemp = VSpipi(a,i,a1,i1)*T2safe_aa(a,i,a1,i1)            
           etemp = 0.25*etemp 
           esum += etemp 
#
     ENDPARDO a, a1, i, i1  
#
     execute sip_barrier Vblock 
     collective ecorraa += esum 
     execute sip_barrier Vblock 
     execute print_scalar ecorraa 
#
     ecorrbb = 0.0 
     esum    = 0.0 
     PARDO b, b1, j, j1 
#
           GET VSqjqj(b,j,b1,j1) 
           GET T2safe_bb(b,j,b1,j1) 
           etemp = VSqjqj(b,j,b1,j1)*T2safe_bb(b,j,b1,j1) 
           etemp = 0.25*etemp 
#          execute print_scalar etemp 
           esum += etemp 
#
     ENDPARDO b, b1, j, j1 
     execute sip_barrier Vblock 
     collective ecorrbb += esum 
     execute print_scalar ecorrbb 
#
     ecorrab = 0.0 
     esum    = 0.0 
     PARDO a, b, i, j 
#
           GET Vpiqj(a,i,b,j) 
           GET T2safe_ab(a,i,b,j) 
           etemp = T2safe_ab(a,i,b,j)*Vpiqj(a,i,b,j) 
           esum += etemp 
#
     ENDPARDO a, b, i, j 
     execute sip_barrier Vblock 
     collective ecorrab += esum 
     execute print_scalar ecorrab 
#
     ecorrT  = ecorraa 
     ecorrT += ecorrbb 
     ecorrT += ecorrab 
     execute print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
# ---------------------------------------------------------------------------------
#

#    ---------------
     PROC ADD_DIAGT1
     
     PARDO a, i
       GET t1a_old(a,i)
       t1ai(a,i) = t1a_old(a,i)
       t1ai(a,i) *= -1.0
       execute energy_reg_product t1ai
       PUT t1a_new(a,i) += t1ai(a,i)
     ENDPARDO a, i 
     
     PARDO b, j
     	GET t1b_old(b,j)
     	t1bj(b,j) = t1b_old(b,j)
     	t1bj(b,j) *= -1.0
     	execute energy_reg_product t1bj
     	PUT t1b_new(b,j) += t1bj(b,j)
     ENDPARDO b, j
     
     execute sip_barrier t1a_new
     
     ENDPROC ADD_DIAGT1
#    ------------------
#    ---------------
     PROC ADD_DIAGT2
     
     PARDO a, i, a1, i1
       GET T2old_aa(a,i,a1,i1)
       Taiai(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
       Taiai(a,i,a1,i1) *= -1.0
       execute energy_reg_product Taiai
       PUT T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2old_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) *= -1.0
     	execute energy_reg_product Tbjbj
     	PUT T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET T2old_ab(a,i,b,j)
     	Taibj(a,i,b,j) = T2old_ab(a,i,b,j)
     	Taibj(a,i,b,j) *= -1.0
     	execute energy_reg_product Taibj
     	PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
     
     execute sip_barrier T2new_aa
     
     ENDPROC ADD_DIAGT2
#    ------------------
#    ---------------
     PROC CG_INIT
     
     CREATE T2safe_aa
     CREATE T2safe_bb
     CREATE T2safe_ab
     execute sip_barrier
     
# Save T amplitudes in a safe place
     PARDO a, i, a1, i1
     	GET T2old_aa(a,i,a1,i1)
        PUT T2safe_aa(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2old_bb(b,j,b1,j1)
        PUT T2safe_bb(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET T2old_ab(a,i,b,j)
        PUT T2safe_ab(a,i,b,j) = T2old_ab(a,i,b,j)
     ENDPARDO a, i, b, j
     
     PARDO a, i     
     	GET t1a_old(a,i)
     	PUT t1a_safe(a,i) = t1a_old(a,i)
     ENDPARDO a, i
     
     PARDO b,j     
     	GET t1b_old(b,j)
     	PUT t1b_safe(b,j) = t1b_old(b,j)
     ENDPARDO b, j      
     
     execute sip_barrier         
     
# Move denominator free residual to new vector and denominator weight z residual

     CREATE R2_aa
     CREATE R2_bb
     CREATE R2_ab
     CREATE Z2_aa
     CREATE Z2_ab
     CREATE Z2_bb
     execute sip_barrier

     PARDO a, i, a1, i1
     	GET T2new_aa(a,i,a1,i1)
     	Taiai(a,i,a1,i1) = T2new_aa(a,i,a1,i1)
     	GET VSpipi(a,i,a1,i1)
     	Taiai(a,i,a1,i1) += VSpipi(a,i,a1,i1)
     	PUT R2_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)
     	execute energy_reg_denominator Taiai
        Taiai(a,i,a1,i1) *= -1.0
        PUT T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)
        PUT Z2_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2new_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) = T2new_bb(b,j,b1,j1)
     	GET VSqjqj(b,j,b1,j1) 
     	Tbjbj(b,j,b1,j1) += VSqjqj(b,j,b1,j1)
     	PUT R2_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
        execute energy_reg_denominator Tbjbj
        Tbjbj(b,j,b1,j1) *= -1.0
        PUT T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
        PUT Z2_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET T2new_ab(a,i,b,j)
     	Taibj(a,i,b,j) = T2new_ab(a,i,b,j)
     	GET Vpiqj(a,i,b,j)
     	Taibj(a,i,b,j) += Vpiqj(a,i,b,j)
     	PUT R2_ab(a,i,b,j) = Taibj(a,i,b,j)
        execute energy_reg_denominator Taibj
        Taibj(a,i,b,j) *= -1.0
        PUT T2old_ab(a,i,b,j) = Taibj(a,i,b,j)
        PUT Z2_ab(a,i,b,j) = Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
     
     PARDO a, i     
     	GET t1a_new(a,i)
     	t1ai(a,i) = t1a_new(a,i)
     	PUT r1a(a,i) = t1ai(a,i)
     	execute energy_reg_denominator t1ai
     	t1ai(a,i) *= -1.0
     	PUT t1a_old(a,i) = t1ai(a,i)
     	PUT z1a(a,i) = t1ai(a,i)
     ENDPARDO a, i
     
     PARDO b,j     
     	GET t1b_new(b,j)
     	t1bj(b,j) = t1b_new(b,j)
     	PUT r1b(b,j) = t1bj(b,j)
     	execute energy_reg_denominator t1bj
     	t1bj(b,j) *= -1.0
     	PUT t1b_old(b,j) = t1bj(b,j)
     	PUT z1b(b,j) = t1bj(b,j)
     ENDPARDO b, j
     
     execute sip_barrier    
     
# Calculate gamma

     gamma = 0.0
     gsum = 0.0
     execute sip_barrier
     PARDO a, i, a1, i1
     	GET R2_aa(a,i,a1,i1)
     	GET T2old_aa(a,i,a1,i1)
     	gtemp = R2_aa(a,i,a1,i1)*T2old_aa(a,i,a1,i1)
     	gtemp = 0.25*gtemp
     	gsum += gtemp
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET R2_bb(b,j,b1,j1)
     	GET T2old_bb(b,j,b1,j1)
     	gtemp = R2_bb(b,j,b1,j1)*T2old_bb(b,j,b1,j1)
     	gtemp = 0.25*gtemp
     	gsum += gtemp
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET R2_ab(a,i,b,j)
     	GET T2old_ab(a,i,b,j)
     	gtemp = R2_ab(a,i,b,j)*T2old_ab(a,i,b,j)
     	gsum += gtemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET r1a(a,i)
     	GET t1a_old(a,i)
     	gtemp = r1a(a,i)*t1a_old(a,i)
     	gsum += gtemp
     ENDPARDO a,i
     
     PARDO b, j
     	GET r1b(b,j)
     	GET t1b_old(b,j)
     	gtemp = r1b(b,j)*t1b_old(b,j)
     	gsum += gtemp
     ENDPARDO b, j
     
     execute sip_barrier
     collective gamma+=gsum
     
     ENDPROC CG_INIT
#    ------------------     
#    -------------
     PROC CONJ_GRAD
     
# Construct alpha
# alpha(n) = gamma(n)/d^T C
 
     aaccum = 0.0
     asum   = 0.0
     execute sip_barrier
     PARDO a, i, a1, i1
     	GET T2old_aa(a,i,a1,i1)
     	GET T2new_aa(a,i,a1,i1)
     	atemp = T2old_aa(a,i,a1,i1)*T2new_aa(a,i,a1,i1)
     	atemp = 0.25*atemp
     	asum += atemp
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2old_bb(b,j,b1,j1)
     	GET T2new_bb(b,j,b1,j1)
     	atemp = T2old_bb(b,j,b1,j1)*T2new_bb(b,j,b1,j1)
     	atemp = 0.25*atemp
     	asum += atemp
     ENDPARDO b, j, b1, j1     
      
     PARDO a, i, b, j
     	GET T2old_ab(a,i,b,j)
     	GET T2new_ab(a,i,b,j)
     	atemp = T2old_ab(a,i,b,j)*T2new_ab(a,i,b,j)
     	asum += atemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	GET t1a_new(a,i)
     	atemp = t1a_old(a,i)*t1a_new(a,i)
     	asum += atemp
     ENDPARDO a,i     
     
     PARDO b, j
     	GET t1b_old(b,j)
     	GET t1b_new(b,j)
     	atemp = t1b_old(b,j)*t1b_new(b,j)
     	asum += atemp
     ENDPARDO b, j
     
     execute sip_barrier
     collective aaccum+=asum
     
     alpha = gamma / aaccum
     alpha *= -1.0
     
# Calculate new T
     PARDO a, i, a1, i1
     	GET T2old_aa(a,i,a1,i1)
     	Taiai(a,i,a1,i1) = alpha*T2old_aa(a,i,a1,i1)
     	PUT T2safe_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)          
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2old_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) = alpha*T2old_bb(b,j,b1,j1)   
     	PUT T2safe_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET T2old_ab(a,i,b,j)
     	Taibj(a,i,b,j) = alpha*T2old_ab(a,i,b,j) 
     	PUT T2safe_ab(a,i,b,j) += Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	t1ai(a,i) = alpha*t1a_old(a,i) 
     	PUT t1a_safe(a,i) += t1ai(a,i)  
     ENDPARDO a, i
     
     PARDO b, j
     	GET t1b_old(b,j)
     	t1bj(b,j) = alpha*t1b_old(b,j)  
     	PUT t1b_safe(b,j) += t1bj(b,j)      
     ENDPARDO b, j
     
     execute sip_barrier

# Calculate new R

#     alpha *= -1.0
     PARDO a, i, a1, i1
     	GET T2new_aa(a,i,a1,i1)
     	Taiai(a,i,a1,i1) = alpha*T2new_aa(a,i,a1,i1)
     	PUT R2_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)        
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET T2new_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) = alpha*T2new_bb(b,j,b1,j1) 
     	PUT R2_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)          
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET T2new_ab(a,i,b,j)
     	Taibj(a,i,b,j) = alpha*T2new_ab(a,i,b,j) 
     	PUT R2_ab(a,i,b,j) += Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_new(a,i)
     	t1ai(a,i) = alpha*t1a_new(a,i) 
     	PUT r1a(a,i) += t1ai(a,i)          
     ENDPARDO a, i
     
     PARDO b, j
     	GET t1b_new(b,j)
     	t1bj(b,j) = alpha*t1b_new(b,j)  
     	PUT r1b(b,j) += t1bj(b,j)          
     ENDPARDO b, j
 
     execute sip_barrier

# Form new Z
# Denominator weighting

     PARDO a, i, a1, i1
     	GET R2_aa(a,i,a1,i1)
     	Taiai(a,i,a1,i1) = R2_aa(a,i,a1,i1)
     	Taiai(a,i,a1,i1) *= -1.0
     	execute energy_reg_denominator Taiai
     	PUT Z2_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)      
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET R2_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) = R2_bb(b,j,b1,j1)
     	Tbjbj(b,j,b1,j1) *= -1.0
     	execute energy_reg_denominator Tbjbj
     	PUT Z2_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)         
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET R2_ab(a,i,b,j)
     	Taibj(a,i,b,j) = R2_ab(a,i,b,j)
     	Taibj(a,i,b,j) *= -1.0
     	execute energy_reg_denominator Taibj
     	PUT Z2_ab(a,i,b,j) = Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET r1a(a,i)
     	t1ai(a,i) = r1a(a,i)
     	t1ai(a,i) *= -1.0
     	execute energy_reg_denominator t1ai
     	PUT z1a(a,i) = t1ai(a,i)          
     ENDPARDO a, i
     
     PARDO b, j
     	GET r1b(b,j)
     	t1bj(b,j) = r1b(b,j)
     	t1bj(b,j) *= -1.0
     	execute energy_reg_denominator t1bj
     	PUT z1b(b,j) = t1bj(b,j)        
     ENDPARDO b, j
     
     execute sip_barrier

# Form beta
     baccum=0.0
     bsum = 0.0
     execute sip_barrier
     PARDO a, i, a1, i1
     	GET R2_aa(a,i,a1,i1)
     	GET Z2_aa(a,i,a1,i1)
     	btemp = R2_aa(a,i,a1,i1)*Z2_aa(a,i,a1,i1)
     	btemp = 0.25*btemp
     	bsum += btemp
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET R2_bb(b,j,b1,j1)
     	GET Z2_bb(b,j,b1,j1)
     	btemp = R2_bb(b,j,b1,j1)*Z2_bb(b,j,b1,j1)
     	btemp = 0.25*btemp
     	bsum += btemp
     ENDPARDO b, j b1, j1
     
     PARDO a, i, b, j
     	GET R2_ab(a,i,b,j)
     	GET Z2_ab(a,i,b,j)
     	btemp = R2_ab(a,i,b,j)*Z2_ab(a,i,b,j)
     	bsum += btemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET r1a(a,i)
     	GET z1a(a,i)
     	btemp = r1a(a,i)*z1a(a,i)
     	bsum += btemp
     ENDPARDO a,i     
     
     PARDO b, j
     	GET r1b(b,j)
     	GET z1b(b,j)
     	btemp = r1b(b,j)*z1b(b,j)
     	bsum += btemp
     ENDPARDO b, j 
     
     execute sip_barrier
     collective baccum+=bsum
     
     beta = baccum / gamma       
# Form new gamma
     gamma *= beta
# Calculate new D     
     PARDO a, i, a1, i1
        GET T2old_aa(a,i,a1,i1)
        Taiai(a,i,a1,i1) = beta*T2old_aa(a,i,a1,i1)
        GET Z2_aa(a,i,a1,i1)
        Taiai(a,i,a1,i1) += Z2_aa(a,i,a1,i1)
        PUT T2old_aa(a,i,a1,i1)=Taiai(a,i,a1,i1)        
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
        GET T2old_bb(b,j,b1,j1)
        Tbjbj(b,j,b1,j1) = beta*T2old_bb(b,j,b1,j1)
        GET Z2_bb(b,j,b1,j1)
        Tbjbj(b,j,b1,j1) += Z2_bb(b,j,b1,j1)
        PUT T2old_bb(b,j,b1,j1)=Tbjbj(b,j,b1,j1)        
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
        GET T2old_ab(a,i,b,j)
        Taibj(a,i,b,j) = beta*T2old_ab(a,i,b,j)
        GET Z2_ab(a,i,b,j)
        Taibj(a,i,b,j) += Z2_ab(a,i,b,j)
        PUT T2old_ab(a,i,b,j) = Taibj(a,i,b,j)          
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET t1a_old(a,i)
     	t1ai(a,i) = beta*t1a_old(a,i)
     	GET z1a(a,i)
     	t1ai(a,i) += z1a(a,i)
     	PUT t1a_old(a,i)=t1ai(a,i)          
     ENDPARDO a, i
     
     PARDO b, j
     	GET t1b_old(b,j)
     	t1bj(b,j) = beta*t1b_old(b,j)
     	GET z1b(b,j)
     	t1bj(b,j) += z1b(b,j)
     	PUT t1b_old(b,j)=t1bj(b,j)       
     ENDPARDO b, j
     
     execute sip_barrier     
     
     ENDPROC CONJ_GRAD     
#    -----------------
#    ---------------
     PROC CHECK_CONV
     
     rnorm2 = 0.0
     rsum  = 0.0     
     execute sip_barrier
     PARDO a, i, a1, i1
     	GET Z2_aa(a,i,a1,i1)
     	rtemp = Z2_aa(a,i,a1,i1)*Z2_aa(a,i,a1,i1)
     	rtemp = 0.25*rtemp
     	rsum += rtemp
     ENDPARDO a, i, a1, i1
     
     PARDO b, j, b1, j1
     	GET Z2_bb(b,j,b1,j1)
     	rtemp = Z2_bb(b,j,b1,j1)*Z2_bb(b,j,b1,j1)
     	rtemp = 0.25*rtemp
     	rsum += rtemp
     ENDPARDO b, j, b1, j1
     
     PARDO a, i, b, j
     	GET Z2_ab(a,i,b,j)
     	rtemp = Z2_ab(a,i,b,j)*Z2_ab(a,i,b,j)
     	rsum += rtemp
     ENDPARDO a, i, b, j
     
     PARDO a, i
     	GET z1a(a,i)
     	rtemp = z1a(a,i)*z1a(a,i)
     	rsum += rtemp
     ENDPARDO a,i    
     
     PARDO b, j
     	GET z1b(b,j)
     	rtemp = z1b(b,j)*z1b(b,j)
     	rsum += rtemp
     ENDPARDO b, j
     
     execute sip_barrier
     collective rnorm2+=rsum 
     
     half=0.5
     execute square_root rnorm2 half
     execute print_scalar rnorm2
     
     
     ENDPROC CHECK_CONV
#    ------------------         
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
#     MAIN PROGRAM 
#     ------------ 
#
      ecrit = cc_conv  
#     CALL TRAN_UHF_P1 # perform partial transformation  

# Read transformed integrals from lists
# -------------------------------------
#
      CALL READ_2EL 
#
      CREATE T2old_aa 
      CREATE T2old_ab 
      CREATE T2old_bb 
#
      CREATE t1a_old 
      CREATE t1a_new 
      CREATE t1b_old 
      CREATE t1b_new 
      CREATE t1a_safe
      CREATE t1b_safe
      CREATE r1a
      CREATE r1b
      CREATE z1a
      CREATE z1b
#
      EXECUTE SIP_BARRIER T2old_aa 
#
      CALL IGUESS_UHF  # get initial second-order guess 
      EXECUTE SIP_BARRIER T2old_aa 
#
      DO kiter

         EXECUTE SIP_BARRIER T2old_aa 
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CALL T1ANEW 
         CALL T1BNEW 
#
         CALL T2NEWAA  
         CALL T2NEWBB  
         CALL T2NEWAB  
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL WMINJ # Small distributed two-particle array  
         CALL AOLADDER 
         CALL WMEBJ 
         EXECUTE SIP_BARRIER ca  
         
# Add in eps(ijab)*t(ijab) or eps(ijab)*r(ijab) term
         CALL ADD_DIAGT1
         CALL ADD_DIAGT2
         
         if kiter == 1         
         	CALL CG_INIT                  	
         else
	     	CALL CONJ_GRAD
	     endif
	     	     
         CALL CHECK_CONV         	
         
#
#        Reset eold --> enew 
#        ------------------- 
#
         EXECUTE SIP_BARRIER ca  
         CALL ENERGY_NEW 
         EXECUTE SIP_BARRIER ca 
         
#
         DELETE T2new_aa 
         DELETE T2new_bb 
         DELETE T2new_ab 
#
#         CALL MOVET1 
#         CALL MOVET2 
#
#        Check on convergence 
#        -------------------- 
#
#         IF ecorrT < eold 
#            ediff = eold - ecorrT 
#            IF ediff < ecrit 
#               exit # kiter 
#            ENDIF
#         ENDIF   
#
#         IF ecorrT > eold 
#            ediff = ecorrT - eold  
#            IF ediff < ecrit 
#               exit # kiter 
#            ENDIF
#         ENDIF   
#
         eold = ecorrT
         
         if rnorm2 < ecrit
         	exit
         endif 
#
      ENDDO KITER 
#

#      CALL RESET_T1
#      CALL RESET_T2

      totenerg  = ecorrT  
      totenerg += scfeneg  
      execute print_scalar totenerg
#
# Write amplitudes to file
# ------------------------
#
      CALL WRITE_2EL
#
      execute sip_barrier
      execute blocks_to_list t1a_safe
      execute blocks_to_list t1b_safe
      execute blocks_to_list T2safe_aa
      execute blocks_to_list T2safe_ab
      execute blocks_to_list T2safe_bb
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL LINCCSD_UHF_AO1_MOSYMM1_CG
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
