#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
                       SIAL CCSD_resp_sym_RHF_1D

      index   xyz    = 1,3
      index   xyz1   = 1,3
      Index NPERT    = 1, 3 
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb

      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc

      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc

      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt

      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt

      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt

      INDEX  jatom    = 1, natoms

      distributed DHF_aa(mu,nu)
      distributed DHF_bb(mu,nu)
      distributed DpqA(mu,nu)
      distributed DpqB(mu,nu)
      
      distributed DpqA_x(mu,nu)
      distributed DpqB_x(mu,nu)
      distributed Dccsd(mu,nu)
      distributed Dccsd_x(mu,nu)
      distributed Dscf(mu,nu)
      distributed DpqA_1(mu,nu)
      distributed DpqB_1(mu,nu)
      distributed DpqA_2(mu,nu)
      distributed DpqB_2(mu,nu)
      distributed DpqA_3(mu,nu)
      distributed DpqB_3(mu,nu)
      
      temp  Tiaia(i,a,i1,a1) 
      temp  Tjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp tbjbj(b1,j,b2,j1)
      temp taiai(a,i,a2,i2)

      temp Txi (nu,i)
      temp Txj (nu,j)
      temp Jxi (mu,i)
      temp Ixx (mu,nu)
      temp I1xx(mu,nu)
      temp Jxj (mu,j)
      temp Ixa (mu,a)
      temp Ixb (mu,b)
      temp Txx (mu,nu)
      temp Tpq (mu,nu)
      temp TKin (mu,nu)
      temp Tdshld (mu,nu)

      temp Tpq_x(mu,nu)

      temp Taa (a,a1)
      temp TaaT (a,a1)
      temp T1aa(a,a1)
      temp T1aaT(a,a1)
      temp TaaT1(a,a1)
      temp Tbb (b,b1)
      temp TbbT (b,b1)
      temp T1bb(b,b1)
      temp T1bbT(b,b1)
      temp TbbT1(b,b1)
      temp Tii (i,i1)
      temp TiiT(i,i1)
      temp TiiT1(i,i1)

      temp T1ii(i,i1)
      temp T1iiT(i,i1)
      temp Tjj (j,j1)
      temp TjjT (j,j1)
      temp T1jjT (j,j1)
      temp TjjT1 (j,j1)
      temp T1jj(j,j1)
      temp Tai(a,i)

      temp TaiT(a,i)

      temp Tai1(a,i)
      temp Tbj(b,j)
      temp Tbj1(b,j)
      temp TbjT(b,j)

      temp Tia(i,a) 
      temp Tjb(j,b) 

      distributed Dij_a(i,i1)
      distributed Dij_b(j,j1)
      distributed Dab_a(a,a1)
      distributed Dab_b(b,b1)
      distributed Doldai_a(a,i)
      distributed Doldai_b(b,j)

      distributed T2L2_VV_A (a,a1)
      distributed T2L2_VV_B (b,b1)
      distributed T2L2_OO_A (i,i1)
      distributed T2L2_OO_B (j,j1)
      distributed T1L1_OO_A (i,i1)      
      distributed T1L1_OO_B (j,j1)     


      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed l1a_old(i,a)
      distributed l1b_old(j,b)

      temp tpol(xyz,xyz1)
      static dmom(xyz)
      static pol(xyz,xyz1)
      scalar ipol

      distributed T2L2_VV_A_x(a,a1)
      distributed T2L2_VV_B_x(b,b1)
      distributed T1L1_VV_A_x(a,a1)
      distributed T1L1_VV_B_x(b,b1)

      distributed T2L2_OO_A_x(i,i1)
      distributed T2L2_OO_B_x(j,j1)
      distributed T1L1_OO_A_x(i,i1)
      distributed T1L1_OO_B_x(j,j1)

      distributed T2L2_VV_A_y(a,a1)
      distributed T2L2_VV_B_y(b,b1)
      distributed T2L2_OO_A_y(i,i1)
      distributed T2L2_OO_B_y(j,j1)
      distributed T1L1_OO_A_y(i,i1)
      distributed T1L1_OO_B_y(j,j1)

      distributed T2L2_VV_A_z(a,a1)
      distributed T2L2_VV_B_z(b,b1)
      distributed T2L2_OO_A_z(i,i1)
      distributed T2L2_OO_B_z(j,j1)
      distributed T1L1_OO_A_z(i,i1)
      distributed T1L1_OO_B_z(j,j1)

      distributed t1a_old_x(a,i)
      distributed t1b_old_x(b,j)
      distributed l1a_old_x(i,a)
      distributed l1b_old_x(j,b)

      distributed t1a_x(a,i)
      distributed t1b_x(b,j)
      distributed l1a_x(i,a)
      distributed l1b_x(j,b)

      distributed t1a_y(a,i)
      distributed t1b_y(b,j)
      distributed l1a_y(i,a)
      distributed l1b_y(j,b)

      distributed t1a_z(a,i)
      distributed t1b_z(b,j)
      distributed l1a_z(i,a)
      distributed l1b_z(j,b)

      served T2old_aa_x(a,i,a1,i1)
      served T2old_bb_x(b,j,b1,j1)
      served T2old_ab_x(a,i,b,j)
      served L2old_aa_x(i,a,i1,a1)
      served L2old_bb_x(j,b,j1,b1)
      served L2old_ab_x(i,a,j,b)

      served T2aa_x(a,i,a1,i1)
      served T2bb_x(b,j,b1,j1)
      served T2ab_x(a,i,b,j)
      served L2aa_x(i,a,i1,a1)
      served L2bb_x(j,b,j1,b1)
      served L2ab_x(i,a,j,b)

      served T2aa_y(a,i,a1,i1)
      served T2bb_y(b,j,b1,j1)
      served T2ab_y(a,i,b,j)
      served L2aa_y(i,a,i1,a1)
      served L2bb_y(j,b,j1,b1)
      served L2ab_y(i,a,j,b)

      served T2aa_z(a,i,a1,i1)
      served T2bb_z(b,j,b1,j1)
      served T2ab_z(a,i,b,j)
      served L2aa_z(i,a,i1,a1)
      served L2bb_z(j,b,j1,b1)
      served L2ab_z(i,a,j,b)

      Distributed  LT1A_x (a,i)
      Distributed  LT1B_x (b,j)

      distributed Dij_a_x(i,i1)
      distributed Dij_b_x(j,j1)

      distributed Dab_a_x(a,a1)
      distributed Dab_b_x(b,b1)

      distributed Dij_a_x_U(i,i1)
      distributed Dij_b_x_U(j,j1)

      distributed Dij_a_x_L(i,i1)
      distributed Dij_b_x_L(j,j1)

      distributed Dab_a_x_U(a,a1)
      distributed Dab_b_x_U(b,b1)
      distributed Dab_a_x_L(a,a1)
      distributed Dab_b_x_L(b,b1)

      distributed Doldai_a_x(a,i)
      distributed Doldai_b_x(b,j)

      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
      served L2old_aa(i,a,i1,a1)
      served L2old_bb(j,b,j1,b1)
      served L2old_ab(i,a,j,b)

      Distributed  LA1A (i,a)
      Distributed  LA1B (j,b)
      Distributed  LT1A (a,i)
      Distributed  LT1B (b,j)

      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
      served Vjbii(j,b,i,i1)
      served Vbbai(b,b1,a,i)
      served Vbbii(b,b1,i,i1)
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)

      TEMP tpppp(p,p1,p2,p3)
      TEMP tpqqp(p,q,q1,p1)
      TEMP tqqqq(q,q1,q2,q3)
      TEMP Taibj(a1,i,b,j1)
      TEMP tqppq(q,p,p1,q1)

      distributed HBx(mu,nu)
      distributed HBy(mu,nu)
      distributed HBz(mu,nu)

      scalar XX
      scalar XY
      scalar YX
      scalar XZ
      scalar ZX
      scalar YY
      scalar YZ
      scalar ZY
      scalar ZZ

      scalar Axx
      scalar Axy
      scalar Ayx
      scalar Axz
      scalar Azx
      scalar Ayy
      scalar Ayz
      scalar Azy
      scalar Azz

      scalar Px
      scalar Py
      scalar Pz

      scalar MCx
      scalar MCy
      scalar MCz

      scalar GC1xx_tmp
      scalar GC1xy_tmp
      scalar GC1yx_tmp
      scalar GC1xz_tmp
      scalar GC1zx_tmp
      scalar GC1yy_tmp
      scalar GC1yz_tmp
      scalar GC1zy_tmp
      scalar GC1zz_tmp

      scalar GC1xx
      scalar GC1xy
      scalar GC1yx
      scalar GC1xz
      scalar GC1zx
      scalar GC1yy
      scalar GC1yz
      scalar GC1zy
      scalar GC1zz

      scalar Pxx
      scalar Pxy
      scalar Pxz
      scalar Pyx 
      scalar Pyy
      scalar Pyz 
      scalar Pzx
      scalar Pzy
      scalar Pzz       

      SCALAR  tmpnuc
      SCALAR  dipnucx
      SCALAR  dipnucy
      SCALAR  dipnucz

      SCALAR  ONE
      SCALAR  TWO
      SCALAR  THREE
      SCALAR  PROPERTY
      SCALAR  ASYM
      SCALAR  SPIN_DEN
      scalar do_pols
      scalar do_aten
      scalar do_gten
      scalar do_dten
#
      scalar tmp
      Scalar suma
      Scalar sumb
      Scalar sumaa
      Scalar sumbb
      Scalar Diff
      Scalar sum
      Scalar rank
      Scalar Ncount
      Scalar Dipole 
 
#PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
        PROC READ_2EL
      
      execute server_barrier

      execute list_to_blocks                VSpipi 
      execute list_to_blocks                Vaaii 
      execute list_to_blocks                Viaai 
      execute list_to_blocks                VSaaai 
      execute list_to_blocks                VSqjqj 
      execute list_to_blocks                Vbbjj 
      execute list_to_blocks                Vjbbj 
      execute list_to_blocks                VSbbbj 
      execute list_to_blocks                Vbbii  
      execute list_to_blocks                Vjbii  
      execute list_to_blocks                Vbbai 
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj

      execute server_barrier

     ENDPROC READ_2EL


#PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
      PROC HFDENS
#-------------------------------------------------------------------
      PARDO mu, nu, i
            Txi(nu,i)       = ca(nu,i)
            Tpq(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT DHF_aa(mu,nu) +=Tpq(mu,nu)
      ENDPARDO mu, nu, i
      EXECUTE  SIP_BARRIER
      ENDPROC HFDENS

     PROC CREATE_FIXED
#    -------------------
      CREATE LT1A(a,i)
      CREATE LA1A(i,a)

      CREATE  Dij_a(i,i1)
      CREATE  Dab_a(a,a1)
      CREATE  Doldai_a(a,i)

      CREATE DpqA
      CREATE Dccsd
      CREATE Dscf
      CREATE DpqA_1
      CREATE DpqA_2
      CREATE DpqA_3

      CREATE T2L2_VV_A
      CREATE T1L1_OO_A
      CREATE T2L2_OO_A

      EXECUTE SERVER_BARRIER

      DO a
      DO i
         GET         t1a_old(a,i)
         PUT LT1A(a,i) = t1a_old(a,i)
      ENDDO i
      ENDDO a
      DO a
      DO i
         GET         l1a_old(i,a)
         PUT LA1A(i,a) = l1a_old(i,a)
      ENDDO i
      ENDDO a
      EXECUTE  SERVER_BARRIER

      ENDPROC CREATE_FIXED
#     ---------------------

      PROC CREATE_XARRAYS
#     -------------------
      CREATE  T1A_OLD_X(a,i)

      CREATE  L1A_OLD_X(i,a)
       
      CREATE  DPQA_X(mu,nu)

      CREATE  DCCSD_x(mu,nu)

      CREATE  Dij_a_x(i,i1)

      CREATE  Dij_a_x_U(i,i1)
      CREATE  Dij_a_x_L(i,i1)

      CREATE  Dab_a_x(a,a1)

      CREATE  Dab_a_x_U(a,a1)
      CREATE  Dab_a_x_L(a,a1)

      CREATE  Doldai_a_x(a,i)

      CREATE LT1A_x(a,i)

      CREATE T2L2_VV_A_x
      CREATE T1L1_VV_A_x

      CREATE T1L1_OO_A_x
      CREATE T2L2_OO_A_x

      EXECUTE  SERVER_BARRIER

      ENDPROC CREATE_XARRAYS
#     ----------------------

      PROC FILL_LT1_ARRAYS
#     --------------------

      DO a
      DO i
         GET           t1a_old_x(a,i)
         PUT LT1A_x(a,i) = t1a_old_x(a,i)
      ENDDO i
      ENDDO a

      EXECUTE  SIP_BARRIER

      ENDPROC FILL_LT1_ARRAYS
#     -----------------------

      PROC DELETE_XARRAYS
#     -------------------

      DELETE  T1A_OLD_X(a,i)

      DELETE  L1A_OLD_X(i,a)

      DELETE LT1A_x(a,i)

      DELETE  Dij_a_x(i,i1)

      DELETE  DPQA_X(mu,nu)
      DELETE  DCCSD_X(mu,nu)

      DELETE  Dij_a_x_U(i,i1)
      DELETE  Dij_a_x_L(i,i1)

      DELETE  Dab_a_x(a,a1)

      DELETE  Dab_a_x_U(a,a1)
      DELETE  Dab_a_x_L(a,a1)

      DELETE  Doldai_a_x(a,i)

      DELETE T2L2_VV_A_x
      DELETE T1L1_VV_A_x

      DELETE T1L1_OO_A_x
      DELETE T2L2_OO_A_x

      EXECUTE SERVER_BARRIER

      ENDPROC DELETE_XARRAYS
#     ----------------------
#PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA
      PARDO a, a1, i
            GET t1a_old(a,i)    # read from list
            GET l1a_old(i,a1)   # read from list
            Taa(a,a1)        = t1a_old(a,i)*l1a_old(i,a1)
            Taa(a,a1)       *= 0.5
            T1aa(a1,a)       = Taa(a,a1)
            PUT Dab_a(a,a1) += Taa(a,a1)
            PUT Dab_a(a1,a) += T1aa(a1,a)
            DO a2
            DO i1
               REQUEST T2old_aa(a,i,a2,i1) i1  # read from list
               REQUEST L2old_aa(i,a1,i1,a2) a2 # read from list
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               Taa(a,a1)       *= 0.25
               T1aa(a1,a)       = Taa(a,a1)
               PUT Dab_a(a,a1) += Taa(a,a1)
               PUT Dab_a(a1,a) += T1aa(a1,a)

#               PUT T2L2_VV_A (a,a1) += Taa (a,a1)
            ENDDO i1
            ENDDO a2
            DO b
            DO j
               REQUEST T2old_ab(a,i,b,j) j    # read from the list
               REQUEST L2old_ab(i,a1,j,b) j   # read from the list
               Taa(a,a1)        = T2old_ab(a,i,b,j)*L2old_ab(i,a1,j,b)
               Taa(a,a1)       *= 0.5
               T1aa(a1,a)       = Taa(a,a1)
               PUT Dab_a(a,a1) += Taa(a,a1)
               PUT Dab_a(a1,a) += T1aa(a1,a)
#               PUT  T2L2_VV_A (a,a1) += Taa (a,a1)
            ENDDO j
            ENDDO b
      ENDPARDO a, a1, i
      ENDPROC DABA
#     -----------
      PROC DAB
           CALL DABA
      ENDPROC DAB

     PROC GMIA
#    -----------
# Alpha
     PARDO a, a1, i2
            DO i
               REQUEST T2old_aa(a,i,a1,i2) i2
               DO i1

                  REQUEST L2old_aa(i1,a,i2,a1) a1
                  Tii(i,i1)        = T2old_aa(a,i,a1,i2)*L2old_aa(i1,a,i2,a1)
                  Tii(i,i1)       *= -0.25
                  PUT  T2L2_OO_A (i,i1) += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, a1, i2

      PARDO a, b, j
            DO i
               REQUEST T2old_ab(a,i,b,j) j
               DO i1

                  REQUEST L2old_ab(i1,a,j,b) b
                  Tii(i,i1)        = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b)
                  Tii(i,i1)       *= -0.5
                  PUT  T2L2_OO_A (i,i1) += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, b, j

      PARDO a, i, i1

            GET t1a_old(a,i)
            GET l1a_old(i1,a)
            Tii(i,i1)        = l1a_old(i1,a)*t1a_old(a,i)
            Tii(i,i1)       *= -0.5
            PUT T1L1_OO_A(i,i1) += Tii(i,i1)

      ENDPARDO a, i, i1

     ENDPROC GMIA
#    -------------

      PROC GAEA
#     ----------
# Alpha
      PARDO a, a1, i
            DO a2
            DO i1
               REQUEST T2old_aa(a,i,a2,i1) i1
               REQUEST L2old_aa(i,a1,i1,a2) a2
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               Taa(a,a1)       *= 0.25
               PUT T2L2_VV_A (a,a1) += Taa (a,a1)
            ENDDO i1
            ENDDO a2

            DO b
            DO j
               REQUEST T2old_ab(a,i,b,j) j
               REQUEST L2old_ab(i,a1,j,b) j
               Taa(a,a1)        = T2old_ab(a,i,b,j)*L2old_ab(i,a1,j,b)
               Taa(a,a1)       *= 0.5
               PUT  T2L2_VV_A (a,a1) += Taa (a,a1)
            ENDDO j
            ENDDO b
      ENDPARDO a, a1, i

      ENDPROC GAEA
#     -------------

      PROC GMIA_X
#     ------------
# Alpha
     PARDO a, a1, i2
            DO i
               REQUEST T2old_aa(a,i,a1,i2) i2
               REQUEST T2old_aa_x(a,i,a1,i2) i2
               DO i1
                  REQUEST L2old_aa(i1,a,i2,a1) a1
                  REQUEST L2old_aa_x(i1,a,i2,a1) a1
                  Tii(i,i1)   = T2old_aa_x(a,i,a1,i2)*L2old_aa(i1,a,i2,a1)
                  TiiT(i,i1)  = T2old_aa(a,i,a1,i2)*L2old_aa_x(i1,a,i2,a1)
                  Tii(i,i1)  += TiiT(i,i1)
                  Tii(i,i1)  *= -0.25
                  PUT T2L2_OO_A_x(i,i1) += Tii(i,i1)
               ENDDO i1
            ENDDO i
      ENDPARDO a, a1, i2

      PARDO a, b, j
            DO i
               REQUEST T2old_ab(a,i,b,j) j
               REQUEST T2old_ab_x(a,i,b,j) j
               DO i1
                  REQUEST L2old_ab(i1,a,j,b) b
                  REQUEST L2old_ab_x(i1,a,j,b) b
                  Tii(i,i1)        = T2old_ab_x(a,i,b,j)*L2old_ab(i1,a,j,b)
                  TiiT(i,i1)       = T2old_ab(a,i,b,j)*L2old_ab_x(i1,a,j,b)
                  Tii(i,i1)       +=  TiiT(i,i1)
                  Tii(i,i1)       *= -0.5
                 PUT  T2L2_OO_A_x(i,i1) += Tii(i,i1)
               ENDDO i1
            ENDDO i
      ENDPARDO a, b, j

      PARDO a, i, i1
            GET t1a_old(a,i)
            GET l1a_old(i1,a)
            GET t1a_old_x(a,i)
            GET l1a_old_x(i1,a)
            Tii(i,i1)        = l1a_old_x(i1,a)*t1a_old(a,i)
            TiiT(i,i1)       = l1a_old(i1,a)*t1a_old_x(a,i)
            Tii(i,i1)       +=  TiiT(i,i1)
            Tii(i,i1)       *= -0.5
            PUT T1L1_OO_A_x(i,i1) += Tii(i,i1)
      ENDPARDO a, i, i1

     ENDPROC GMIA_X
#    ---------------
#
      PROC GAEA_X
#     -------------
# Alpha
      PARDO a, a1, i
            DO a2
            DO i1
               REQUEST T2old_aa(a,i,a2,i1) i1
               REQUEST L2old_aa(i,a1,i1,a2) a2
               REQUEST T2old_aa_x(a,i,a2,i1) i1
               REQUEST L2old_aa_x(i,a1,i1,a2) a2
               Taa(a,a1)        = T2old_aa_x(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               TaaT(a,a1)       = T2old_aa(a,i,a2,i1)*L2old_aa_x(i,a1,i1,a2)
               Taa(a,a1)       += TaaT(a,a1)
               Taa(a,a1)       *= 0.25
               PUT T2L2_VV_A_x(a,a1) += Taa(a,a1)
            ENDDO i1
            ENDDO a2
            DO b
            DO j
               REQUEST T2old_ab(a,i,b,j) j
               REQUEST L2old_ab(i,a1,j,b) j
               REQUEST T2old_ab_x(a,i,b,j) j
               REQUEST L2old_ab_x(i,a1,j,b) j
               Taa(a,a1)        = T2old_ab_x(a,i,b,j)*L2old_ab(i,a1,j,b)
               TaaT(a,a1)       = T2old_ab(a,i,b,j)*L2old_ab_x(i,a1,j,b)
               Taa(a,a1)       += TaaT(a,a1)
               Taa(a,a1)       *= 0.5
               PUT  T2L2_VV_A_x(a,a1) += Taa (a,a1)
            ENDDO j
            ENDDO b
      ENDPARDO a, a1, i

      ENDPROC GAEA_X
#     -------------

      PROC NEWDAB_x
#     -------------

      PARDO a, a1, i
            GET t1a_old(a,i)
            GET l1a_old(i,a1)

            GET t1a_old_x(a,i)
            GET l1a_old_x(i,a1)

            Taa(a,a1)  = t1a_old_x(a,i) * l1a_old(i,a1)
            PUT Dab_a_x_U(a,a1) += Taa(a,a1)

            Taa(a,a1)  = t1a_old(a,i) * l1a_old_x(i,a1)
            PUT Dab_a_x_L(a,a1) += Taa(a,a1)
#bgn_debug
#      ENDPARDO a, a1, i
#      execute sip_barrier
#      execute get_my_rank rank
#      suma = 0.0
#      sumb = 0.0
#      do a
#      do a1
#         get Dab_a_x_U(a,a1)
#         get Dab_a_x_L(a,a1)
#         if rank == 0.0
#         execute dump_amp  Dab_a_x_U(a,a1)
#         execute dump_amp  Dab_a_x_L(a,a1)
#         endif
#         tmp = Dab_a_x_U(a,a1) * Dab_a_x_U(a,a1)
#         suma += tmp
#         tmp = Dab_a_x_L(a,a1) * Dab_a_x_L(a,a1)
#         sumb += tmp
#      enddo a1
#      enddo a
#     execute print_scalar suma
#     execute print_scalar sumb
#
#     PARDO a, a1, i
#end_debug
            DO a2
            DO i1
               REQUEST T2old_aa(a,i,a2,i1) i1
               REQUEST L2old_aa(i,a1,i1,a2) a2

               REQUEST T2old_aa_x(a,i,a2,i1) i1
               REQUEST L2old_aa_x(i,a1,i1,a2) a2

               Taa(a,a1)  = T2old_aa_x(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               Taa(a,a1) *= 0.5
#bgn_debug
#               Taa(a,a1) *= 1.0
#end_debug
               PUT Dab_a_x_U(a,a1) += Taa(a,a1)

               Taa(a,a1)   = T2old_aa(a,i,a2,i1)*L2old_aa_x(i,a1,i1,a2)
               Taa(a,a1)  *= 0.5
#bgn_debug
#               Taa(a,a1) *= 1.0
#end_debug
               PUT Dab_a_x_L(a,a1) += Taa(a,a1)

            ENDDO i1
            ENDDO a2
#bgn_debug
#      ENDPARDO a, a1, i
#      execute sip_barrier
#      suma = 0.0
#      sumb = 0.0
#      do a
#      do a1
#        get Dab_a_x_U(a,a1)
#        get Dab_a_x_L(a1,a)
#         if rank == 0.0
#         execute dump_amp  Dab_a_x_U(a,a1)
#         execute dump_amp  Dab_a_x_L(a1,a)
#         endif
#         tmp = Dab_a_x_U(a,a1) * Dab_a_x_U(a,a1)
#         suma += tmp
#         tmp = Dab_a_x_L(a1,a) * Dab_a_x_L(a1,a)
#         sumb += tmp
#      enddo a1
#      enddo a
#     execute print_scalar suma
#     execute print_scalar sumb
#     PARDO a, a1, i
#end_debug

            DO b
            DO j
               REQUEST T2old_ab(a,i,b,j) j
               REQUEST L2old_ab(i,a1,j,b) j

               REQUEST T2old_ab_x(a,i,b,j) j
               REQUEST L2old_ab_x(i,a1,j,b) j

               Taa(a,a1)   = T2old_ab_x(a,i,b,j)*L2old_ab(i,a1,j,b)
               PUT Dab_a_x_U(a,a1) += Taa(a,a1)

               Taa(a,a1)   = T2old_ab(a,i,b,j)*L2old_ab_x(i,a1,j,b)
               PUT Dab_a_x_L(a,a1) += Taa(a,a1)

            ENDDO j
            ENDDO b
      ENDPARDO a, a1, i

#bgn_debug
#      execute sip_barrier
#      suma = 0.0
#      sumb = 0.0
#      do a
#      do a1
#         get Dab_a_x_U(a,a1)
#         get Dab_a_x_L(a,a1)
#         if rank == 0.0
#         execute dump_amp  Dab_a_x_U(a,a1)
#         execute dump_amp  Dab_a_x_L(a,a1)
#         endif
#         tmp = Dab_a_x_U(a,a1) * Dab_a_x_U(a,a1)
#         suma += tmp
#         tmp = Dab_a_x_L(a,a1) * Dab_a_x_L(a,a1)
#         sumb += tmp
#     enddo a1
#     enddo a
#     execute print_scalar suma
#     execute print_scalar sumb
#end_debug

# Make symmetric or anti-symmetric combinations

      execute sip_barrier 
      PARDO a, a1
            get Dab_a_x_U(a,a1)
            get Dab_a_x_L(a,a1)

            get Dab_a_x_U(a1,a)
            get Dab_a_x_L(a1,a)

            taa(a,a1)  =  Dab_a_x_U(a,a1)
            t1aa(a,a1) =  Dab_a_x_L(a,a1)

            TaaT(a1,a)  = Dab_a_x_U(a1,a)
            T1aaT(a1,a) = Dab_a_x_L(a1,a)

            taa(a,a1)  += t1aa(a,a1)
            TaaT(a1,a) += T1aaT(a1,a)
            TaaT1(a,a1) = TaaT(a1,a) 
            
            taa(a,a1) += TaaT1(a,a1)
            taa(a,a1) *= 0.5
            
            PUT Dab_a_x(a,a1) = taa(a,a1)

      ENDPARDO a, a1

#bgn_debug
     execute sip_barrier
     suma = 0.0
     DO a
     DO a1
        GET Dab_a_x(a,a1)
#        if rank == 0.0
#          execute dump_amp Dab_a_x(a,a1)
#        endif
         tmp = Dab_a_x(a,a1) * Dab_a_x(a,a1)
         suma += tmp
      ENDDO a1
      ENDDO a
      execute print_scalar suma
#end_debug

      ENDPROC NEWDAB_x
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
      PROC DIJA
#     --------- 
      PARDO a, a1, i2
            DO i
               REQUEST T2old_aa(a,i,a1,i2) i2
               DO i1
                  REQUEST L2old_aa(i1,a,i2,a1) a1
                  Tii(i,i1)        = T2old_aa(a,i,a1,i2)*L2old_aa(i1,a,i2,a1)
                  Tii(i,i1)       *= -0.25
                  T1ii(i1,i)       = Tii(i,i1)
                  PUT Dij_a(i,i1) += Tii(i,i1)
                  PUT Dij_a(i1,i) += T1ii(i1,i)

#                  PUT  T2L2_OO_A (i,i1) += Tii(i,i1) #last term of Eq. 9 alpha-alpha

               ENDDO i1
            ENDDO i
      ENDPARDO a, a1, i2
      PARDO a, b, j
            DO i
               REQUEST T2old_ab(a,i,b,j) j
               DO i1
                  REQUEST L2old_ab(i1,a,j,b) b
                  Tii(i,i1)        = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b)
                  Tii(i,i1)       *= -0.5
                  T1ii(i1,i)       = Tii(i,i1)
                  PUT Dij_a(i,i1) += Tii(i,i1)
                  PUT Dij_a(i1,i) += T1ii(i1,i)
                 
#                 PUT  T2L2_OO_A (i,i1) += Tii(i,i1) #last term of Eq. 9 alpha-beta

               ENDDO i1
            ENDDO i
      ENDPARDO a, b, j
      PARDO a, i, i1
            GET t1a_old(a,i)
            GET l1a_old(i1,a)
            Tii(i,i1)        = l1a_old(i1,a)*t1a_old(a,i)
            Tii(i,i1)       *= -0.5
            T1ii(i1,i)       = Tii(i,i1)
            PUT Dij_a(i,i1) += Tii(i,i1)
            PUT Dij_a(i1,i) += T1ii(i1,i)

#            PUT T1L1_OO_A(i,i1) += Tii(i,i1)    # 4 term of Eq. 9
      ENDPARDO a, i, i1
      ENDPROC DIJA
#     -------------
      PROC DIJ
#     ----------- 
           CALL DIJA
      ENDPROC DIJ
#     ------------

      PROC NEWDIJ_X
#     -------------
      PARDO a, a1, i2
            DO i
               REQUEST T2old_aa_x(a,i,a1,i2) i2
               DO i1
                  REQUEST L2old_aa(i1,a,i2,a1) a1

                  Tii(i,i1)   = T2old_aa_x(a,i,a1,i2)*L2old_aa(i1,a,i2,a1)
                  Tii(i,i1)  *= -0.5
                  PUT Dij_a_x_U(i,i1)   += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, a1, i2

      PARDO a, a1, i2
            DO i
               REQUEST T2old_aa(a,i,a1,i2) i2
               DO i1
                  REQUEST L2old_aa_x(i1,a,i2,a1) a1

                  Tii(i,i1)  = L2old_aa_x(i1,a,i2,a1)*T2old_aa(a,i,a1,i2)
                  Tii(i,i1) *= -0.5
                  PUT Dij_a_x_L(i,i1)   += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, a1, i2

#bgn_debug
       execute sip_barrier
#      execute get_my_rank rank
      suma = 0.0
      sumb = 0.0
      do i
      do i1
         get Dij_a_x_U(i,i1)
         get Dij_a_x_L(i,i1) 
#         if rank == 0.0
#         execute dump_amp Dij_a_x_U(i,i1)
#         execute dump_amp Dij_a_x_L(i,i1)
#         endif
         tmp = Dij_a_x_U(i,i1) * Dij_a_x_U(i,i1)
         suma += tmp
         tmp = Dij_a_x_L(i,i1) * Dij_a_x_L(i,i1)
         sumb += tmp
     enddo i1
     enddo i
     execute print_scalar suma
     execute print_scalar sumb
#end_debug

      PARDO a, b, j
            DO i
               REQUEST T2old_ab_x(a,i,b,j) j
               DO i1
                  REQUEST L2old_ab(i1,a,j,b) b

                  Tii(i,i1)   = T2old_ab_x(a,i,b,j)*L2old_ab(i1,a,j,b)
                  Tii(i,i1)  *= -1.0
                  PUT Dij_a_x_U(i,i1)   += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, b, j

#bgn_debug
#      execute sip_barrier
#      execute get_my_rank rank
#      sum = 0.0
#      do i
#      do i1
#         get Dij_a_x_U(i,i1)
#         if rank == 0.0
#         execute dump_amp Dij_a_x_U(i,i1)
#         endif
#         tmp = Dij_a_x_U(i,i1) * Dij_a_x_U(i,i1)
#         sum += tmp
#      enddo i1
#      enddo i
#      execute print_scalar sum
#end_debug

      PARDO a, b, j
            DO i
               REQUEST T2old_ab(a,i,b,j) j
               DO i1
                  REQUEST L2old_ab_x(i1,a,j,b) b

                  Tii(i,i1)  = L2old_ab_x(i1,a,j,b)*T2old_ab(a,i,b,j)
                  Tii(i,i1) *= -1.0
                  PUT Dij_a_x_L(i,i1) += Tii(i,i1)

               ENDDO i1
            ENDDO i
      ENDPARDO a, b, j

#bgn_debug
#      execute sip_barrier
#      execute get_my_rank rank
#      sum = 0.0
#      do i
#      do i1
#         Tii(i,i1) = 0.0
#         Tii(i1,i) = 0.0
#
#         get  Dij_a_x_U(i,i1) 
#         get Dij_a_x_L(i1,i)
#         if rank == 0.0
#         execute dump_amp Dij_a_x_U(i,i1)  
#         execute dump_amp Dij_a_x_L(i,i1)  
#         endif
#         tmp = Dij_a_x(i,i1) * Dij_a_x(i,i1)
#         sum += tmp
#      enddo i1
#      enddo i
#     execute print_scalar sum
#end_debug

      PARDO a, i, i1
            GET t1a_old_x(a,i)
            GET l1a_old(i1,a)

            Tii(i,i1)        = t1a_old_x(a,i)*l1a_old(i1,a)
            Tii(i,i1)       *= -1.0
            PUT Dij_a_x_U(i,i1)   += Tii(i,i1)

      ENDPARDO a, i, i1

#bgn_debug
#      execute sip_barrier
#      execute get_my_rank rank
#      sum = 0.0
#      do i
#     do i1
#         get Dij_a_x_U(i1,i)
#         if rank == 0.0
#         execute dump_amp Dij_a_x_U(i1,i)
#         endif
#         tmp = Dij_a_x(i,i1) * Dij_a_x(i,i1)
#         sum += tmp
#      enddo i1
#      enddo i
#      execute print_scalar sum
#end_debug

      PARDO a, i, i1
            GET t1a_old(a,i)
            GET l1a_old_x(i1,a)

            Tii(i,i1)  = t1a_old(a,i) * l1a_old_x(i1,a)
            Tii(i,i1) *= -1.0

            PUT Dij_a_x_L(i,i1)  += Tii(i,i1)

      ENDPARDO a, i, i1

#bgn_debug
#      execute sip_barrier
#      execute get_my_rank rank
#      sum = 0.0
#      do i
#      do i1
#         get Dij_a_x_L(i1,i)
#         if rank == 0.0
#         endif
#         tmp = Dij_a_x(i,i1) * Dij_a_x(i,i1)
#         sum += tmp
#      enddo i1
#      enddo i
#      execute print_scalar sum
#end_debug

# Make symmetric or anti-symmetric combinations

      execute sip_barrier
      PARDO i, i1
            get Dij_a_x_U(i1,i)
            get Dij_a_x_L(i1,i)

            get Dij_a_x_U(i,i1)
            get Dij_a_x_L(i,i1)

            Tii(i1,i)  = Dij_a_x_U(i1,i)
            T1ii(i1,i) = Dij_a_x_L(i1,i)

            TiiT(i,i1)  = Dij_a_x_U(i,i1)
            T1iiT(i,i1) = Dij_a_x_L(i,i1)

            tii(i1,i)  +=  t1ii(i1,i)
            TiiT(i,i1) +=  T1iiT(i,i1) 
            TiiT1(i1,i) =  TiiT(i,i1) 
            
            tii(i1,i) += TiiT1(i1,i)
            tii(i1,i) *= 0.5

            PUT Dij_a_x(i1,i) = tii(i1,i)

      ENDPARDO i, i1

#bgn_debug
      execute sip_barrier
      suma=0.0
      do i
      do i1
#         get Dij_a_x_U(i1,i)
#         get Dij_a_x_L(i1,i)
         get Dij_a_x(i1,i)
#          get T2L2_OO_A_x(i1,i)
        if rank == 0.0
#         execute dump_amp Dij_a_x_U(i1,i)
#         execute dump_amp Dij_a_x_L(i1,i)
#         execute dump_amp Dij_a_x(i1,i)
#         execute dump_amp  T2L2_OO_A_x(i1,i)
         endif
         tmp = Dij_a_x(i1,i) * Dij_a_x(i1,i)
         suma += tmp
      enddo i1
      enddo i
      execute print_scalar suma
#end_debug

      ENDPROC NEWDIJ_X
#     ----------------
#_______________________________________________________________________________
# In this superprocedure the virtual-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ai} = 0.5 t^{a}_{i} + 0.5 \lambda^{i}_{a}  
#        + 0.5 Sum_{m,e} t^{ae}_{im} \lambda^{m}_{e} 
#        - 0.5 Sum_{m,e} t^{a}_{m} t^{e}_{i} \lambda^{m}_{e} 
#        -0.25 Sum_{m,n,e,f} \lambda^{mn}_{ef} t^{ef}_{in} t^{a}_{m}
#        -0.25 Sum_{m,n,e,f} \lambda^{mn}_{ef} t^{af}_{mn} t^{e}_{i}

      PROC DAI
#------------------------------------------------------------------
      PARDO  a, i
        tai1(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)
            GET  LT1A (a,i1)
            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)
            tai (a,i)   = LT1A (a,i1) * tii (i,i1)
            tai1(a,i) += tai(a,i)
         ENDDO i1
         PUT Doldai_a(a,i) += tai1 (a,i)
       ENDPARDO a,i
       EXECUTE  SIP_BARRIER
#-------------------------------------------------------------------------
# 6th term
       PARDO  a, a1, i
            GET  LT1A (a1,i) 
            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * LT1A (a1,i)
            tai (a,i)            *= -1.0
            PUT  Doldai_a(a,i)    += tai (a,i)
      ENDPARDO  a, a1, i
# end 6th term

# -------------------------------------------------------------------------
      PARDO   a1,i1
         GET  l1a_old(i1,a1)
         DO a
            DO i
               REQUEST                 T2old_aa(a,i,a1,i1) i
               tai  (a,i)            = T2old_aa (a,i,a1,i1) * l1a_old(i1,a1)
               tai (a,i)          *=0.5
               PUT  Doldai_a(a,i) += tai (a,i)
           ENDDO i
         ENDDO a
      ENDPARDO   a1,i1


      PARDO  b,j 
         GET  l1a_old(j,b)
         DO a
            DO i
               REQUEST                 T2old_ab(a,i,b,j) i
               tai  (a,i)            = T2old_ab(a,i,b,j) * l1a_old(j,b)
               tai  (a,i)           *= 0.5
               PUT  Doldai_a(a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  b,j 

      PARDO  a, i
              GET t1a_old(a,i)
              GET l1a_old(i,a)
              tai (a,i)  = l1a_old(i,a)
              tai (a,i) += t1a_old(a,i)
               tai (a,i) *=0.5
               PUT  Doldai_a(a,i) += tai (a,i)
      ENDPARDO  a, i
      EXECUTE  SIP_BARRIER

      ENDPROC DAI
#     ------------
#
      PROC DAI_x
#     ----------
       PARDO  a, i
         tai1(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)
            GET  T1L1_OO_A_x (i,i1)
            GET  T2L2_OO_A_x (i,i1)
            GET  LT1A (a,i1) 
            GET  LT1A_x (a,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)
            tai (a,i)   = LT1A_x (a,i1) * tii (i,i1)
            tai1(a,i) += tai(a,i)

            tiiT (i,i1)  = T1L1_OO_A_x (i,i1)
            tiiT (i,i1) += T2L2_OO_A_x (i,i1)
            taiT (a,i)   = LT1A (a,i1) * tiiT (i,i1)

            tai1(a,i) += taiT(a,i)

#            tai1(a,i) *= 0.0
          ENDDO i1

            PUT Doldai_a_x(a,i) += tai1 (a,i)

       ENDPARDO a,i

#       EXECUTE  SIP_BARRIER

#...................................
#debug_bgn
#           suma  = 0.0
#           sumaa = 0.0
#
#           pardo a, i
#           do i
#           do i1
#               GET Doldai_a_x(a,i)
#                sum = Doldai_a_x(a,i)*Doldai_a_x(a,i)
#                GET T1L1_OO_A (i,i1)
#                sum = T1L1_OO_A (i,i1)*T1L1_OO_A (i,i1)
#                suma += sum
#           enddo i1
#           enddo i
#           execute print_scalar suma
#           suma = 0.0
#           do a
#           do i1
#              Get LT1A_x(a,i1) 
#              sum = LT1A_x(a,i1)*LT1A_x(a,i1)
#             suma += sum
#           enddo i1
#           enddo a
#           execute print_scalar suma

      execute sip_barrier
      suma = 0.0
      do a
      do i
         get Doldai_a_x(a,i)
         tmp = Doldai_a_x(a,i) * Doldai_a_x(a,i)
         suma += tmp
      enddo i
      enddo a
      execute print_scalar suma
#end_debug

       PARDO  a, a1, i              
            GET                     LT1A (a1,i) 
            GET                     T2L2_VV_A_x (a,a1) 
            tai (a,i)             = T2L2_VV_A_x (a,a1) * LT1A (a1,i)
            tai (a,i)            *= -1.0
#            tai (a,i) *= 0.0
            PUT  Doldai_a_x(a,i)    += tai (a,i)
      ENDPARDO  a, a1, i

      PARDO  a, a1, i
            GET                     T2L2_VV_A (a,a1)
            GET                     LT1A_x (a1,i) 
            tai (a,i)             = T2L2_VV_A (a,a1) * LT1A_x (a1,i)
            tai (a,i)            *= -1.0
            PUT  Doldai_a_x(a,i)    += tai (a,i)
      ENDPARDO  a, a1, i

#bgn_debug
      suma = 0.0
      do a
      do a1
         get T2L2_VV_A_x (a,a1)
         tmp = T2L2_VV_A_x (a,a1) * T2L2_VV_A_X (a,a1)
         suma += tmp
      enddo a1
     enddo a
     execute print_scalar suma

      suma = 0.0
      do a
      do a1
         get T2L2_VV_A (a,a1)
         tmp = T2L2_VV_A (a,a1) * T2L2_VV_A (a,a1)
         suma += tmp
      enddo a1
      enddo a
      execute print_scalar suma

      suma = 0.0
           do a
           do i1
               get  LT1A_x (a,i1) 
              sum = LT1A_x(a,i1)*LT1A_x(a,i1)
             suma += sum
           enddo i1
           enddo a
          execute print_scalar suma

      suma = 0.0
           do a
           do i1 
              GET LT1A(a,i1)
              sum = LT1A(a,i1)*LT1A(a,i1)
             suma += sum
           enddo i1
           enddo a
          execute print_scalar suma

      execute sip_barrier 
      suma = 0.0
      do a
      do i
         get Doldai_a_x(a,i)
         tmp = Doldai_a_x(a,i) * Doldai_a_x(a,i)
         suma += tmp
      enddo i
      enddo a
      execute print_scalar suma
#end_debug

      PARDO   a1,i1
         GET  l1a_old_x(i1,a1)
         DO a
            DO i
               REQUEST                 T2old_aa(a,i,a1,i1) i
               tai  (a,i)            = T2old_aa (a,i,a1,i1) * l1a_old_x(i1,a1)
               tai (a,i)          *=0.5
               PUT  Doldai_a_x(a,i) += tai (a,i)
           ENDDO i
         ENDDO a
      ENDPARDO   a1,i1
      PARDO   a1,i1
         GET  l1a_old(i1,a1)
         DO a
            DO i
               REQUEST                 T2old_aa_x(a,i,a1,i1) i
               tai  (a,i)            = T2old_aa_x (a,i,a1,i1) * l1a_old(i1,a1)
               tai (a,i)          *=0.5
               PUT  Doldai_a_x(a,i) += tai (a,i)
           ENDDO i
         ENDDO a
      ENDPARDO   a1,i1
      PARDO  b,j
         GET  l1a_old_x(j,b)
         DO a
            DO i
               REQUEST                 T2old_ab(a,i,b,j) i
               tai  (a,i)            = T2old_ab(a,i,b,j) * l1a_old_x(j,b)
               tai  (a,i)           *= 0.5
               PUT  Doldai_a_x(a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  b,j
      PARDO  b,j
         GET  l1a_old(j,b)
         DO a
            DO i
               REQUEST                 T2old_ab_x(a,i,b,j) i
               tai  (a,i)            = T2old_ab_x(a,i,b,j) * l1a_old(j,b)
               tai  (a,i)           *= 0.5
               PUT  Doldai_a_x(a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  b,j

#bgn_debug
      execute sip_barrier 
      suma = 0.0
      do a
      do i
         get Doldai_a_x(a,i)
         tmp = Doldai_a_x(a,i) * Doldai_a_x(a,i)
         suma += tmp
      enddo i
      enddo a
      execute print_scalar suma
#end_debug


      PARDO  a, i
              GET t1a_old_x(a,i)
              GET l1a_old_x(i,a)
              tai (a,i)  = l1a_old_x(i,a)
              tai (a,i) += t1a_old_x(a,i)
              tai (a,i) *=0.5
              PUT  Doldai_a_x(a,i) += tai (a,i)
      ENDPARDO  a, i
      EXECUTE  SIP_BARRIER
# 
#bgn_debug
      suma = 0.0
      do a
      do i
         get Doldai_a_x(a,i)
         tmp = Doldai_a_x(a,i) * Doldai_a_x(a,i)
         suma += tmp
      enddo i
      enddo a
      execute print_scalar suma
#end_debug

      EXECUTE  SERVER_BARRIER
      execute load_balance_off
      EXECUTE  SERVER_BARRIER

      ENDPROC DAI_x
#     -------------

      PROC D1TRANS
#     ------------
#bgn_debug
      suma = 0.0
      do a
      do a1
            GET Dab_a(a,a1)
            tmp  = Dab_a(a,a1) * Dab_a(a,a1)
            suma += tmp
      enddo a1
      enddo a
      execute print_scalar suma 
      suma = 0.0
      do i
      do i1
            GET Dij_a(i,i1)
            tmp  = Dij_a(i,i1) * Dij_a(i,i1)
            suma += tmp
      enddo i1
      enddo i
      execute  print_scalar suma 
      suma = 0.0
      do a 
      do i
            GET Doldai_a(a,i)
            tmp  = Doldai_a(a,i) * Doldai_a(a,i)
            suma += tmp
      enddo i
      enddo a 

      execute print_scalar sumb
#end_debug
#     Transform Dai_aa
#     ----------------

      PARDO a, i
            GET Doldai_a(a,i)
            DO mu
               Jxi(mu,i)  = Doldai_a(a,i)*ca(mu,a)
               DO nu
                  Ixx(mu,nu)      = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT DpqA(mu,nu) += Ixx(mu,nu) #PV
                  PUT DpqA(nu,mu) += I1xx(nu,mu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO a, i
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
            GET Dab_a(a,a1)
            DO mu
               Ixa(mu,a1)  = Dab_a(a,a1)*ca(mu,a)
               DO nu
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT DpqA(mu,nu) += Ixx(mu,nu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO a, a1
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
            GET Dij_a(i,i1)
            DO mu
               Jxi(mu,i1)  = Dij_a(i,i1)*ca(mu,i)
               DO nu
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT DpqA(mu,nu) += Ixx(mu,nu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO i, i1
#
      execute sip_barrier

      ENDPROC D1TRANS
#     ----------------
#
      PROC CMP_DIPOLEMS
#     -----------------
# Finally contract with the derivative integrals
# ----------------------------------------------
      XX =0.0
      Axx=0.0
      YY =0.0
      Ayy=0.0
      ZZ =0.0
      Azz=0.0
      Px =0.0
      Py =0.0
      Pz =0.0

        PARDO mu, nu
            GET DpqA(mu,nu)
            GET DHF_aa(mu,nu)

            get HBx(mu,nu)
            get HBy(mu,nu)
            get HBz(mu,nu) 
 
            Dccsd(mu,nu)  = DpqA(mu,nu)
            Dscf(mu,nu)   = DHF_aa(mu,nu)

            Tpq(mu,nu)  = Dccsd(mu,nu)
            Tpq(mu,nu) += Dscf(mu,nu)
            Tpq(mu,nu) *= 2.0

            XX   = Tpq(mu,nu)*HBx(mu,nu)
            Axx += XX

            YY  = Tpq(mu,nu)*HBy(mu,nu)
            Ayy += YY

            ZZ  = Tpq(mu,nu)*HBz(mu,nu)
            Azz += ZZ
         ENDPARDO mu, nu

      execute sip_barrier
      collective Px +=Axx
      execute print_scalar Px

      execute sip_barrier
      collective Py +=Ayy
      execute print_scalar Py

      execute sip_barrier
      collective Pz +=Azz
      execute print_scalar Pz

      ENDPROC CMP_DIPOLEMS 
#     --------------------

      PROC D1TRANS_x
#     ---------------
#     Transform Dai_aa

      PARDO a, i
            GET Doldai_a_x(a,i)
            DO mu
               Jxi(mu,i)  = Doldai_a_x(a,i)*ca(mu,a)
               DO nu
                  Ixx(mu,nu)      = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT DpqA_x(mu,nu) += Ixx(mu,nu) #PV
                  PUT DpqA_x(nu,mu) += I1xx(nu,mu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO a, i
#     Transform Dab_a
      PARDO a, a1
            GET Dab_a_x(a,a1)
            DO mu
               Ixa(mu,a1)  = Dab_a_x(a,a1)*ca(mu,a)
               DO nu
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT DpqA_x(mu,nu) += Ixx(mu,nu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO a, a1
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
            GET Dij_a_x(i,i1)
            DO mu
               Jxi(mu,i1)  = Dij_a_x(i,i1)*ca(mu,i)
               DO nu
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                   PUT DpqA_x(mu,nu) += Ixx(mu,nu) #PV
               ENDDO nu
            ENDDO mu
      ENDPARDO i, i1
      execute sip_barrier

#bgn_debug
#      PARDO mu, nu
#            get DpqA_x(mu,nu)
#            execute dump_amp DpqA_x(mu,nu) 
#              
#            Ixx(mu,nu) = DpqA_x(mu,nu)
#            If mu > nu
#               Ixx(mu,nu) *= -1.0
#            endif
#            if mu == nu
#               execute symm_force_ij Ixx
#            endif
#            Put DpqA_x(mu,nu) = Ixx(mu,nu)
#      ENDPARDO mu,nu
#
#      execute sip_barrier
#end_debug

      ENDPROC D1TRANS_x
#     ------------------

      PROC CCSD_RESPONSE_X
#     --------------------
# Finally contract with the derivative integrals
# ----------------------------------------------
      XX=0.0
      Axx=0.0
      YY=0.0
      Ayy=0.0
      ZZ=0.0
      Azz=0.0
      Pxx=0.0
      Pxy=0.0
      Pxz=0.0
      suma=0.0

      PARDO mu, nu
            GET DpqA_x(mu,nu)
            get HBx(mu,nu)
            get HBy(mu,nu)
            get HBz(mu,nu)

            Dccsd_x(mu,nu)   = DpqA_x(mu,nu)
            Tpq_x(mu,nu)     = Dccsd_x(mu,nu)
            Tpq_x(mu,nu)    *= 2.0
 
             XX   = Tpq_x(mu,nu)*HBx(mu,nu)            
             Axx += XX             

            YY  = Tpq_x(mu,nu)*HBy(mu,nu)     
            Ayy += YY

             ZZ  = Tpq_x(mu,nu)*HBz(mu,nu)
            Azz += ZZ
       ENDPARDO mu, nu

      execute sip_barrier
      collective Pxx +=Axx
      execute print_scalar Pxx
  
      execute sip_barrier
      collective Pxy +=Ayy
      execute print_scalar Pxy

      execute sip_barrier
      collective Pxz +=Azz
      execute print_scalar Pxz

      ENDPROC CCSD_RESPONSE_X
#    ------------------------

      PROC CCSD_RESPONSE_Y
#     --------------------
      XX=0.0
      Axx=0.0
      YY=0.0
      Ayy=0.0
      ZZ=0.0
      Azz=0.0
      Pyx=0.0
      Pyy=0.0
      Pyz=0.0
      suma=0.0

      PARDO mu, nu
            GET DpqA_x(mu,nu)
            get HBx(mu,nu)
            get HBy(mu,nu)
            get HBz(mu,nu)

            Dccsd_x(mu,nu)   = DpqA_x(mu,nu)
            Tpq_x(mu,nu)     = Dccsd_x(mu,nu)
            Tpq_x(mu,nu)    *= 2.0
 
             XX   = Tpq_x(mu,nu)*HBx(mu,nu)            
             Axx += XX             

            YY  = Tpq_x(mu,nu)*HBy(mu,nu)     
            Ayy += YY

             ZZ  = Tpq_x(mu,nu)*HBz(mu,nu)
            Azz += ZZ
       ENDPARDO mu, nu

      execute sip_barrier
      collective Pyx +=Axx
      execute print_scalar Pyx
  
      execute sip_barrier
      collective Pyy +=Ayy
      execute print_scalar Pyy

      execute sip_barrier
      collective Pyz +=Azz
      execute print_scalar Pyz

      ENDPROC CCSD_RESPONSE_Y
#     -----------------------

      PROC CCSD_RESPONSE_Z
#     --------------------
      XX=0.0
      Axx=0.0
      YY=0.0
      Ayy=0.0
      ZZ=0.0
      Azz=0.0
      Pzx=0.0
      Pzy=0.0
      Pzz=0.0
      suma=0.0

      PARDO mu, nu
            GET DpqA_x(mu,nu)
            get HBx(mu,nu)
            get HBy(mu,nu)
            get HBz(mu,nu)

            Dccsd_x(mu,nu)   = DpqA_x(mu,nu)
            Tpq_x(mu,nu)     = Dccsd_x(mu,nu)
            Tpq_x(mu,nu)    *= 2.0

             XX   = Tpq_x(mu,nu)*HBx(mu,nu)            
             Axx += XX             

            YY  = Tpq_x(mu,nu)*HBy(mu,nu)     
            Ayy += YY

             ZZ  = Tpq_x(mu,nu)*HBz(mu,nu)
            Azz += ZZ
       ENDPARDO mu, nu

      execute sip_barrier
      collective Pzx +=Axx
      execute print_scalar Pzx
  
      execute sip_barrier
      collective Pzy +=Ayy
      execute print_scalar Pzy

      execute sip_barrier
      collective Pzz +=Azz
      execute print_scalar Pzz

      ENDPROC CCSD_RESPONSE_Z
#    ------------------------

       PROC GET_HBXYZ_Dipole
#     ----------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier

           PARDO mu, nu
              EXECUTE return_x Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                 execute print_scalar one
#                 Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg

              PUT  HBx(mu,nu) = Tpq(mu,nu)

              EXECUTE return_y Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                 execute print_scalar one
#                 Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg
              PUT  HBy(mu,nu) = Tpq(mu,nu)

              EXECUTE return_z Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                execute print_scalar one
#                Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg

              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu

         execute sip_barrier
#
       ENDPROC get_HBXYZ_Dipole
#      -----------------------

        PROC GET_HBXYZ_Angmom
#       --------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier 

           PARDO mu, nu
              EXECUTE compute_angmom_xbatch Tpq(mu,nu)
              PUT  HBx(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_angmom_ybatch Tpq(mu,nu)
              PUT  HBy(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_angmom_zbatch Tpq(mu,nu)
              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu

         execute sip_barrier
#
       ENDPROC get_HBXYZ_Angmom
#      -----------------------

        PROC GET_HBXYZ_Spin_orbit
#       -----------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier 

           PARDO mu, nu
              EXECUTE compute_1soi_xbatch Tpq(mu,nu)
              PUT  HBx(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_1soi_ybatch Tpq(mu,nu)
              PUT  HBy(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_1soi_zbatch Tpq(mu,nu)
              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu

         execute sip_barrier
#
       ENDPROC get_HBXYZ_Spin_orbit
#      --------------------------

          PROC ENERGY_X        
#------------------------
          XX=0.0
          Axx=0.0
          Px=0.0
          PARDO a,a1
           GET Dab_a_x(a,a1)
           XX  = Dab_a_x(a,a1)*Dab_a_x(a,a1) 
           AXX   += XX                
         ENDPARDO a,a1

        execute sip_barrier
        collective Px += Axx           
        execute print_scalar Px                
        ENDPROC ENERGY_X          
#............................
       PROC ENERGYov_X
          XX=0.0
          Axx=0.0
          Px=0.0
          PARDO a,i
           GET Doldai_a_x(a,i)
           XX  = Doldai_a_x(a,i)*Doldai_a_x(a,i)
           AXX   += XX
         ENDPARDO a,i
        execute sip_barrier
        collective Px += Axx
        execute print_scalar Px
        ENDPROC ENERGYOV_X          
#-------------------------------------------------

        PROC ENERGYoo_X
          XX=0.0
          Axx=0.0
          Px=0.0
          PARDO i,i1
           GET Dij_a_x(i,i1)
           XX  = Dij_a_x(i,i1)*Dij_a_x(i,i1)
           AXX   += XX
         ENDPARDO i,i1

        execute sip_barrier
        collective Px += Axx
        execute print_scalar Px
        execute print_scalar diff
        ENDPROC ENERGYoo_X
#       ------------------
     PROC PICK_PERT_T_X
#    ------------------

      PARDO I, A
            GET T1a_x(A,I)
            Get L1a_x(i,a)
            Tai(A,I) = T1a_x(A,I)
            Tia(i,a) = L1a_x(i,a)
            PUT T1a_old_x(A,I) = Tai(A,I)
            PUT L1a_old_x(I,A) = Tia(i,a)
      ENDPARDO I, A

      PARDO A, A1, I, I1
            REQUEST T2aa_X(A,I,A1,I1) I1
            REQUEST L2aa_x(i,a,i1,a1) a1
            Taiai(A,I,A1,I1) = T2aa_X(A,I,A1,I1)
            Tiaia(i,a,i1,a1) = L2aa_x(i,a,i1,a1)
            PREPARE T2old_aa_X(A,I,A1,I1) = Taiai(A,I,A1,I1)
            PREPARE L2old_aa_X(I,A,I1,A1) = Tiaia(i,a,i1,a1)
      ENDPARDO A, A1, I, I1,

      PARDO A, B, I, J
            REQUEST T2ab_X(A,I,B,J) J
            REQUEST L2ab_x(i,a,j,b) b
            Taibj(A,I,B,J) = T2ab_X(A,I,B,J)
            Tiajb(i,a,j,b) = L2ab_x(i,a,j,b)
            PREPARE T2old_ab_X(A,I,B,J) = Taibj(A,I,B,J)
            PREPARE L2old_ab_x(i,a,j,b) = Tiajb(i,a,j,b)
      ENDPARDO A, B, I, J,

      EXECUTE SERVER_BARRIER

#bgn_debug
#       execute get_my_rank rank
#       if rank == 0.0
#          do i
#          do a
#            GET T1a_old_x(A,I)
#             execute dump_amp T1a_old_x(A,I)
#          enddo a
#          enddo i
#       endif
#end_debug
     ENDPROC PICK_PERT_T_X
#    --------------------

    PROC PICK_PERT_T_Y
#    ------------------

      PARDO I, A
            GET T1a_Y(A,I)
            Get L1a_Y(i,a)
            Tai(A,I) = T1a_Y(A,I)
            Tia(i,a) = L1a_Y(i,a)
            PUT T1a_old_x(A,I) = Tai(A,I)
            PUT L1a_old_x(I,A) = Tia(i,a)
      ENDPARDO I, A

      PARDO A, A1, I, I1
            REQUEST T2aa_Y(A,I,A1,I1) I1
            REQUEST L2aa_Y(i,a,i1,a1) a1
            Taiai(A,I,A1,I1) = T2aa_Y(A,I,A1,I1)
            Tiaia(i,a,i1,a1) = L2aa_Y(i,a,i1,a1)
            PREPARE T2old_aa_X(A,I,A1,I1) = Taiai(A,I,A1,I1)
            PREPARE L2old_aa_X(I,A,I1,A1) = Tiaia(i,a,i1,a1)
      ENDPARDO A, A1, I, I1,

      PARDO A, B, I, J
            REQUEST T2ab_Y(A,I,B,J) J
            REQUEST L2ab_Y(i,a,j,b) b
            Taibj(A,I,B,J) = T2ab_Y(A,I,B,J)
            Tiajb(i,a,j,b) = L2ab_Y(i,a,j,b)
            PREPARE T2old_ab_X(A,I,B,J) = Taibj(A,I,B,J)
            PREPARE L2old_ab_x(i,a,j,b) = Tiajb(i,a,j,b)
      ENDPARDO A, B, I, J,

      EXECUTE SERVER_BARRIER

      ENDPROC PICK_PERT_T_Y
#     ---------------------

     PROC PICK_PERT_T_Z
#    ------------------

      PARDO I, A
            GET T1a_Z(A,I)
            Get L1a_Z(i,a)
            Tai(A,I) = T1a_Z(A,I)
            Tia(i,a) = L1a_Z(i,a)
            PUT T1a_old_x(A,I) = Tai(A,I)
            PUT L1a_old_x(I,A) = Tia(i,a)
      ENDPARDO I, A

      PARDO A, A1, I, I1
            REQUEST T2aa_Z(A,I,A1,I1) I1
            REQUEST L2aa_Z(i,a,i1,a1) a1
            Taiai(A,I,A1,I1) = T2aa_Z(A,I,A1,I1)
            Tiaia(i,a,i1,a1) = L2aa_Z(i,a,i1,a1)
            PREPARE T2old_aa_X(A,I,A1,I1) = Taiai(A,I,A1,I1)
            PREPARE L2old_aa_X(I,A, I1,A1) = Tiaia(i,a,i1,a1)
      ENDPARDO A, A1, I, I1,

      PARDO A, B, I, J
            REQUEST T2ab_Z(A,I,B,J) J
            REQUEST L2ab_Z(i,a,j,b) b
            Taibj(A,I,B,J) = T2ab_Z(A,I,B,J)
            Tiajb(i,a,j,b) = L2ab_Z(i,a,j,b)
            PREPARE T2old_ab_X(A,I,B,J) = Taibj(A,I,B,J)
            PREPARE L2old_ab_X(i,a,j,b) = Tiajb(i,a,j,b)
      ENDPARDO A, B, I, J,

      EXECUTE SERVER_BARRIER

     ENDPROC PICK_PERT_T_Z
#    ----------------------

     PROC PUT_DENS_X
#    ---------------
     PARDO mu, nu
          GET DpqA_x(mu,nu)
          TXX(mu,nu) = DpqA_x(mu,nu)
          PUT DpqA_1(mu,nu) = DpqA_x(mu,nu) 
     ENDPARDO mu, nu
     
     ENDPROC PUT_DENS_X
#    ------------------

     PROC PUT_DENS_Y
#    ---------------
     PARDO mu, nu
          GET DpqA_x(mu,nu)
          TXX(mu,nu) = DpqA_x(mu,nu)
          PUT DpqA_2(mu,nu) = DpqA_x(mu,nu)
     ENDPARDO mu, nu
    
     ENDPROC PUT_DENS_Y
#    ------------------

     PROC PUT_DENS_Z
#    ---------------
     PARDO mu, nu
          GET DpqA_x(mu,nu)
          TXX(mu,nu) = DpqA_x(mu,nu)
          PUT DpqA_1(mu,nu) = DpqA_x(mu,nu)
     ENDPARDO mu, nu
    

     ENDPROC PUT_DENS_Z
#    ------------------
     
     PROC CHECK_TL_ARRAYS
#    --------------------
#debug_bgn
           execute get_my_rank rank
           suma  = 0.0
           sumb  = 0.0
           sumaa = 0.0
           sumbb = 0.0
           sum = 0.0

           pardo a, i
               GET  t1a_old_x(a,i)
               GET  l1a_old_x(i,a)
                sum = t1a_old_x(a,i) * t1a_old_x(a,i)
                suma += sum
                sum = l1a_old_x(i,a) * l1a_old_x(i,a)
                sumb += sum
           endpardo a, i
           execute server_barrier
           collective sumaa += suma
           collective sumbb += sumb

           execute print_scalar sumaa
           execute print_scalar sumbb


           PARDO a, i, a2, i1
               REQUEST T2old_aa(a,i,a2,i1) i1  # read from list
               REQUEST L2old_aa(i,a,i1,a2) a2 # read from list
               REQUEST T2old_aa_x(a,i,a2,i1) i1  # read from list
               REQUEST L2old_aa_x(i,a,i1,a2) a2 # read from list
#               execute dump_amp T2old_aa_x(a,i,a2,i1) 
#               execute dump_amp L2old_aa_x(i,a,i1,a2) 
#
#               taiai(a,i,a2,i1) = L2old_aa_x(i,a,i1,a2)
               sum = T2old_aa(a,i,a2,i1) * T2old_aa(a,i,a2,i1) 
               suma += sum
               sum = L2old_aa(i,a,i1,a2) * L2old_aa(i,a,i1,a2)
               suma += sum
               sum = T2old_aa_x(a,i,a2,i1) * T2old_aa_x(a,i,a2,i1)
               suma += sum
               sum =  L2old_aa_x(i,a,i1,a2) * L2old_aa_x(i,a,i1,a2)
               suma += sum
           ENDPARDO a, i, a2, i1
           execute server_barrier
           collective sumaa += suma
           collective sumbb += sumb
           execute print_scalar sumaa
           execute print_scalar sumbb

     ENDPROC CHECK_TL_ARRAYS
#    -----------------------

     PROC CHECK_AO_DENS
#    ------------------
#debug_bgn
#            call ENERGY_X
#            call ENERGYoo_X
#            call ENERGYov_X
#debug_end
#debug_bgn
#           suma  = 0.0
#           sumb  = 0.0
#           sumaa = 0.0
#           sumbb = 0.0
#           sum = 0.0
#
#           pardo mu, nu
#               GET DpqA_x(mu,nu)
#                sum = DpqA_x(mu,nu) * DpqA_x(mu,nu)
#                suma += sum
#           endpardo mu, nu
#
#           sum = 0.0
#           pardo mu, nu
#               GET DpqA_y(mu,nu)
#                sum =  DpqA_y(mu,nu) * DpqA_y(mu,nu)
#                sumb += sum
#           endpardo mu, nu
#           execute server_barrier
#           collective sumaa += suma
#           collective sumbb += sumb
#           diff = sumaa
#           diff -= sumbb
#           execute print_scalar sumaa
#          execute print_scalar sumbb
#debug_end
#
     ENDPROC CHECK_AO_DENS
#    --------------------

         PROC DMAIN
#        -----------
            execute get_my_rank rank

            one   = 1.0
            two   = 2.0
            three = 3.0

            create DHF_aa

            execute sip_barrier

            CALL HFDENS
            CALL CREATE_FIXED

# set the type of property based on key-words.

            do_pols = polarizability
            do_aten = a_tensor
            do_gten = g_tensor
            do_dten = d_tensor

            if do_pols == 1.0
               property = 10.0
            endif

#  
# Two variables that control the formation of antisymmetric or
# symmetric density or total or spin density.
#
            if property == 10.0

               ASYM     = 0.0
               SPIN_DEN = 0.0
               call get_HBXYZ_Dipole

            endif
            
            call GAEA
            call GMIA
            call DAB
            call DIJ
            execute sip_barrier

            call DAI
            execute sip_barrier

            CALL D1TRANS                                            
            CALL CMP_DIPOLEMS

            NCOUNT = 0.0
            DO NPERT 

               CALL CREATE_XARRAYS

               NCOUNT += 1.0
#bgn_debug
#               NCOUNT = 2.0 
#end_debug      
               IF NCOUNT == 1.0
                  CALL PICK_PERT_T_X
               ENDIF

               IF NCOUNT == 2.0
                  CALL PICK_PERT_T_Y
               ENDIF

               IF NCOUNT == 3.0
                  CALL PICK_PERT_T_Z
               ENDIF

               CALL CHECK_TL_ARRAYS
               CALL FILL_LT1_ARRAYS

               call GAEA_x
               call GMIA_x
               call NEWDAB_x 
               call NEWDIJ_x
               execute sip_barrier

               call DAI_x
               execute sip_barrier

               CALL CHECK_AO_DENS

               CALL D1TRANS_x

# compute the 2nd order terms that involve 1st order response.
# Lets have separate routines.

               IF NCOUNT == 1.0
                  CALL CCSD_RESPONSE_X
               ENDIF 
               IF NCOUNT == 2.0
                  CALL CCSD_RESPONSE_Y
               ENDIF 
               IF NCOUNT == 3.0
                  CALL CCSD_RESPONSE_Z
               ENDIF 
  
               IF NCOUNT == 1.0
                  CALL PUT_DENS_X
                  EXECUTE SIP_BARRIER
               ENDIF

               IF NCOUNT == 2.0
                  CALL PUT_DENS_Y
                  EXECUTE SIP_BARRIER
               ENDIF

               IF NCOUNT == 3.0
                  CALL PUT_DENS_Z
                  EXECUTE SIP_BARRIER
               ENDIF

               CALL DELETE_XARRAYS
 
        ENDDO NPERT
#          
#
# compute the 2nd order terms that involve oth order response.
# There are there terms for g-tensor: Mass correction and 1 
# and two particle gauge correction.
# 
          if property == 10.0

            do xyz
               if xyz == 1
               do xyz1
                  if xyz1 == 1
                     tpol(xyz,xyz1) = Pxx
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                  if xyz1 == 2
                     tpol(xyz,xyz1) = Pxy
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                    if xyz1 == 3
                       tpol(xyz,xyz1) = Pxz
                       pol(xyz,xyz1) = tpol(xyz,xyz1)
                    endif
               enddo xyz1
               endif

               if xyz == 2
               do xyz1
                  if xyz1 == 1
                     tpol(xyz,xyz1) = Pyx
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                  if xyz1 == 2
                     tpol(xyz,xyz1) = Pyy
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                    if xyz1 == 3
                       tpol(xyz,xyz1) = Pyz
                       pol(xyz,xyz1) = tpol(xyz,xyz1)
                    endif 
               enddo xyz1
               endif 

              if xyz == 3 
               do xyz1
                  if xyz1 == 1
                     tpol(xyz,xyz1) = Pzx
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                  if xyz1 == 2 
                     tpol(xyz,xyz1) = Pzy
                     pol(xyz,xyz1) = tpol(xyz,xyz1)
                  endif
                    if xyz1 == 3
                       tpol(xyz,xyz1) = Pzz
                       pol(xyz,xyz1) = tpol(xyz,xyz1)
                    endif 
               enddo xyz1
               endif 

            enddo xyz
          endif 


          if property == 10.0
              ipol = 711.0
              execute print_rel_info ipol pol 
              ipol = 712.0
              execute print_rel_info ipol pol

          endif 

      tmpnuc = 0.0
      DO jatom
         tmpnuc = tmpnuc + 1.0
      ENDDO jatom

      dipnucx = tmpnuc
      dipnucy = dipnucx
      dipnucz = dipnucy

      EXECUTE  NUC_DIPOLE_MOMENT  ONE    dipnucx
      EXECUTE  NUC_DIPOLE_MOMENT  TWO    dipnucy
      EXECUTE  NUC_DIPOLE_MOMENT  THREE  dipnucz

      Px *= -1.0
      Py *= -1.0
      Pz *= -1.0
      Px += dipnucx
      Py += dipnucy
      Pz += dipnucz

      EXECUTE  PRINT_SCALAR  PX
      EXECUTE  PRINT_SCALAR  PY
      EXECUTE  PRINT_SCALAR  PZ

      do xyz
         if xyz == 1
            dmom(xyz) = PZ
         endif

         if xyz == 2
            dmom(xyz) = PY
         endif

         if xyz == 1
            dmom(xyz) = PZ
         endif
      enddo xyz
      dipole = 718

      execute print_rel_info dipole dmom

      ENDPROC DMAIN

#PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
# Read two-electron transformed integrals 
# --------------------------------------- 
# Uncomment here and L_xyz if MO integrals are needed.

#      CALL READ_2EL
# Read converged T and Lambda amplitudes 
# -------------------------------------- 
#
      CREATE t1a_old
      CREATE l1a_old

      CREATE t1a_x
      CREATE l1a_x

      CREATE t1a_y
      CREATE l1a_y

      CREATE t1a_z
      CREATE l1a_z

      execute sip_barrier 

      execute list_to_blocks t1a_old
      execute list_to_blocks T2old_aa
      execute list_to_blocks T2old_ab

      execute list_to_blocks  l1a_old
      execute list_to_blocks L2old_aa
      execute list_to_blocks L2old_ab

      execute list_to_blocks  t1a_x
      execute list_to_blocks  T2aa_x
      execute list_to_blocks  T2ab_x

      execute list_to_blocks  t1a_y
      execute list_to_blocks  T2aa_y
      execute list_to_blocks  T2ab_y

      execute list_to_blocks  t1a_z
      execute list_to_blocks  T2aa_z
      execute list_to_blocks  T2ab_z

      execute list_to_blocks  l1a_x
      execute list_to_blocks L2aa_x
      execute list_to_blocks L2ab_x

      execute list_to_blocks  l1a_y
      execute list_to_blocks L2aa_y
      execute list_to_blocks L2ab_y

      execute list_to_blocks  l1a_z
      execute list_to_blocks L2aa_z
      execute list_to_blocks L2ab_z

      execute read_list_to_blocks

      execute sip_barrier
      execute server_barrier

      CALL DMAIN
#
#  Write the pert. T amplitudes and perturbed one particle density to 
#  block data file. 

      execute server_barrier
      execute blocks_to_list t1a_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab

      execute blocks_to_list l1a_old
      execute blocks_to_list L2old_aa
      execute blocks_to_list L2old_ab

      execute list_to_blocks  t1a_x
      execute list_to_blocks  T2aa_x
      execute list_to_blocks  T2ab_x

      execute list_to_blocks  t1a_y
      execute list_to_blocks  T2aa_y
      execute list_to_blocks  T2ab_y

      execute list_to_blocks  t1a_z
      execute list_to_blocks  T2aa_z
      execute list_to_blocks  T2ab_z

      execute list_to_blocks  l1a_x
      execute list_to_blocks L2aa_x
      execute list_to_blocks L2ab_x

      execute list_to_blocks  l1a_y
      execute list_to_blocks L2aa_y
      execute list_to_blocks L2ab_y

      execute list_to_blocks  l1a_z
      execute list_to_blocks L2aa_z
      execute list_to_blocks L2ab_z

      execute blocks_to_list DpqA_1
      execute blocks_to_list Dpqa_2

      execute server_barrier
      execute sip_barrier
      execute write_blocks_to_list
      execute sip_barrier

# done reading T and lambda

      ENDSIAL CCSD_resp_sym_RHF_1D
