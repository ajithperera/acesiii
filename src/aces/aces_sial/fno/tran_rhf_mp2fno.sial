#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                          SIAL TRAN_RHF_mp2fno
#
# Declare indeces 
# --------------- 
      index kiter    = 1, cc_iter
      index jiter    = 1, cc_iter
      index   kptr1  = 1, 2
      index   kptr2  = 1, 2
      index   kone   = 1, 1
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#                
      aoindex m      = 1, norb
      aoindex n      = 1, norb
      aoindex l      = 1, norb
      aoindex s      = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
#
# Declare arrays
# tran_xxii
      temp AOINT(mu,nu,lambda,sigma)
      temp V0xxxi(mu,nu,lambda,i)
      local L0xxxi(mu,nu,lambda,i)
      temp Txixx(mu,i,nu,lambda)
      temp Txxix(nu,mu,i,lambda)
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      served Vxixj(mu,i,nu,j)
      served Vxxjj(mu,nu,j1,j)
      served Vixxj(i,mu,nu,j)
# tran_piqj
      local Lxiqj(mu,i,q,j)
      temp Txiqj(mu,i,q,j)
      served Vxiqj(mu,i,q,j)
      local Lpiqj(p,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp T1piqj(p,i,q,j)
      served Vpiqj(p,i,q,j)
      served VSpipi(p1,i,p,i1)
      served ASpipi(a,i,a1,i1)
      served Apiqj(a,i,a1,i1)
#
# -----------------------------------------------------------
#
     PROC TRAN_XXII
#
     execute sip_barrier
#
     PARDO mu, nu, lambda
#
           allocate L0xxxi(mu,nu,lambda,*) 
#
           DO sigma
#
                 compute_integrals AOINT(mu,nu,lambda,sigma)
#
                 DO i
#
                    V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
                    L0xxxi(mu,nu,lambda,i) += V0xxxi(mu,nu,lambda,i) 
#
                 ENDDO i
#
           ENDDO sigma
#
           DO i
#
              Txixx(lambda,i,mu,nu) = L0xxxi(mu,nu,lambda,i) 
              Txxix(nu,mu,i,lambda) = L0xxxi(mu,nu,lambda,i)  
#
              DO i1
#
                 Txixi(lambda,i,mu,i1) = Txixx(lambda,i,mu,nu)*ca(nu,i1)
                 Txxii(nu,mu,i,i1)     = Txxix(nu,mu,i,lambda)*ca(lambda,i1)
                 Tixxi(i1,nu,lambda,i) = L0xxxi(mu,nu,lambda,i)*ca(mu,i1) 
#
                 prepare Vxixj(lambda,i,mu,i1) += Txixi(lambda,i,mu,i1)
                 prepare Vxxjj(nu,mu,i,i1)     += Txxii(nu,mu,i,i1) 
                 prepare Vixxj(i1,nu,lambda,i) += Tixxi(i1,nu,lambda,i) 
#
              ENDDO i1 
#
           ENDDO i
#
           deallocate L0xxxi(mu,nu,lambda,*) 
#
     ENDPARDO mu, nu, lambda 
#
     execute server_barrier
#
     ENDPROC TRAN_XXII
#
     PROC TRAN_PIQJ
#
     execute sip_barrier
#
     PARDO mu, i, j
#
           allocate Lxiqj(mu,i,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) i
#
              DO q
#
                 Txiqj(mu,i,q,j)  = Vxixj(mu,i,nu,j)*ca(nu,q)
                 Lxiqj(mu,i,q,j) += Txiqj(mu,i,q,j)
#
              ENDDO q
#
           ENDDO nu 
#
           DO q
#
              Txiqj(mu,i,q,j)         = Lxiqj(mu,i,q,j) 
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q
#
           deallocate Lxiqj(mu,i,*,j) 
#
     ENDPARDO mu, i, j
#
     execute sip_barrier
     execute server_barrier
#
     PARDO q, i, j
#
           allocate Lpiqj(*,i,q,j) 
#
           DO mu 
#
              REQUEST Vxiqj(mu,i,q,j) i 
#
              DO p
#
                 Tpiqj(p,i,q,j)  = Vxiqj(mu,i,q,j)*ca(mu,p)
                 Lpiqj(p,i,q,j) += Tpiqj(p,i,q,j)
#
              ENDDO p
#
           ENDDO mu 
#
           DO p
#
              Tpiqj(p,i,q,j)         = Lpiqj(p,i,q,j) 
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p
#
           deallocate Lpiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     execute sip_barrier
     execute server_barrier
#
     PARDO p, i, q, j 
           REQUEST                   Vpiqj(p,i,q,j) p 
           REQUEST                   Vpiqj(p,j,q,i) p 
           Tpiqj(p,i,q,j)          = Vpiqj(p,i,q,j)  
           T1piqj(p,i,q,j)         = Vpiqj(p,j,q,i)  
           Tpiqj(p,i,q,j)         -= T1piqj(p,i,q,j) 
           PREPARE VSpipi(p,i,q,j) = Tpiqj(p,i,q,j) 
#
     ENDPARDO p, i, q, j 

#    DISCARD Vxiqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIQJ
#    ------------------------------------------------------------------------ 
#
#    Main Program 
#
#    ------------------------------------------------------------------------ 
#
      execute sip_barrier
      CALL TRAN_XXII
      CALL TRAN_PIQJ
      execute server_barrier 
#
# Write transformed two-electron integrals to list 
# ------------------------------------------------ 
# 
      execute blocks_to_list VSpipi(p,i,p1,i1)   
      execute blocks_to_list Vpiqj(p,i,q,j)   
      execute write_blocks_to_list
      execute server_barrier
# 
# Done Write transformed two-electron integrals to list 
# ----------------------------------------------------- 
# 
#    ------------------------------------------------------------------------ 
# 
#
                           ENDSIAL TRAN_RHF_mp2fno
#
#    ------------------------------------------------------------------------ 
#
