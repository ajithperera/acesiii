#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL SCFGRAD       
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      INDEX NPERT     = 1, 2
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare one-particle density arrays 
# ----------------------------------- 
#
      distributed Dhfa(mu,nu) 
      distributed Dhfb(mu,nu) 
      distributed Whfa(mu,nu) 
      distributed Whfb(mu,nu) 

      distributed CA_P(mu,p)
      distributed CB_P(mu,q)
      distributed CA_M(mu,p)
      distributed CB_M(mu,q)

      local LDhfa(mu,nu) 
      local LDhfb(mu,nu) 
      static Spq(mu,nu) 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxx(mu,nu,lambda,sigma) 
      temp TSxxxx(mu,nu,lambda,sigma) 
      temp T1xxxx(mu,nu,lambda,sigma) 
      temp T2xxxx(mu,nu,lambda,sigma) 
      temp T3xxxx(mu,nu,lambda,sigma) 
      temp T4xxxx(mu,nu,lambda,sigma) 
      temp T5xxxx(mu,nu,lambda,sigma) 
      temp Txxxi(mu,nu,lambda,i) 
      temp T1xxxi(mu,nu,lambda,i) 
      temp T2xxxi(mu,nu,lambda,i) 
      temp T3xxxi(mu,nu,lambda,i) 
      temp T4xxxi(mu,nu,lambda,i) 
      temp TAxxxi(mu,nu,lambda,i) 
      temp TBxxxi(mu,nu,lambda,i) 
      temp Txxxj(mu,nu,lambda,j) 
      temp T1xxxj(mu,nu,lambda,j) 
      temp T2xxxj(mu,nu,lambda,j) 
      temp T3xxxj(mu,nu,lambda,j) 
      temp T4xxxj(mu,nu,lambda,j) 
      temp TAxxxj(mu,nu,lambda,j) 
      temp TBxxxj(mu,nu,lambda,j) 
      temp Txixx(mu,i,nu,lambda) 
      temp Txjxx(mu,j,nu,lambda) 
      temp Tixxx(i,mu,nu,lambda) 
      temp Tjxxx(j,mu,nu,lambda) 
      temp Ixi(mu,i) 
      temp I1xi(mu,i) 
      temp Ixj(mu,j) 
      temp I1xj(mu,j) 
      temp Tpq(mu,nu) 
      temp T1pq(mu,nu) 
      temp Txi(mu,i) 
      temp T1xi(mu,i) 
      temp Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Txx(mu,nu) 
      temp T1xx(mu,nu) 
      temp T2xx(mu,nu) 
      temp T3xx(mu,nu) 
      temp T4xx(mu,nu) 
      temp T5xx(mu,nu) 
      temp Txa(mu,p)
      temp Txb(mu,q)
#
# Declare served arrays 
# --------------------- 
#
      temp dx1(mu,nu,lambda,sigma)
      temp dy1(mu,nu,lambda,sigma)
      temp dz1(mu,nu,lambda,sigma)
      temp dx2(mu,nu,lambda,sigma)
      temp dy2(mu,nu,lambda,sigma)
      temp dz2(mu,nu,lambda,sigma)
      temp dx3(mu,nu,lambda,sigma)
      temp dy3(mu,nu,lambda,sigma)
      temp dz3(mu,nu,lambda,sigma)
      temp dx4(mu,nu,lambda,sigma)
      temp dy4(mu,nu,lambda,sigma)
      temp dz4(mu,nu,lambda,sigma)

      Temp TAO_2SOI_X(mu, nu, lambda, sigma)
      Temp TAO_2SOI_Y(mu, nu, lambda, sigma)
      Temp TAO_2SOI_Z(mu, nu, lambda, sigma)

      Served AO_2SOI_X(mu, nu, lambda, sigma)
      Served AO_2SOI_Y(mu, nu, lambda, sigma)
      Served AO_2SOI_Z(mu, nu, lambda, sigma)

      distributed HBx(mu,nu)
      distributed HBy(mu,nu)
      distributed HBz(mu,nu)
#
# Declare scalars 
# --------------- 
#
      scalar eleven  
      scalar rank 
      scalar NCOUNT
      scalar property
      scalar spin_den
      scalar asym
      Scalar Xtmp
      Scalar Xsum
      Scalar Ysum
      Scalar Zsum
      Scalar XXP
      Scalar YYP
      Scalar ZZP
      Scalar XXM
      Scalar YYM
      Scalar ZZM
      scalar scale
      scalar fd_width
      scalar inv_fd_width
      scalar FD_XX
      scalar FD_YY
      scalar FD_ZZ
#
      PROC WHFDENS
#     ------------
#
      PARDO mu, nu, i 
#
            Ixi(nu,i) = 0.0  
#
            DO i1 
#
               I1xi(nu,i) = ca(nu,i1)*fock_a(i,i1) 
               Ixi(nu,i) -= I1xi(nu,i) 
#
            ENDDO i1  
#
            Tpq(mu,nu)       = ca(mu,i)*Ixi(nu,i)
            PUT Whfa(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu, j
#
            Ixj(nu,j) = 0.0  
#
            DO j1 
#
               I1xj(nu,j) = cb(nu,j1)*fock_b(j,j1) 
               Ixj(nu,j) -= I1xj(nu,j) 
#
            ENDDO j1  
#
            Tpq(mu,nu)       = cb(mu,j)*Ixj(nu,j)
            PUT Whfb(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, j
      execute sip_barrier 
#
      ENDPROC WHFDENS
#     --------------
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      PARDO mu, nu, i
#
            Txi(nu,i)        = ca(nu,i)
            Tpq(mu,nu)       = ca(mu,i)*Txi(nu,i)
            PUT Dhfa(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j)        = cb(nu,j)
            Tpq(mu,nu)       = cb(mu,j)*Txj(nu,j)
            PUT Dhfb(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, j
      allocate LDhfa(*,*) 
      allocate LDhfb(*,*) 
      execute sip_barrier 
#
      DO mu 
      DO nu 
         GET Dhfa(mu,nu) 
         GET Dhfb(mu,nu) 
         LDhfa(mu,nu) = Dhfa(mu,nu) 
         LDhfb(mu,nu) = Dhfb(mu,nu) 
        #execute dump_amp ldhfa(mu,nu)
        #execute dump_amp ldhfb(mu,nu)
      ENDDO nu 
      ENDDO mu 
#
      ENDPROC HFDENS
#     --------------
#
      PROC D1TRANS
#     ------------
#
# Contract with the derivative integrals
# --------------------------------------
#
      execute get_my_rank rank 
      if rank == 0.0 
         DO mu 
         DO nu
            GET           DHFA(mu,nu)
            GET           DHFB(mu,nu)
            Tpq(mu,nu)  = DHFA(mu,nu)
            Tpq(mu,nu) += DHFB(mu,nu)
            Spq(mu,nu)  = Tpq(mu,nu) 
            EXECUTE HCONT1 Tpq(mu,nu)
         ENDDO nu
         ENDDO mu

         execute ecp_dercont Spq 
       endif 
#
# -----------------------------------------------------------------------------
#
      ENDPROC D1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
      PROC S1TRANS
#     ------------
#
# Contract with the derivative integrals
# --------------------------------------
#
      PARDO mu, nu
            GET           WHFa(mu,nu)
            GET           WHFb(mu,nu)
            Tpq(mu,nu)  = WHFa(mu,nu)
            Tpq(mu,nu) += WHFb(mu,nu)
            EXECUTE SCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu
#
# -----------------------------------------------------------------------------
#
      ENDPROC S1TRANS
#     ---------------
#
# ---------------------------------------------------------------------------
#
# Procedure DPQRSSEP computes the seperable part of the two-particle
# 'density' matrix.
#
      PROC DPQRSSEP
#     -------------
#
#          Get 1-particle pieces
#          ---------------------
#
           GET DHFa(mu,lambda)
           GET DHFa(mu,sigma)
           GET DHFa(mu,nu)
           GET DHFa(nu,sigma)
           GET DHFa(nu,lambda)
           GET DHFa(sigma,lambda)
#
           GET DHFb(mu,lambda)
           GET DHFb(mu,sigma)
           GET DHFb(mu,nu)
           GET DHFb(nu,sigma)
           GET DHFb(nu,lambda)
           GET DHFb(sigma,lambda)
#
#          HF only
#          -------
           Txx(nu,sigma)              = DHFa(nu,sigma) 
           Txx(nu,sigma)             += DHFb(nu,sigma) 
           T1xx(mu,lambda)            = DHFa(mu,lambda) 
           T1xx(mu,lambda)           += DHFb(mu,lambda) 

           Txxxx(mu,lambda,nu,sigma)  = T1xx(mu,lambda)^Txx(nu,sigma)
#
           Txx(nu,lambda)             = DHFa(nu,lambda) 
           T1xxxx(mu,lambda,nu,sigma) = DHFa(mu,sigma)^Txx(nu,lambda)
           T1xxxx(mu,lambda,nu,sigma)*= 0.5
           Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
           Txx(nu,lambda)             = DHFb(nu,lambda) 
           T1xxxx(mu,lambda,nu,sigma) = DHFb(mu,sigma)^Txx(nu,lambda)
           T1xxxx(mu,lambda,nu,sigma)*= 0.5
           Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
           Txx(sigma,lambda)          = DHFa(sigma,lambda) 
           T1xxxx(mu,lambda,nu,sigma) = DHFa(mu,nu)^Txx(sigma,lambda)
           T1xxxx(mu,lambda,nu,sigma)*= 0.5
           Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
           Txx(sigma,lambda)          = DHFb(sigma,lambda) 
           T1xxxx(mu,lambda,nu,sigma) = DHFb(mu,nu)^Txx(sigma,lambda)
           T1xxxx(mu,lambda,nu,sigma)*= 0.5
           Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
           Txxxx(mu,lambda,nu,sigma) *= 0.5
#
      ENDPROC DPQRSSEP
#     ----------------
#
# ---------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC D2TRANS_P
#     --------------
#
      PARDO mu, nu   
#
           DO lambda   
           DO sigma 
#
              IF mu < lambda  
              IF nu < sigma   
#
#             Get the separable part  
#             ----------------------
#
#             Get 1-particle pieces
#                ---------------------
#
#                HF only
#                -------
                 Txx(nu,sigma)              = LDHFa(nu,sigma) 
                 Txx(nu,sigma)             += LDHFb(nu,sigma) 
                 T1xx(mu,lambda)            = LDHFa(mu,lambda) 
                 T1xx(mu,lambda)           += LDHFb(mu,lambda) 

                 Txxxx(mu,lambda,nu,sigma)  = T1xx(mu,lambda)^Txx(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) *= 2.0  
#
                 T2xx(nu,lambda)            = LDHFa(nu,lambda) 
                 T1xxxx(mu,lambda,nu,sigma) = LDHFa(mu,sigma)^T2xx(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T3xx(nu,lambda)            = LDHFb(nu,lambda) 
                 T2xxxx(mu,lambda,nu,sigma) = LDHFb(mu,sigma)^T3xx(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T2xxxx(mu,lambda,nu,sigma)
#
                 T4xx(sigma,lambda)         = LDHFa(sigma,lambda) 
                 T3xxxx(mu,lambda,nu,sigma) = LDHFa(mu,nu)^T4xx(sigma,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T3xxxx(mu,lambda,nu,sigma)
#
                 T5xx(sigma,lambda)         = LDHFb(sigma,lambda) 
                 T4xxxx(mu,lambda,nu,sigma) = LDHFb(mu,nu)^T5xx(sigma,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T4xxxx(mu,lambda,nu,sigma)
#
#                Set up integrals
#                ----------------
                 execute der_int_setup dx1(mu,lambda,nu,sigma)
                 execute der_int_setup dy1(mu,lambda,nu,sigma)
                 execute der_int_setup dz1(mu,lambda,nu,sigma)
                 execute der_int_setup dx2(mu,lambda,nu,sigma)
                 execute der_int_setup dy2(mu,lambda,nu,sigma)
                 execute der_int_setup dz2(mu,lambda,nu,sigma)
                 execute der_int_setup dx3(mu,lambda,nu,sigma)
                 execute der_int_setup dy3(mu,lambda,nu,sigma)
                 execute der_int_setup dz3(mu,lambda,nu,sigma)
                 execute der_int_setup dx4(mu,lambda,nu,sigma)
                 execute der_int_setup dy4(mu,lambda,nu,sigma)
                 execute der_int_setup dz4(mu,lambda,nu,sigma)
#
#                Compute integral block
#                ----------------------
                 execute compute_derivative_integrals
#
#                Contract density with integral derivatives
#                ------------------------------------------
                 execute DCONT2 Txxxx(mu,lambda,nu,sigma)
#
              ENDIF # nu < sigma   
              ENDIF # mu < lambda  
#
           ENDDO sigma 
           ENDDO lambda   
#
      ENDPARDO mu, nu   
#
      PARDO mu, nu 
#
           DO lambda   
           DO sigma 
#
              IF mu == lambda  
              IF nu < sigma   
#
#                Get the separable part  
#                ----------------------
#
#                Get 1-particle pieces
#                ---------------------
#
#                HF only
#                -------
                 Txx(nu,sigma)              = LDHFa(nu,sigma) 
                 Txx(nu,sigma)             += LDHFb(nu,sigma) 
                 T5xx(mu,lambda)            = LDHFa(mu,lambda) 
                 T5xx(mu,lambda)           += LDHFb(mu,lambda) 

                 Txxxx(mu,lambda,nu,sigma)  = T5xx(mu,lambda)^Txx(nu,sigma)
#
                 T1xx(nu,lambda)            = LDHFa(nu,lambda) 
                 T1xxxx(mu,lambda,nu,sigma) = LDHFa(mu,sigma)^T1xx(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T2xx(nu,lambda)            = LDHFb(nu,lambda) 
                 T2xxxx(mu,lambda,nu,sigma) = LDHFb(mu,sigma)^T2xx(nu,lambda)
                 T2xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T2xxxx(mu,lambda,nu,sigma)
#
                 T3xx(sigma,lambda)         = LDHFa(sigma,lambda) 
                 T3xxxx(mu,lambda,nu,sigma) = LDHFa(mu,nu)^T3xx(sigma,lambda)
                 T3xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T3xxxx(mu,lambda,nu,sigma)
#
                 T4xx(sigma,lambda)         = LDHFb(sigma,lambda) 
                 T4xxxx(mu,lambda,nu,sigma) = LDHFb(mu,nu)^T4xx(sigma,lambda)
                 T4xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T4xxxx(mu,lambda,nu,sigma)
#
#                Set up integrals
#                ----------------
                 execute der_int_setup dx1(mu,lambda,nu,sigma)
                 execute der_int_setup dy1(mu,lambda,nu,sigma)
                 execute der_int_setup dz1(mu,lambda,nu,sigma)
                 execute der_int_setup dx2(mu,lambda,nu,sigma)
                 execute der_int_setup dy2(mu,lambda,nu,sigma)
                 execute der_int_setup dz2(mu,lambda,nu,sigma)
                 execute der_int_setup dx3(mu,lambda,nu,sigma)
                 execute der_int_setup dy3(mu,lambda,nu,sigma)
                 execute der_int_setup dz3(mu,lambda,nu,sigma)
                 execute der_int_setup dx4(mu,lambda,nu,sigma)
                 execute der_int_setup dy4(mu,lambda,nu,sigma)
                 execute der_int_setup dz4(mu,lambda,nu,sigma)
#
#                Compute integral block
#                ----------------------
                 execute compute_derivative_integrals
#
#                Contract density with integral derivatives
#                ------------------------------------------
                 execute DCONT2 Txxxx(mu,lambda,nu,sigma)
#
              ENDIF # nu < sigma   
              ENDIF # mu == lambda  
#
           ENDDO sigma 
           ENDDO lambda   
#
      ENDPARDO mu, nu 
#
      PARDO mu, nu 
#
           DO lambda   
           DO sigma 
#
              IF mu < lambda  
              IF nu == sigma   
#
#                Get the separable part  
#                ----------------------
#
#                Get 1-particle pieces
#                ---------------------
#
#                HF only
#                -------
                 Txx(nu,sigma)              = LDHFa(nu,sigma) 
                 Txx(nu,sigma)             += LDHFb(nu,sigma) 
                 T5xx(mu,lambda)            = LDHFa(mu,lambda) 
                 T5xx(mu,lambda)           += LDHFb(mu,lambda) 

                 Txxxx(mu,lambda,nu,sigma)  = T5xx(mu,lambda)^Txx(nu,sigma)
#
                 T1xx(nu,lambda)            = LDHFa(nu,lambda) 
                 T1xxxx(mu,lambda,nu,sigma) = LDHFa(mu,sigma)^T1xx(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T2xx(nu,lambda)            = LDHFb(nu,lambda) 
                 T2xxxx(mu,lambda,nu,sigma) = LDHFb(mu,sigma)^T2xx(nu,lambda)
                 T2xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T2xxxx(mu,lambda,nu,sigma)
#
                 T3xx(sigma,lambda)         = LDHFa(sigma,lambda) 
                 T3xxxx(mu,lambda,nu,sigma) = LDHFa(mu,nu)^T3xx(sigma,lambda)
                 T3xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T3xxxx(mu,lambda,nu,sigma)
#
                 T4xx(sigma,lambda)         = LDHFb(sigma,lambda) 
                 T4xxxx(mu,lambda,nu,sigma) = LDHFb(mu,nu)^T4xx(sigma,lambda)
                 T4xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T4xxxx(mu,lambda,nu,sigma)
#
#                Set up integrals
#                ----------------
                 execute der_int_setup dx1(mu,lambda,nu,sigma)
                 execute der_int_setup dy1(mu,lambda,nu,sigma)
                 execute der_int_setup dz1(mu,lambda,nu,sigma)
                 execute der_int_setup dx2(mu,lambda,nu,sigma)
                 execute der_int_setup dy2(mu,lambda,nu,sigma)
                 execute der_int_setup dz2(mu,lambda,nu,sigma)
                 execute der_int_setup dx3(mu,lambda,nu,sigma)
                 execute der_int_setup dy3(mu,lambda,nu,sigma)
                 execute der_int_setup dz3(mu,lambda,nu,sigma)
                 execute der_int_setup dx4(mu,lambda,nu,sigma)
                 execute der_int_setup dy4(mu,lambda,nu,sigma)
                 execute der_int_setup dz4(mu,lambda,nu,sigma)
#
#                Compute integral block
#                ----------------------
                 execute compute_derivative_integrals
#
#                Contract density with integral derivatives
#                ------------------------------------------
                 execute DCONT2 Txxxx(mu,lambda,nu,sigma)
#
              ENDIF # nu == sigma   
              ENDIF # mu < lambda  
#
           ENDDO sigma 
           ENDDO lambda   
#
      ENDPARDO mu, nu 
#
      PARDO mu, nu 
#
           DO lambda   
           DO sigma 
#
              IF mu == lambda  
              IF nu == sigma   
#
#                Get the separable part  
#                ----------------------
#
#                Get 1-particle pieces
#                ---------------------
#
#                HF only
#                -------
                 Txx(nu,sigma)              = LDHFa(nu,sigma) 
                 Txx(nu,sigma)             += LDHFb(nu,sigma) 
                 T5xx(mu,lambda)            = LDHFa(mu,lambda) 
                 T5xx(mu,lambda)           += LDHFb(mu,lambda) 

                 Txxxx(mu,lambda,nu,sigma)  = T5xx(mu,lambda)^Txx(nu,sigma)
#
                 T1xx(nu,lambda)            = LDHFa(nu,lambda) 
                 T1xxxx(mu,lambda,nu,sigma) = LDHFa(mu,sigma)^T1xx(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T2xx(nu,lambda)            = LDHFb(nu,lambda) 
                 T2xxxx(mu,lambda,nu,sigma) = LDHFb(mu,sigma)^T2xx(nu,lambda)
                 T2xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T2xxxx(mu,lambda,nu,sigma)
#
                 T3xx(sigma,lambda)         = LDHFa(sigma,lambda) 
                 T3xxxx(mu,lambda,nu,sigma) = LDHFa(mu,nu)^T3xx(sigma,lambda)
                 T3xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T3xxxx(mu,lambda,nu,sigma)
#
                 T4xx(sigma,lambda)         = LDHFb(sigma,lambda) 
                 T4xxxx(mu,lambda,nu,sigma) = LDHFb(mu,nu)^T4xx(sigma,lambda)
                 T4xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T4xxxx(mu,lambda,nu,sigma)
#
                 Txxxx(mu,lambda,nu,sigma) *= 0.5
#
#                Set up integrals
#                ----------------
                 execute der_int_setup dx1(mu,lambda,nu,sigma)
                 execute der_int_setup dy1(mu,lambda,nu,sigma)
                 execute der_int_setup dz1(mu,lambda,nu,sigma)
                 execute der_int_setup dx2(mu,lambda,nu,sigma)
                 execute der_int_setup dy2(mu,lambda,nu,sigma)
                 execute der_int_setup dz2(mu,lambda,nu,sigma)
                 execute der_int_setup dx3(mu,lambda,nu,sigma)
                 execute der_int_setup dy3(mu,lambda,nu,sigma)
                 execute der_int_setup dz3(mu,lambda,nu,sigma)
                 execute der_int_setup dx4(mu,lambda,nu,sigma)
                 execute der_int_setup dy4(mu,lambda,nu,sigma)
                 execute der_int_setup dz4(mu,lambda,nu,sigma)
#
#                Compute integral block
#                ----------------------
                 execute compute_derivative_integrals
#
#                Contract density with integral derivatives
#                ------------------------------------------
                 execute DCONT2 Txxxx(mu,lambda,nu,sigma)
#
              ENDIF # nu == sigma   
              ENDIF # mu == lambda  
#
           ENDDO sigma 
           ENDDO lambda   
#
      ENDPARDO mu, nu 
#
      ENDPROC D2TRANS_P
#     ----------------
#
        PROC GET_HBXYZ_Dipole
#       --------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier

           PARDO mu, nu

              EXECUTE return_x Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                 execute print_scalar one
#                 Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg

              PUT  HBx(mu,nu) = Tpq(mu,nu)

              EXECUTE return_y Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                 execute print_scalar one
#                 Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg

              PUT  HBy(mu,nu) = Tpq(mu,nu)

              EXECUTE return_z Tpq(mu,nu)
#begin_dbg
#              If mu > nu
#                execute print_scalar one
#                Tpq(mu, nu) *= -1.0
#              Endif
#              if mu == nu
#                execute  print_scalar two
#                execute symm_force_ij Tpq
#              endif
#end_dbg

              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu
        execute sip_barrier

        ENDPROC GET_HBXYZ_Dipole
#       --------------------

        PROC GET_HBXYZ_Angmom
#       --------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier

           PARDO mu, nu
              EXECUTE compute_angmom_xbatch Tpq(mu,nu)
              PUT  HBx(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_angmom_ybatch Tpq(mu,nu)
              PUT  HBy(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_angmom_zbatch Tpq(mu,nu)
              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu

         execute sip_barrier
#
       ENDPROC get_HBXYZ_Angmom
#      -----------------------

        PROC GET_HBXYZ_Spin_orbit
#       ------------------------
           CREATE HBX
           CREATE HBY
           CREATE HBZ
           execute sip_barrier

           PARDO mu, nu
              EXECUTE compute_1soi_xbatch Tpq(mu,nu)
              PUT  HBx(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_1soi_ybatch Tpq(mu,nu)
              PUT  HBy(mu,nu) = Tpq(mu,nu)
              EXECUTE compute_1soi_zbatch Tpq(mu,nu)
              PUT  HBz(mu,nu) = Tpq(mu,nu)
         ENDPARDO mu,nu

         execute sip_barrier
#
       ENDPROC get_HBXYZ_Spin_orbit
#      ----------------------------

       PROC GET_2P_SPIN_ORBIT
#      ----------------------

     PARDO mu, nu, lambda, sigma

               EXECUTE COMPUTE_2SOI_XBATCH TAO_2SOI_X(mu, nu, lambda, sigma)
               EXECUTE COMPUTE_2SOI_YBATCH TAO_2SOI_Y(mu, nu, lambda, sigma)
               EXECUTE COMPUTE_2SOI_ZBATCH TAO_2SOI_Z(mu, nu, lambda, sigma)

               PREPARE AO_2SOI_X(mu, nu, lambda, sigma) = TAO_2SOI_X(mu, nu, lambda, sigma)

               PREPARE AO_2SOI_Y(mu, nu, lambda, sigma) = TAO_2SOI_Y(mu, nu, lambda, sigma)

               PREPARE AO_2SOI_Z(mu, nu, lambda, sigma) = TAO_2SOI_Z(mu, nu, lambda, sigma)

     ENDPARDO mu, nu, lambda, sigma

     EXECUTE SERVER_BARRIER

     ENDPROC GET_2P_SPIN_ORBIT
#    -------------------------

# ----------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------- 
#
      PROC READ_CPM
#     -------------
      CREATE CA_P
      CREATE CB_P
      CREATE CA_M
      CREATE CB_M

      execute list_to_blocks CA_P
      execute list_to_blocks CB_P
      execute list_to_blocks CA_M
      execute list_to_blocks CB_M
      execute server_barrier
      execute read_list_to_blocks
      execute server_barrier
     
      ENDPROC READ_CPM
#     ---------------

      PROC  PICK_CP
#     -------------
         
         DO mu
         DO i 
            GET CA_P(mu,i)
            Txa(mu,i) = CA_P(mu,i)
            CA(mu,i) = Txi(mu,i) 
         ENDDO  i
         ENDDO mu

         DO mu
         DO j
            GET CB_P(mu,j)
            Txb(mu,j) = CB_P(mu,j)
            CB(mu,j) = Txb(mu,j) 
         ENDDO j
         ENDDO mu

         execute sip_barrier 

      ENDPROC  PICK_CP 
#     ---------------

      PROC  PICK_CM
#     -------------

         DO mu
         DO i
            GET CA_P(mu,i)
            Txa(mu,i) = CA_P(mu,i)
            CA(mu,i) = Txi(mu,i)
         ENDDO  i
         ENDDO mu

         DO mu
         DO j
            GET CB_P(mu,j)
            Txb(mu,j) = CB_P(mu,j)
            CB(mu,j) = Txb(mu,j)
         ENDDO j
         ENDDO mu

         execute sip_barrier

      ENDPROC  PICK_CM
#     ---------------

############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
# Create one-particle arrays 
# -------------------------- 

         CALL READ_CPM

         FD_WIDTH     = 200.0
         INV_FD_WIDTH = 1.0/FD_WIDTH
         SCALE        = 1000000.0
         INV_FD_WIDTH *= SCALE
         execute print_scalar INV_FD_WIDTH

         property = 10.0

         ASYM     = 0.0
         SPIN_DEN = 0.0

         if property == 10.0

            SPIN_DEN = 0.0
            call get_HBXYZ_Dipole
          endif

          if property == 10.0
             ASYM     = 1.0
             SPIN_DEN = 1.0
             call get_HBXYZ_spin_orbit
             call get_2p_spin_orbit
          endif
#bgn_debug
            if property == 30.0
               ASYM     = 1.0
               SPIN_DEN = 0.0
               call get_HBXYZ_Angmom
            endif
#end_debug
#
      NCOUNT = 0.0

      DO NPERT 

         NCOUNT += 1.0

         IF NCOUNT == 1.0
            CALL PICK_CP
         ENDIF

         IF NCOUNT == 2.0
           CALL PICK_CM
         ENDIF
         
      CREATE DHFa     
      CREATE DHFb     
      CREATE WHFa     
      CREATE WHFb     
      execute sip_barrier 
#
#     Compute the HF contribution to the weighted density matrix 
#     ---------------------------------------------------------- 
#
      call WHFDENS
#
#     Compute the HF density 
#     ---------------------- 
#
      CALL HFDENS
      execute sip_barrier
#
# Contract the density with the AO basis core Hamiltonian
# -------------------------------------------------------
#
      CALL D1TRANS
      CALL S1TRANS
#
# Contract the 'two-particle' contributions
# -----------------------------------------
      IF NCOUNT == 1.0
#         CALL D2TRANS_P
      ENDIF

      IF NCOUNT == 1.0
#         CALL D2TRANS_M
      ENDIF
      execute sip_barrier 

      ENDDO  NPERT

      FD_XX = XXP
      FD_XX -= XXM
      FD_XX *= inv_fd_width

      FD_YY = YYP
      FD_YY -= YYM
      FD_YY *= inv_fd_width

      FD_ZZ = ZZP
      FD_ZZ -= ZZM
      FD_ZZ *= inv_fd_width

      execute print_scalar FD_XX
      execute print_scalar FD_YY
      execute print_scalar FD_ZZ

      eleven = 11.0 
     #execute print_rel_info eleven ca # pinf 
#
                           ENDSIAL SCFGRAD       
#
###############################################################################
