
      SIAL TEST
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# -----------------------------
      Distributed CP(mu,p)
      Distributed MO_OVRLP(p,q)
      Distributed MO_OVRLP_OAVB(I, b)
      Distributed MO_OVRLP_OVAB(i,a)
      Distributed MO_OVRLP_VAOB(a,j)
      Distributed MO_OVRLP_VAVB(a,b)
      Distributed MO_OVRLP_OAOB(i,j)

      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
#
      served W2mebj_bb(j1,b1,b,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed l1a_old(i,a)
      distributed l1b_old(j,b)
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
      served L2old_aa(i,a,i1,a1)
      served L2old_bb(j,b,j1,b1)
      served L2old_ab(i,a,j,b)

#
      Temp TOAVB1(I,b)
      Temp TOAVB2(I,b)
      Temp TVAOB(A,j)
      Temp TVAVB1(A,b)
      Temp TVAVB2(A,b)
      Temp TOAOB1(I,j)
      Temp TOAOB2(I,j)
      Temp TDVAOA(A,I)
      Temp TDVBOB(b,j)
      Temp TDVAVA(A,A1)
      Temp TDVBVB(b,b1)
      Temp Tmp_pq(p,q)
      Temp TXP(mu,P)
      Scalar check_sum
      Scalar tmp_sum

# Declare served arrays
# ---------------------
      PROC READ_2EL
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj

      execute list_to_blocks                t1a_old
      execute list_to_blocks                t1b_old
      execute list_to_blocks                T2old_aa
      execute list_to_blocks                T2old_ab
      execute list_to_blocks                T2old_bb


      execute list_to_blocks  l1a_old
      execute list_to_blocks  l1b_old
      execute list_to_blocks L2old_aa
      execute list_to_blocks L2old_ab
      execute list_to_blocks L2old_bb

      execute read_list_to_blocks
      execute server_barrier
     ENDPROC READ_2EL


#--------------------------------
       create t1a_old
       create l1a_old
       create t1b_old
       create l1b_old
      execute sip_barrier
        
      CALL READ_2EL
#      PARDO j1, b1, b, j
#
#            REQUEST                        Vjbbj(j1,b1,b,j) j # +
#            REQUEST                        Vbbjj(b,b1,j1,j) j # -
#            Tjbbj(j1,b1,b,j)             = Vbbjj(b,b1,j1,j)
#            Tjbbj(j1,b1,b,j)            -= Vjbbj(j1,b1,b,j)
#            Tjbbj(j1,b1,b,j)            *= -1.0
#            PREPARE W2mebj_bb(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
#      ENDPARDO j1, b1, b, j

      PARDO j1, b1, b, j
            REQUEST                        Vjbbj(j1,b1,b,j) j # + 
            REQUEST                        Vbbjj(b,b1,j1,j) j # -

            Tjbbj(j1,b1,b,j)             = Vbbjj(b,b1,j1,j) 
            Tjbbj(j1,b1,b,j)            -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j)            *= -1.0
            PREPARE W2mebj_bb(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j

      ENDSIAL TEST
