#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL ROHF_HESS_PRELIM
#
# Reference amplitudes/energy correct 
# MO Fock matrix matches aces 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Final set of of fully transformed integrals INCLUDING the 4-virtual ones.
#
# ---------------------------------------------------------------------------
#
#                          Integral     Type
#                         ------------------------
#                         VSpipi       SERVED 
#                         Vaaii        SERVED  
#                         Viaai        SERVED  
#                         VSaaai       SERVED  
#                         VSqjqj       SERVED  
#                         Vbbjj        SERVED  
#                         Vjbbj        SERVED  
#                         VSbbbj       SERVED 
#                         Vbbii        SERVED  
#                         Vjbii        SERVED  
#                         Vbbai        SERVED 
#                         Vpiqj        SERVED 
#                         Vaajj        SERVED  
#                         Viabj        SERVED  
#                         Vaabj        SERVED  
#
#                         VSaaaa       SERVED  
#                         VSbbbb       SERVED  
#                         Vaabb        SERVED  
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Declare indices. 
# ---------------- 
#
     index   kiter  = 1, 100  
     index   iatom  = 1,  natoms  
     index   ix     = 1, 3  
     index   icenter= 1, 1  
     index   jatom  = 1,  natoms  
     index   jx     = 1, 3  
     index   jcenter= 1, 1  
#
     aoindex mu     = 1, norb
     aoindex nu     = 1, norb
     aoindex lambda = 1, norb
     aoindex sigma  = 1, norb
#
     moaindex i = baocc, eaocc
     moaindex i1= baocc, eaocc
     moaindex i2= baocc, eaocc
     moaindex i3= baocc, eaocc
#
     moaindex a = bavirt, eavirt
     moaindex a1= bavirt, eavirt
     moaindex a2= bavirt, eavirt
     moaindex a3= bavirt, eavirt
#
     mobindex j = bbocc, ebocc
     mobindex j1= bbocc, ebocc
     mobindex j2= bbocc, ebocc
     mobindex j3= bbocc, ebocc
#
     mobindex b = bbvirt, ebvirt
     mobindex b1= bbvirt, ebvirt
     mobindex b2= bbvirt, ebvirt
     mobindex b3= bbvirt, ebvirt
#
     moaindex p = baocc, eavirt
     moaindex p1= baocc, eavirt
     moaindex p2= baocc, eavirt
     moaindex p3= baocc, eavirt
#
     mobindex q = bbocc, ebvirt
     mobindex q1= bbocc, ebvirt
     mobindex q2= bbocc, ebvirt
     mobindex q3= bbocc, ebvirt
#
# Declare served arrays. 
# ----------------------
#
     served saoint(mu,nu,lambda,sigma) 
     static dflags(jatom,jx,jcenter) 
     static dflags2(jatom,jx) 
     temp thess(jatom,jx,iatom,ix) 
#
# Declare local arrays. 
# --------------------- 
      local TAOINT(mu,nu,lambda,sigma)
      local L1xxxi(mu,nu,lambda,i)
      local L2xxxi(mu,lambda,nu,i)
      local L3xxxi(lambda,mu,nu,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1)
      local Lixxi(i,mu,nu,i1)
      local Lxjxj(mu,j,nu,j1)
      local Lxxjj(mu,nu,j,j1)
      local Ljxxj(j,mu,nu,j1)
      local Lxxai(mu,nu,a,i)
      local Lxxbj(mu,nu,b,j)
      local Lxixj(mu,i,nu,j)
      local Lixxj(i,mu,nu,j)
      local Lxipi(mu,i,p,i1)
      local Lxaii(mu,a,i,i1)
      local Lixai(i,mu,a,i1)
      local L1xaai(mu,a,a1,i)
      local L2xaai(mu,a,a2,i)
      local Lxjqj(mu,j,q,j1)
      local Lxbjj(mu,b,j,j1)
      local Ljxbj(j,mu,b,j1)
      local Lxbbj(mu,b,b1,j)
      local Lxbii(mu,b,i,i1)
      local Lxbai(mu,b,a,i)
      local Lxiqj(mu,i,q,j)
      local Lxajj(mu,a,j,j1)
      local Lixbj(i,mu,b,j)
      local Lxabj(mu,a,b,j)
      local L1xbbj(mu,b,b1,j)
      local Lxxxa(mu,nu,lambda,a)
      local Lxxxb(mu,nu,lambda,b)
      local Lxxaa(mu,nu,a1,a)
      local Lxxbb(mu,nu,b1,b)
      local Lxaaa(mu,a,a1,a2)
      local Lxbbb(mu,b,b1,b2)
      local Lxabb(mu,a2,b1,b2)
      local Laiai(a,i,a1,i1)
      local Lbjbj(b,j,b1,j1)
      local Laibj(a,i,b,j)
#
# Declare distributed arrays. 
# --------------------------- 
#
     served VXxixi(mu,i,nu,i1) 
     served VXxixj(mu,i,nu,j) 
     served VXxjxj(mu,j,nu,j1) 
     served VXxipi(mu,i,a1,i1) 
     served VXxiqj(mu,i,b,j) 
     served VXxjqj(mu,j,b1,j1) 
     served VXpipi(a,i,a1,i1) 
     served VXpiqj(a,i,b,j) 
     served VXqjqj(b,j,b1,j1) 
#
     served Vxixi(mu,i,nu,i1) 
     served Vxixj(mu,i,nu,j) 
     served Vxjxj(mu,j,nu,j1) 
#
     served T1aiai_aa(a,i,a1,i1)#----|  
     served T1bjbj_bb(b,j,b1,j1)#    |  
     served T1aibj_ab(a,i,b,j)  #    |--> Unperturbed amplitudes   
#
     distributed t1yaa(a,i)       #       |    
     distributed t1ybb(b,j)#--------------|  
     served DTpppi(p,p1,p2,i)#-------|  
     served DTqqqj(q,q1,q2,j)#       |--> Transformed 2-el derivative integrals 
     served DTppqj(p,p1,q,j)#        |  
     served DTqqpi(q,q1,p,i)#--------|  
#
     served t2aa_old(a,i,a1,i1)#-----|   
     served t2aa_new(a,i,a1,i1)#     |   
     served t2bb_old(b,j,b1,j1)#     |   
     served t2bb_new(b,j,b1,j1)#     |   
     served t2ab_old(a,i,b,j)#       |   
     served t2ab_new(a,i,b,j)#       |--> Perturbed amplitudes    
     served T2yFullaa(a,i,a1,i1) 
     served T2yFullab(a,i,b,j) 
     served T2yFullbb(b,j,b1,j1) 
     served VXSFullaa(a,i,a1,i1) 
     served VXFullab(a,i,b,j) 
     served VXSFullbb(b,j,b1,j1) 
     distributed t1aa_old(a,i)#           |   
     distributed t1aa_new(a,i)#           |   
     distributed t1bb_old(b,j)#           |   
     distributed t1bb_new(b,j)#-----------|   
     distributed T1ai_a(a,i)  
     distributed T2ai_a(a,i)  
     distributed T1ai_b(b,j)  
     distributed T2ai_b(b,j)  
#
     served DTxxxi(mu,nu,lambda,i) 
     served DTxxxj(mu,nu,lambda,j) 
     served DTxxpi(mu,nu,p,i) 
     served DTxxqj(mu,nu,q,j) 
     served DTxppi(mu,p1,p,i) 
     served DTxqqj(mu,q1,q,j) 
     served DTxqpi(mu,q,p,i) 
     served DTxpqj(mu,p,q,j) 
#
     served T2aiai_aa(a,i,a1,i1) 
     served T2bjbj_bb(b,j,b1,j1) 
     served T2aibj_ab(a,i,b,j) 
#
     distributed Dij_a(i,i1)#-------------|  
     distributed Dij_b(j,j1)#             | 
     distributed Dab_a(a,a1)#             |  
     distributed Dab_b(b,b1)#             |--> Density   
     distributed Dai_a(a,i) #             |  
     distributed Dai_b(b,j)#--------------|  
     distributed Daiold_a(a,i) 
     distributed Daiold_b(b,j) 
     distributed Iij_a(i,i1) 
     distributed Iij_b(j,j1) 
     distributed Iai_a(a,i) 
     distributed Iai_b(b,j) 
     distributed Iia_a(i,a) 
     distributed Iia_b(j,b) 
     distributed Iab_a(a,a1) 
     distributed Iab_b(b,b1) 
     distributed Ipq_a(p,p1) 
     distributed Ipq_b(q,q1) 
     distributed Xai_a(a,i) 
     distributed Xai_b(b,j) 
     distributed Ixx(mu,nu) 
     distributed Ixx_a(mu,nu) 
     distributed Ixx_b(mu,nu) 
     distributed Dxx_a(mu,nu) 
     distributed Dxx_b(mu,nu) 
     distributed Dpq_a(p,p1) 
     distributed Dpq_b(q,q1) 
     distributed Ihf(mu,nu) 
     distributed Ihfa(mu,nu) 
     distributed Ihfb(mu,nu) 
     distributed Dhfa(mu,nu) 
     distributed Dhfb(mu,nu) 
     distributed Whfa(mu,nu) 
     distributed Whfb(mu,nu) 
     distributed Dhfmo_a(p,p1) 
     distributed Dhfmo_b(q,q1) 
#
     distributed Uxaa(p,p1) 
     distributed Uyaa(p,p1) 
     distributed Tyaa(p,p1) 
     distributed Uxbb(q,q1) 
     distributed Uybb(q,q1) 
     distributed Tybb(q,q1) 
     distributed Fxaa(p,p1) 
     distributed Fyaa(p,p1) 
     distributed Fxbb(q,q1) 
     distributed Fybb(q,q1) 
     distributed Fxai(a,i) 
     distributed Fxbj(b,j) 
     distributed Fya(p,p1) 
     distributed Fyb(q,q1) 
     distributed Fxa(p,p1) 
     distributed Fxb(q,q1) 
     distributed Sya(p,p1) 
     distributed Syb(q,q1) 
     distributed Sxa(p,p1) 
     distributed Sxb(q,q1) 
     distributed FA(p,p1) 
     distributed FB(q,q1) 
     distributed Qyai(a,i)  
     distributed Qybj(b,j)  
     distributed Qxai(a,i)  
     distributed Qxbj(b,j)  
#
     distributed QAByy(mu,sigma) 
     distributed QAyy(mu,sigma) 
     distributed QByy(mu,sigma) 
     distributed QABxx(mu,sigma) 
     distributed QAxx(mu,sigma) 
     distributed QBxx(mu,sigma) 
     distributed QAB(mu,sigma) 
     distributed QA(mu,sigma) 
     distributed QB(mu,sigma) 
     distributed Uyai(a,i)   
     distributed Uybj(b,j)   
     distributed Uxai(a,i)   
     distributed Uxbj(b,j)   
     distributed Uyaiold(a,i)   
     distributed Uybjold(b,j)   
     distributed Uxaiold(a,i)   
     distributed Uxbjold(b,j)   
#
     static Focknd_a(p,p1) 
     static Fockndb_a(p,p1) 
     static Focknd_b(q,q1) 
     static Fockao_a(mu,nu) 
     static Fockao_b(mu,nu) 
     static Fockmo_a(p,p1) 
     static Fockmob_a(p,p1) 
     static Fockmo_b(q,q1) 
     static SXai_b(q,q1) 
     static SXaib_a(p,p1) 
#
     distributed Dold_dd(a,i) 
     distributed Dnew_dd(a,i) 
     distributed Dold_ds(a,i) 
     distributed Dnew_ds(a,i) 
     distributed Dold_sd(i,i1) 
     distributed Dnew_sd(i,i1) 
#
     distributed Y8aa(p,p1) 
     distributed Y8bb(q,q1) 
     distributed Xa(p,p1) 
     distributed Xb(q,q1) 
     distributed c_a(mu,p)
     distributed c_b(mu,q) 
     static SFya(p,p1) 
     static SFyb(q,q1) 
     static epsya(p,p1) 
     static epsyb(q,q1) 
     distributed cya(mu,p) 
     distributed cyb(mu,q) 
     distributed dhfya(mu,nu) 
     distributed dhfyb(mu,nu) 
     distributed whfya(mu,nu) 
     distributed whfyb(mu,nu) 
     distributed h1_a(p,p1) 
     distributed h1_b(q,q1) 
#
# Declare arrays used in the transformation of the two-electron integrals. 
# ------------------------------------------------------------------------ 
#
      served VSpipi(p1,i,p,i1)
      served Vpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
      served VSaaaa(a,a1,a2,a3)
#
      served VSqjqj(q1,j,q,j1)
      served Vqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
      served VSbbbb(b,b1,b2,b3)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
      served Vaabb(a,a1,b,b1)
      temp Txjxj(mu,j1,lambda,j)
      temp T1xjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp T1xxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp T1jxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp T1xjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp T1jxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp T1xbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp T1jbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp T1bbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp T1xbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp T1bbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
      temp Txixj(mu,i,nu,j)
      temp T1xixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp T1xiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp T1piqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp T1xajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp T1aajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp T1xabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp T1ixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp T1iabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
      temp T1aabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp T1xbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp T1bbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp T1jbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp T1xbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
      temp T1bbai(b,b1,a,i)
#
      temp Taaai(a,a1,a2,i)
      temp T1aaai(a,a1,a2,i)
      temp Txxai(mu,nu,a,i)
      temp Txaai(mu,a,a1,i)
      temp T1xaai(mu,a,a1,i)
      temp Txaii(mu,a,i,i1)
      temp T1xaii(mu,a,i,i1)
      temp Tiaai(i,a,a1,i1)
      temp T1iaai(i,a,a1,i1)
      temp Taaii(a,a1,i,i1)
      temp T1aaii(a,a1,i,i1)
      temp T1xxai(mu,nu,a,i)
      temp Tixai(i,mu,a,i1)
      temp T1ixai(i,mu,a,i1)
      temp Txipi(mu,i,p1,i1)
      temp T1xipi(mu,i,p1,i1)
      temp Tpipi(p,i,p1,i1)
      temp T1pipi(p,i,p1,i1)
      temp T1xxbj(mu,nu,b,j)
#
      temp Txxij(mu,nu,i,j)
      temp T1xxij(mu,nu,i,j)
      temp T1ixxj(i,mu,nu,j)
      temp Txxxi(mu,nu,lambda,i)
      temp T1xxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp T1xxxj(mu,nu,lambda,j)
      temp Txixi(mu,i,nu,i1)
      temp T1xixi(mu,i,nu,i1)
      temp Txxii(mu,nu,i1,i)
      temp T1xxii(mu,nu,i1,i)
      temp Tixxi(i1,mu,nu,i)
      temp T1ixxi(i1,mu,nu,i)
#
      temp Txxxa(mu,nu,lambda,a)
      temp T1xxxa(mu,nu,lambda,a)
      temp Txxaa(mu,nu,a1,a)
      temp T1xxaa(mu,nu,a1,a)
      temp Txaaa(mu,a2,a1,a)
      temp T1xaaa(mu,a2,a1,a)
      temp Taaaa(a3,a2,a1,a)
      temp T1aaaa(a3,a2,a1,a)
#
      temp Txxxb(mu,nu,lambda,b)
      temp T1xxxb(mu,nu,lambda,b)
      temp Txxbb(mu,nu,b1,b)
      temp T1xxbb(mu,nu,b1,b)
      temp Txbbb(mu,b2,b1,b)
      temp T1xbbb(mu,b2,b1,b)
      temp Tbbbb(b3,b2,b1,b)
      temp T1bbbb(b3,b2,b1,b)
#
      temp Txabb(mu,a2,b1,b)
      temp T1xabb(mu,a2,b1,b)
      temp Taabb(a3,a2,b1,b)
      temp T1aabb(a3,a2,b1,b)
#
      temp tiiaa(i,i1,a,a1) 
      temp t1iiaa(i,i1,a,a1) 
      temp taiia(a,i,i1,a1) 
      temp t1aiia(a,i,i1,a1) 
#
      temp tjjbb(j,j1,b,b1) 
      temp t1jjbb(j,j1,b,b1) 
      temp tbjjb(b,j,j1,b1) 
      temp t1bjjb(b,j,j1,b1) 
#
# Arrays used in 'direct' computation of Vabcd terms.
# ---------------------------------------------------
#
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
     served VT_aa(a,i,a1,i1)
     served VT_ab(a,i,b,j)
     served VT_bb(b,j,b1,j1)
     distributed VD_aa(mu,nu)
     distributed VDX_aa(mu,nu)
     distributed VD_bb(mu,nu)
     distributed VDX_bb(mu,nu)
     distributed D_aa(mu,nu)
     distributed D_bb(mu,nu)
     distributed VDD_aa(a,a1)
     distributed VDD_bb(b,b1)
     distributed VXX_aa(a,a1)
     distributed VXX_bb(b,b1)
     local LLaiai(a,i,a1,i1)
     local LLbjbj(b,j,b1,j1)
     local LLaibj(a,i,b,j)
     local Lxiai(lambda,i,a1,i1)
     local Lxjbj(lambda,j,b1,j1)
     local Lxibj(lambda,i,b,j)
     local L1xixi(mu,i,nu,i1)
     local L1xixj(mu,i,nu,j)
     local L1xjxj(mu,j,nu,j1)
     temp  Taixi(a,i,nu,i1)
     temp  T1aixi(a,i,nu,i1)
     temp  Tbjxj(b,j,nu,j1)
     temp  T1bjxj(b,j,nu,j1)
     temp  Taixj(a,i,nu,j)
     temp  T1aixj(a,i,nu,j)
#
# Declare integral arrays
# ------------------------
#
      served AOINT(mu,nu,lambda,sigma)
#
# Declare temporary arrays. 
# ------------------------- 
#
     temp Txxxp(mu,nu,lambda,p) 
     temp T1xxxp(mu,nu,lambda,p) 
     temp Txxpp(mu,nu,p1,p) 
     temp T1xxpp(mu,nu,p1,p) 
     temp Txppp(mu,p2,p1,p) 
     temp T1xppp(mu,p2,p1,p) 
     temp Tpppp(p3,p2,p1,p) 
     temp T1pppp(p3,p2,p1,p) 
     temp T2pppp(p3,p2,p1,p) 
     temp T3pppp(p3,p2,p1,p) 
#
     temp Txxxq(mu,nu,lambda,q) 
     temp T1xxxq(mu,nu,lambda,q) 
     temp Txxqq(mu,nu,q1,q) 
     temp T1xxqq(mu,nu,q1,q) 
     temp Txqqq(mu,q2,q1,q) 
     temp T1xqqq(mu,q2,q1,q) 
     temp Tqqqq(q3,q2,q1,q) 
     temp T1qqqq(q3,q2,q1,q) 
     temp T2qqqq(q3,q2,q1,q) 
     temp T3qqqq(q3,q2,q1,q) 
#
     temp Txpqq(mu,p,q1,q) 
     temp T1xpqq(mu,p,q1,q) 
     temp Tppqq(p1,p,q1,q) 
     temp T1ppqq(p1,p,q1,q) 
     temp T2ppqq(p1,p,q1,q) 
     temp Tqqpp(q,q1,p,p1) 
     temp T1qqpp(q,q1,p,p1) 
     temp T2qqpp(q,q1,p,p1) 
#
     temp Taiai(a,i,a1,i1) 
     temp T1aiai(a,i,a1,i1) 
     temp T2aiai(a,i,a1,i1) 
     temp T3aiai(a,i,a1,i1) 
     temp T4aiai(a,i,a1,i1) 
     temp Tbjbj(b,j,b1,j1) 
     temp T1bjbj(b,j,b1,j1) 
     temp T2bjbj(b,j,b1,j1) 
     temp T3bjbj(b,j,b1,j1) 
     temp T4bjbj(b,j,b1,j1) 
     temp Taibj(a,i,b,j) 
     temp T1aibj(a,i,b,j) 
     temp T2aibj(a,i,b,j) 
#
     temp Taiii(a,i,i1,i2)  
     temp T1aiii(a,i,i1,i2) 
     temp Taijj(a,i,j1,j) 
     temp T1aijj(a,i,j1,j) 
     temp Tbjjj(b,j,j2,j1)  
     temp T1bjjj(b,j,j2,j1) 
     temp Tiibj(i1,i,b,j)  
     temp T1iibj(i1,i,b,j) 
#
     temp Txiai(mu,i,a1,i1)
     temp Txjbj(mu,j,b1,j1) 
     temp Txibj(mu,i,b,j) 
     temp Txxxx(mu,lambda,nu,sigma) 
     temp T1xxxx(mu,lambda,nu,sigma) 
     temp Txxpi(mu,nu,p,i) 
     temp Txxqj(mu,nu,q,j) 
     temp Txppi(mu,p1,p,i) 
     temp Txqqj(mu,q1,q,j) 
     temp Txqpi(mu,q,p,i) 
     temp Txpqj(mu,p,q,j) 
     temp Tpppi(p,p1,p2,i) 
     temp Tqqqj(q,q1,q2,j) 
     temp Tppqj(p,p1,q,j) 
     temp Tqqpi(q,q1,p,i) 
#
     temp T1pppi(p,p1,p2,i) 
     temp T1qqqj(q,q1,q2,j) 
     temp T1ppqj(p,p1,q,j) 
     temp T1qqpi(q,q1,p,i) 
#
     temp Tii(i,i1) 
     temp T1ii(i,i1) 
     temp Tjj(j,j1) 
     temp T1jj(j,j1) 
     temp Taa(a,a1) 
     temp T1aa(a,a1) 
     temp Tbb(b,b1) 
     temp T1bb(b,b1) 
     temp Tai(a,i) 
     temp T1ai(a,i) 
     temp Tbj(b,j)
     temp T1bj(b,j)
     temp Tia(i,a) 
     temp T1ia(i,a) 
     temp Tjb(j,b) 
     temp T1jb(j,b) 
     temp Txi(mu,i) 
     temp T1xi(mu,i) 
     temp Txj(mu,j) 
     temp T1xj(mu,j) 
     temp Txx(mu,nu) 
     temp Txa(mu,a) 
     temp Txb(mu,b) 
     temp tpp(p,p1) 
     temp t1pp(p,p1) 
     temp t2pp(p,p1) 
     temp t3pp(p,p1) 
     temp tqq(q,q1) 
     temp t1qq(q,q1) 
     temp t2qq(q,q1) 
     temp tpi(p,i) 
     temp t1pi(p,i) 
     temp tqj(q,j) 
     temp t1qj(q,j) 
#
     temp t1xx(mu,nu) 
     temp t2xx(mu,nu) 
     temp tpx(p,mu) 
     temp t1px(p,mu) 
     temp tqx(q,mu) 
     temp t1qx(q,mu) 
     temp txp(mu,p) 
     temp t1xp(mu,p) 
     temp txq(mu,q) 
     temp t1xq(mu,q) 
     temp tax(a,sigma) 
     temp tbx(b,sigma) 
#
# Declare local arrays. 
# --------------------- 

     temp daoint(mu,nu,lambda,sigma)
     temp faoint(mu,nu,lambda,sigma)
     local D2(mu,lambda,nu,sigma)  
     local L1xxxp(mu,nu,lambda,p) 
     local L1xxxq(mu,nu,lambda,q) 
     local Lxxpp(mu,nu,p1,p) 
     local Lxxqq(mu,nu,q1,q) 
     local Lxppp(mu,p2,p1,p) 
     local Lxqqq(mu,q2,q1,q) 
     local Lxpqq(mu,p,q1,q) 
#
     local L1aiai(a,i2,a1,i1) 
     local L1aibj(a,i2,b,j) 
     local L1bjai(b,j2,a,i) 
     local L1bjbj(b,j2,b1,j1) 
     local L2aiai(a2,i,a1,i1) 
     local L2aibj(a1,i,b,j) 
     local L2bjbj(b2,j,b1,j1) 
     local L2bjai(b1,j,a,i) 
     local Dxxxi(mu,lambda,nu,i) 
     local Dxxxj(mu,lambda,nu,j) 
     local Exxpi(mu,lambda,p,i) 
     local Exxqj(mu,lambda,q,j) 
     local Fxppi(mu,p1,p,i) 
     local Fxqpi(mu,q,p,i) 
     local Fxqqj(mu,q1,q,j) 
     local Fxpqj(mu,p,q,j) 
     local Fpppi(p2,p1,p,i) 
     local Fqqqj(q2,q1,q,j) 
     local Fqqpi(q1,q,p,i) 
     local Fppqj(p1,p,q,j) 
#
     distributed zeta_a(p,p1) 
     distributed zeta_b(q,q1) 
     distributed zeta(mu,nu)  
#
# Declare served arrays used only in the gradient formation. 
# ---------------------------------------------------------- 
#
      served dx1(mu,nu,lambda,sigma)
      served dy1(mu,nu,lambda,sigma)
      served dz1(mu,nu,lambda,sigma)
      served dx2(mu,nu,lambda,sigma)
      served dy2(mu,nu,lambda,sigma)
      served dz2(mu,nu,lambda,sigma)
      served dx3(mu,nu,lambda,sigma)
      served dy3(mu,nu,lambda,sigma)
      served dz3(mu,nu,lambda,sigma)
      served dx4(mu,nu,lambda,sigma)
      served dy4(mu,nu,lambda,sigma)
      served dz4(mu,nu,lambda,sigma)
#
# Declare scalars. 
# ---------------- 
#
     scalar eold  
     scalar enew 
     scalar ecrit 
     scalar esum 
     scalar etemp 
     scalar ediff 
     scalar ecorra 
     scalar ecorrb 
     scalar ecorraa 
     scalar ecorrbb 
     scalar ecorrab 
     scalar ecorrT 
     scalar hessxy 
     scalar phessxy 
#
#    ------------------------------------------------------------------------
#
#    Create the distributed two-particle transformed integral arrays.
#
     PROC CREATE_MOINTS

        ecrit = cc_conv
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     ENDPROC CREATE_MOINTS
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
     #execute list_to_blocks                VSaaaa
     #execute list_to_blocks                VSbbbb
     #execute list_to_blocks                Vaabb
      execute read_list_to_blocks
      execute server_barrier 
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC VY_UY
#     ----------
#
#     Add contributions to derivative MO integrals from derivatives of coefficients.
#     ------------------------------------------------------------------------------
#
#     alpha-alpha first
#     -----------------
#
      PARDO a, a1, i, i1
#
            REQUEST             DTpppi(a,i,a1,i1) a 
            REQUEST             DTpppi(a,i1,a1,i) a 
#
            tpppp(a,i,a1,i1)  = DTpppi(a,i,a1,i1)
            t1pppp(a,i,a1,i1) = DTpppi(a,i1,a1,i)
            tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            DO a2
#
               REQUEST             VSaaai(a,a2,a1,i1) a 
               REQUEST             VSaaai(a1,a2,a,i) a 
               REQUEST             VSpipi(a2,i,a1,i1) i 
               REQUEST             VSpipi(a,i,a2,i1) i 
               GET                 Uyaa(a2,i1)
               GET                 Uyaa(a2,i)
               GET                 Uyaa(a2,a1)
               GET                 Uyaa(a2,a)
#
               t1pppp(a,i,a1,i1) = VSpipi(a2,i,a1,i1)*Uyaa(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a2,i1)*Uyaa(a2,a1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*Uyaa(a2,i)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSaaai(a1,a2,a,i)*Uyaa(a2,i1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO i2
#
               REQUEST             VSpipi(i2,i,a1,i1) i 
               REQUEST             VSpipi(a,i,i2,i1) i 
               REQUEST             VSpipi(a,i2,a1,i1) a 
               REQUEST             VSpipi(a,i,a1,i2) a 
               GET                 Uyaa(i2,a)
               GET                 Uyaa(i2,a1)
               GET                 Uyaa(i2,i)
               GET                 Uyaa(i2,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*Uyaa(i2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,i2,i1)*Uyaa(i2,a1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i2,a1,i1)*Uyaa(i2,i)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a1,i2)*Uyaa(i2,i1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            execute energy_denominator     tpppp(a,i,a1,i1)
            PREPARE T2yFullaa(a,i,a1,i1) = tpppp(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
#
#     beta-beta spin next
#     -------------------
#
      PARDO b, b1, j, j1
#
            REQUEST DTqqqj(b,j,b1,j1) b 
            REQUEST DTqqqj(b,j1,b1,j) b 
#
            tqqqq(b,j,b1,j1)  = DTqqqj(b,j,b1,j1)
            t1qqqq(b,j,b1,j1) = DTqqqj(b,j1,b1,j)
            tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            DO b2
#
               REQUEST             VSqjqj(b2,j,b1,j1) j 
               REQUEST             VSqjqj(b,j,b2,j1) b 
               REQUEST             VSbbbj(b,b2,b1,j1) b 
               REQUEST             VSbbbj(b1,b2,b,j) b 
               GET                 Uybb(b2,b)
               GET                 Uybb(b2,b1)
               GET                 Uybb(b2,j)
               GET                 Uybb(b2,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b2,j,b1,j1)*Uybb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b2,j1)*Uybb(b2,b1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b,b2,b1,j1)*Uybb(b2,j)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b1,b2,b,j)*Uybb(b2,j1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO j2
#
               REQUEST             VSqjqj(j2,j,b1,j1) j 
               REQUEST             VSqjqj(b,j,j2,j1) b 
               REQUEST             VSqjqj(b,j2,b1,j1) b 
               REQUEST             VSqjqj(b,j,b1,j2) b 
               GET                 Uybb(j2,b)
               GET                 Uybb(j2,b1)
               GET                 Uybb(j2,j)
               GET                 Uybb(j2,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(j2,j,b1,j1)*Uybb(j2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,j2,j1)*Uybb(j2,b1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j2,b1,j1)*Uybb(j2,j)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b1,j2)*Uybb(j2,j1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            execute energy_denominator     tqqqq(b,j,b1,j1)
            PREPARE T2yFullbb(b,j,b1,j1) = tqqqq(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
#     alpha-beta spin last
#     --------------------
#
      PARDO a, b, i, j
#
            REQUEST          DTppqj(a,i,b,j) a 
            tppqq(a,i,b,j) = DTppqj(a,i,b,j)
#
            DO a2
#
               REQUEST           Vpiqj(a2,i,b,j) b 
               REQUEST           Vaabj(a,a2,b,j) b 
               GET               Uyaa(a2,a)
               GET               Uyaa(a2,i)
#
               t1ppqq(a,i,b,j) = Vpiqj(a2,i,b,j)*Uyaa(a2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               t1ppqq(a,i,b,j) = Vaabj(a,a2,b,j)*Uyaa(a2,i)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2
#
            DO i2
#
               REQUEST           Vpiqj(i2,i,b,j) b 
               REQUEST           Vpiqj(a,i2,b,j) a 
               GET               Uyaa(i2,a)
               GET               Uyaa(i2,i)
#
               t1ppqq(a,i,b,j) = Vpiqj(i2,i,b,j)*Uyaa(i2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i2,b,j)*Uyaa(i2,i)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2
#
            DO b2
#
               REQUEST           Vpiqj(a,i,b2,j) a 
               REQUEST           Vbbai(b,b2,a,i) i 
               GET               Uybb(b2,b)
               GET               Uybb(b2,j)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b2,j)*Uybb(b2,b)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               t1ppqq(a,i,b,j) = Vbbai(b,b2,a,i)*Uybb(b2,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2
#
            DO j2
#
               REQUEST           Vpiqj(a,i,j2,j) a 
               REQUEST           Vpiqj(a,i,b,j2) a 
               GET               Uybb(j2,b)
               GET               Uybb(j2,j)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,j2,j)*Uybb(j2,b)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b,j2)*Uybb(j2,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2
#
            execute energy_denominator   tppqq(a,i,b,j)
            PREPARE T2yFullab(a,i,b,j) = tppqq(a,i,b,j)
#
      ENDPARDO a, b, i, j
      execute sip_barrier
      execute server_barrier
#
      ENDPROC VY_UY
#     -------------
#
# ----------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSIJ
#     -----------
#
#     Create distributed denisty arrays. 
#     --------------------------------- 
#
      create Dij_a 
      create Dij_b 
      create Dpq_a 
      create Dpq_b 
#
      execute sip_barrier 
#
# ---------------------------------------------------------------------------
#
#     Start Dij_a
#     -----------
#
      PARDO a, a1, i1
#
            allocate L1aiai(a,*,a1,i1)
#
            DO i2
#
               REQUEST              T1aiai_aa(a,i2,a1,i1) a 
               L1aiai(a,i2,a1,i1) = T1aiai_aa(a,i2,a1,i1)
#
            ENDDO i2
#
            DO i
#
               REQUEST T1aiai_aa(a,i,a1,i1) a 
#
               DO i2
#
                  Tii(i,i2)        = T1aiai_aa(a,i,a1,i1)*L1aiai(a,i2,a1,i1)
                  Tii(i,i2)       *= -0.5
                  PUT Dij_a(i,i2) += Tii(i,i2)
#
               ENDDO i2
#
            ENDDO i
#
            deallocate L1aiai(a,*,a1,i1)
#
      ENDPARDO a, a1, i1
#
      PARDO a, b, j
#
            allocate L1aibj(a,*,b,j)
#
            DO i2
#
               REQUEST            T1aibj_ab(a,i2,b,j) a 
               L1aibj(a,i2,b,j) = T1aibj_ab(a,i2,b,j)
#
            ENDDO i2
#
            DO i
#
               REQUEST T1aibj_ab(a,i,b,j) a 
#
               DO i2
#
                  Tii(i,i2)        = T1aibj_ab(a,i,b,j)*L1aibj(a,i2,b,j)
                  Tii(i,i2)       *= -1.0
                  PUT Dij_a(i,i2) += Tii(i,i2)
#
               ENDDO i2
#
            ENDDO i
#
            deallocate L1aibj(a,*,b,j)
#
      ENDPARDO a, b, j
#
      PARDO i, i1 
#
            Tii(i,i1) = 0.0 
#
            DO a 
#
               GET          T1ai_a(a,i)  
               GET          T1ai_a(a,i1)  
               tai(a,i)   = T1ai_a(a,i) 
               T1ii(i,i1) = tai(a,i)*T1ai_a(a,i1) 
               Tii(i,i1) -= T1ii(i,i1)
#
            ENDDO a 
#
            PUT Dij_a(i,i1) += Tii(i,i1) 
#
      ENDPARDO i, i1 
#
#     Finish Dij_a
#     ------------
#
#     Start Dij_b
#     -----------
#
      PARDO b, b1, j1
#
            allocate L1bjbj(b,*,b1,j1)
#
            DO j2
#
               REQUEST              T1bjbj_bb(b,j2,b1,j1) b 
               L1bjbj(b,j2,b1,j1) = T1bjbj_bb(b,j2,b1,j1)
#
            ENDDO j2
#
            DO j
#
               REQUEST T1bjbj_bb(b,j,b1,j1) b 
#
               DO j2
#
                  Tjj(j,j2)        = T1bjbj_bb(b,j,b1,j1)*L1bjbj(b,j2,b1,j1)
                  Tjj(j,j2)       *= -0.5
                  PUT Dij_b(j,j2) += Tjj(j,j2)
#
               ENDDO j2
#
            ENDDO j
#
            deallocate L1bjbj(b,*,b1,j1)
#
      ENDPARDO b, b1, j1
#
      PARDO b, a, i
#
            allocate L1bjai(b,*,a,i)
#
            DO j2
#
               REQUEST            T1aibj_ab(a,i,b,j2) a 
               L1bjai(b,j2,a,i) = T1aibj_ab(a,i,b,j2)
#
            ENDDO j2
#
            DO j
#
               REQUEST T1aibj_ab(a,i,b,j) a
#
               DO j2
#
                  Tjj(j,j2)        = T1aibj_ab(a,i,b,j)*L1bjai(b,j2,a,i)
                  Tjj(j,j2)       *= -1.0
                  PUT Dij_b(j,j2) += Tjj(j,j2)
#
               ENDDO j2
#
            ENDDO j
#
            deallocate L1bjai(b,*,a,i)
#
      ENDPARDO b, a, i
#
      PARDO j, j1 
#
            Tjj(j,j1) = 0.0 
#
            DO b 
#
               GET          T1ai_b(b,j)  
               GET          T1ai_b(b,j1)  
               tbj(b,j)   = T1ai_b(b,j) 
               T1jj(j,j1) = tbj(b,j)*T1ai_b(b,j1) 
               Tjj(j,j1) -= T1jj(j,j1)
#
            ENDDO b 
#
            PUT Dij_b(j,j1) += Tjj(j,j1) 
#
      ENDPARDO j, j1 
#
#     Finish Dij_b
#     ------------
#
# ---------------------------------------------------------------------------
#
      ENDPROC DENSIJ
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSAB
#     -----------
#
# ---------------------------------------------------------------------------
#
#     Create distributed denisty arrays. 
#     --------------------------------- 
#
      create Dab_a 
      create Dab_b 
#
      execute sip_barrier 
#
#     Start Dab_a
#     -----------
#
      PARDO i, i1, a1
#
            allocate L2aiai(*,i,a1,i1)
#
            DO a2
#
               REQUEST              T1aiai_aa(a2,i,a1,i1) a1 
               L2aiai(a2,i,a1,i1) = T1aiai_aa(a2,i,a1,i1)
#
            ENDDO a2
#
            DO a
#
               REQUEST T1aiai_aa(a,i,a1,i1) a 
#
               DO a2
#
                  Taa(a,a2)        = T1aiai_aa(a,i,a1,i1)*L2aiai(a2,i,a1,i1)
                  Taa(a,a2)       *= 0.5
                  PUT Dab_a(a,a2) += Taa(a,a2)
#
               ENDDO a2
#
            ENDDO a
#
            deallocate L2aiai(*,i,a1,i1)
#
      ENDPARDO i, i1, a1
#
      PARDO i, j, b
#
            allocate L2aibj(*,i,b,j)
#
            DO a1
#
               REQUEST            T1aibj_ab(a1,i,b,j) a1
               L2aibj(a1,i,b,j) = T1aibj_ab(a1,i,b,j)
#
            ENDDO a1
#
            DO a
#
               REQUEST T1aibj_ab(a,i,b,j) a 
#
               DO a1
#
                  Taa(a,a1)        = T1aibj_ab(a,i,b,j)*L2aibj(a1,i,b,j)
                  PUT Dab_a(a,a1) += Taa(a,a1)
#
               ENDDO a1
#
            ENDDO a
#
            deallocate L2aibj(*,i,b,j)
#
      ENDPARDO i, j, b
#
      PARDO a, a1 
#
            Taa(a,a1) = 0.0 
#
            DO i 
#
               GET          T1ai_a(a,i) 
               GET          T1ai_a(a1,i) 
               tai(a,i)   = T1ai_a(a,i) 
               T1aa(a,a1) = tai(a,i)*T1ai_a(a1,i) 
               Taa(a,a1) += T1aa(a,a1) 
#
            ENDDO i 
# 
            PUT Dab_a(a,a1) += Taa(a,a1) 
#
      ENDPARDO a, a1 
#
#     Finish Dab_a
#     ------------
#
#     Start Dab_b
#     -----------
#
      PARDO j, j1, b1
#
            allocate L2bjbj(*,j,b1,j1)
#
            DO b2
#
               REQUEST              T1bjbj_bb(b2,j,b1,j1) j 
               L2bjbj(b2,j,b1,j1) = T1bjbj_bb(b2,j,b1,j1)
#
            ENDDO b2
#
            DO b
#
               REQUEST T1bjbj_bb(b,j,b1,j1) b 
#
               DO b2
#
                  Tbb(b,b2)        = T1bjbj_bb(b,j,b1,j1)*L2bjbj(b2,j,b1,j1)
                  Tbb(b,b2)       *= 0.5
                  PUT Dab_b(b,b2) += Tbb(b,b2)
#
               ENDDO b2
#
            ENDDO b
#
            deallocate L2bjbj(*,j,b1,j1)
#
      ENDPARDO j, j1, b1
#
      PARDO i, j, a
#
            allocate L2bjai(*,j,a,i)
#
            DO b1
#
               REQUEST            T1aibj_ab(a,i,b1,j) a 
               L2bjai(b1,j,a,i) = T1aibj_ab(a,i,b1,j)
#
            ENDDO b1
#
            DO b
#
               REQUEST T1aibj_ab(a,i,b,j) a 
#
               DO b1
#
                  Tbb(b,b1)        = T1aibj_ab(a,i,b,j)*L2bjai(b1,j,a,i)
                  PUT Dab_b(b,b1) += Tbb(b,b1)
#
               ENDDO b1
#
            ENDDO b
#
            deallocate L2bjai(*,j,a,i)
#
      ENDPARDO i, j, a
#
      PARDO b, b1 
#
            Tbb(b,b1) = 0.0 
#
            DO j 
#
               GET          T1ai_b(b,j) 
               GET          T1ai_b(b1,j) 
               tbj(b,j)   = T1ai_b(b,j) 
               T1bb(b,b1) = tbj(b,j)*T1ai_b(b1,j) 
               Tbb(b,b1) += T1bb(b,b1) 
#
            ENDDO j 
# 
            PUT Dab_b(b,b1) += Tbb(b,b1) 
#
      ENDPARDO b, b1 
#
#     Finish Dab_b
#     ------------
#
# ---------------------------------------------------------------------------
#
      ENDPROC DENSAB
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSAI 
#
      create Dai_a 
      create Dai_b 
      execute sip_barrier 
#
      PARDO a, i 
#
            GET              T1ai_a(a,i) 
            PUT Dai_a(a,i) = T1ai_a(a,i) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET              T1ai_b(b,j) 
            PUT Dai_b(b,j) = T1ai_b(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC DENSAI 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSAI_FINISH   
#
      PARDO a, i 
#
            GET               Dold_dd(a,i) 
            GET               Dold_ds(a,i) 
            tpp(a,i)        = Dold_dd(a,i) 
            tpp(a,i)       += Dold_ds(a,i) 
            PUT Dai_a(a,i) += tpp(a,i) 
#
      ENDPARDO a, i 
#
#     Beta-beta sd block. 
#     ------------------- 
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0 
      ENDDO p1  
      ENDDO p  
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0 
      ENDDO q1  
      ENDDO q  
#
      DO i  
      DO i1
#
         GET             Dold_sd(i,i1) 
         SXaib_a(i,i1) = Dold_sd(i,i1)
#
      ENDDO i1   
      ENDDO i   
#
      DO p 
      DO p1
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1  
      ENDDO p  
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)        = SXai_b(b,j)  
            PUT Dai_b(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
#     Beta-beta dd and ds blocks. 
#     --------------------------- 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO a 
      DO i 
#
         GET             Dold_dd(a,i)
         SXaib_a(a,i)  = Dold_dd(a,i) 
#
      ENDDO i 
      ENDDO a 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)        = SXai_b(b,j)  
            PUT Dai_b(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC DENSAI_FINISH  
#
# ---------------------------------------------------------------------------
#
# ----------------------------------------------------------------------  
#
# The two-electron integral derivative <mn|ls>^l is computed
# and transformed to the MO basis for use in constructing
# the Hessian. The transformation is performed in 4 steps as
# is usually done. Since there will always be one occupied index
# in the Hessian computation the 4-types of integrals are computed. 
#
# 1. DTpppi
# 2. DTqqqj
# 3. DTppqj  
# 4. DTqqpi   
#
# Note that the integrals are not antisymmetrized in the transformation. 
#
# ---------------------------------------------------------------------- 
#
      PROC DINT_TRAN 
#     --------------  
#
      create Qyai 
      create Qybj 
      create QAyy 
      create QByy 
      create QAByy 
      create Fya 
      create Fyb 
      execute server_barrier
      execute sip_barrier 
#
#     Compute integrals and perform first stage of the transformation. 
#     ---------------------------------------------------------------- 
#
      PARDO mu, nu, lambda
#
            allocate Dxxxi(mu,lambda,nu,*) 
            allocate Dxxxj(mu,lambda,nu,*) 
#
            DO  sigma 
#
                execute                       der2_comp saoint(mu,lambda,nu,sigma) 
                daoint(mu,lambda,nu,sigma)  = saoint(mu,lambda,nu,sigma) 
#
#               Update QAyy, QByy, and QAByy  
#               ----------------------------
#
                GET                       Dhfa(lambda,nu) 
                GET                       Dhfb(lambda,nu) 
                GET                       Dhfa(nu,sigma) 
                GET                       Dhfb(nu,sigma) 
#
                txx(nu,sigma)           = Dhfa(nu,sigma) 
                txx(nu,sigma)          += Dhfb(nu,sigma) 
#
                t1xx(mu,sigma)          = daoint(mu,lambda,nu,sigma)*Dhfa(lambda,nu)
                t1xx(mu,sigma)         *= -1.0  
                PUT QAyy(mu,sigma)     += t1xx(mu,sigma) 
#
                t1xx(mu,sigma)          = daoint(mu,lambda,nu,sigma)*Dhfb(lambda,nu)
                t1xx(mu,sigma)         *= -1.0  
                PUT QByy(mu,sigma)     += t1xx(mu,sigma) 
#
                t1xx(mu,lambda)         = daoint(mu,lambda,nu,sigma)*txx(nu,sigma)
                PUT QAByy(mu,lambda)   += t1xx(mu,lambda) 
#
                DO i 
#
                   txxxi(mu,lambda,nu,i)  = daoint(mu,lambda,nu,sigma)*ca(sigma,i)
                   Dxxxi(mu,lambda,nu,i) += txxxi(mu,lambda,nu,i) 
#
                ENDDO i 
#
                DO j 
#
                   txxxj(mu,lambda,nu,j)  = daoint(mu,lambda,nu,sigma)*cb(sigma,j)
                   Dxxxj(mu,lambda,nu,j) += txxxj(mu,lambda,nu,j) 
#
                ENDDO j 
#
            ENDDO  sigma 
#
            DO i 
#
               PREPARE DTxxxi(mu,lambda,nu,i) = Dxxxi(mu,lambda,nu,i) 
#
            ENDDO i 
#
            DO j 
#
               PREPARE DTxxxj(mu,lambda,nu,j) = Dxxxj(mu,lambda,nu,j) 
#
            ENDDO j 
#
            deallocate Dxxxi(mu,lambda,nu,*) 
            deallocate Dxxxj(mu,lambda,nu,*) 
#
      ENDPARDO mu, nu, lambda
#
      execute server_barrier 
#
#     Perform second stage of the transformation. 
#     ------------------------------------------- 
#
      PARDO mu, lambda, i 
#
            allocate Exxpi(mu,lambda,*,i) 
#
            DO nu  
#
               REQUEST DTxxxi(mu,lambda,nu,i) i 
#
               DO p 
#
                  txxpi(mu,lambda,p,i)  = DTxxxi(mu,lambda,nu,i)*ca(nu,p) 
                  Exxpi(mu,lambda,p,i) += txxpi(mu,lambda,p,i)  
#
               ENDDO p 
#
            ENDDO nu  
#
            DO p 
#
               PREPARE DTxxpi(mu,lambda,p,i) = Exxpi(mu,lambda,p,i) 
#
            ENDDO p 
#
            deallocate Exxpi(mu,lambda,*,i) 
#
      ENDPARDO mu, lambda, i 
#
      PARDO mu, lambda, j 
#
            allocate Exxqj(mu,lambda,*,j) 
#
            DO nu  
#
               REQUEST DTxxxj(mu,lambda,nu,j) j  
#
               DO q 
#
                  txxqj(mu,lambda,q,j)  = DTxxxj(mu,lambda,nu,j)*cb(nu,q) 
                  Exxqj(mu,lambda,q,j) += txxqj(mu,lambda,q,j)  
#
               ENDDO q 
#
            ENDDO nu  
#
            DO q 
#
               PREPARE DTxxqj(mu,lambda,q,j) = Exxqj(mu,lambda,q,j) 
#
            ENDDO q 
#
            deallocate Exxqj(mu,lambda,*,j) 
#
      ENDPARDO mu, lambda, j 
#
      execute server_barrier 
#
#     Perform third stage of the transformation. 
#     ------------------------------------------ 
#
      PARDO mu, p, i 
#
            allocate Fxppi(mu,*,p,i) 
            allocate Fxqpi(mu,*,p,i) 
#
            DO nu 
#
               REQUEST DTxxpi(mu,nu,p,i) i  
#
               DO p1 
#
                  txppi(mu,p1,p,i) = DTxxpi(mu,nu,p,i)*ca(nu,p1) 
                  Fxppi(mu,p1,p,i) += txppi(mu,p1,p,i)
#
               ENDDO p1 
#
               DO q 
#
                  txqpi(mu,q,p,i) = DTxxpi(mu,nu,p,i)*cb(nu,q) 
                  Fxqpi(mu,q,p,i) += txqpi(mu,q,p,i)
#
               ENDDO q 
#
            ENDDO nu 
#
            DO p1 
#
               PREPARE DTxppi(mu,p1,p,i) = Fxppi(mu,p1,p,i)  
#
            ENDDO p1 
#
            DO q 
#
               PREPARE DTxqpi(mu,q,p,i) = Fxqpi(mu,q,p,i)  
#
            ENDDO q 
#
            deallocate Fxppi(mu,*,p,i) 
            deallocate Fxqpi(mu,*,p,i) 
#
      ENDPARDO mu, p, i 
#
      PARDO mu, q, j 
#
            allocate Fxqqj(mu,*,q,j) 
            allocate Fxpqj(mu,*,q,j) 
#
            DO nu 
#
               REQUEST DTxxqj(mu,nu,q,j) j  
#
               DO q1 
#
                  txqqj(mu,q1,q,j) = DTxxqj(mu,nu,q,j)*cb(nu,q1) 
                  Fxqqj(mu,q1,q,j) += txqqj(mu,q1,q,j)
#
               ENDDO q1 
#
               DO p 
#
                  txpqj(mu,p,q,j) = DTxxqj(mu,nu,q,j)*ca(nu,p) 
                  Fxpqj(mu,p,q,j) += txpqj(mu,p,q,j)
#
               ENDDO p 
#
            ENDDO nu 
#
            DO q1 
#
               PREPARE DTxqqj(mu,q1,q,j) = Fxqqj(mu,q1,q,j)  
#
            ENDDO q1 
#
            DO p 
#
               PREPARE DTxpqj(mu,p,q,j) = Fxpqj(mu,p,q,j)  
#
            ENDDO p 
#
            deallocate Fxqqj(mu,*,q,j) 
            deallocate Fxpqj(mu,*,q,j) 
#
      ENDPARDO mu, q, j 
#
      execute server_barrier 
#
#     Perform fourth stage of the transformation. 
#     ------------------------------------------- 
#
      PARDO p, p1, i 
#
            allocate Fpppi(*,p1,p,i) 
#
            DO mu 
#
               REQUEST DTxppi(mu,p1,p,i) i  
#
               DO p2 
#
                  tpppi(p2,p1,p,i)  = DTxppi(mu,p1,p,i)*ca(mu,p2) 
                  Fpppi(p2,p1,p,i) += tpppi(p2,p1,p,i) 
#
               ENDDO p2 
#
            ENDDO mu 
#
            DO p2 
#
               PREPARE DTpppi(p2,p1,p,i) = Fpppi(p2,p1,p,i) 
#
            ENDDO p2 
#
            deallocate Fpppi(*,p1,p,i) 
#
      ENDPARDO p, p1, i 
#
      PARDO p, q, i 
#
            allocate Fqqpi(*,q,p,i) 
#
            DO mu 
#
               REQUEST DTxqpi(mu,q,p,i) i 
#
               DO q1 
#
                  tqqpi(q1,q,p,i)  = DTxqpi(mu,q,p,i)*cb(mu,q1) 
                  Fqqpi(q1,q,p,i) += tqqpi(q1,q,p,i) 
#
               ENDDO q1 
#
            ENDDO mu 
#
            DO q1 
#
               PREPARE DTqqpi(q1,q,p,i) = Fqqpi(q1,q,p,i) 
#
            ENDDO q1 
#
            deallocate Fqqpi(*,q,p,i) 
#
      ENDPARDO p, q, i 
#
      PARDO q, q1, j 
#
            allocate Fqqqj(*,q1,q,j) 
#
            DO mu 
#
               REQUEST DTxqqj(mu,q1,q,j) j  
#
               DO q2 
#
                  tqqqj(q2,q1,q,j)  = DTxqqj(mu,q1,q,j)*cb(mu,q2) 
                  Fqqqj(q2,q1,q,j) += tqqqj(q2,q1,q,j) 
#
               ENDDO q2 
#
            ENDDO mu 
#
            DO q2 
#
               PREPARE DTqqqj(q2,q1,q,j) = Fqqqj(q2,q1,q,j) 
#
            ENDDO q2 
#
            deallocate Fqqqj(*,q1,q,j) 
#
      ENDPARDO q, q1, j 
#
      PARDO q, p, j 
#
            allocate Fppqj(*,p,q,j) 
#
            DO mu 
#
               REQUEST DTxpqj(mu,p,q,j) j  
#
               DO p1 
#
                  tppqj(p1,p,q,j)  = DTxpqj(mu,p,q,j)*ca(mu,p1) 
                  Fppqj(p1,p,q,j) += tppqj(p1,p,q,j) 
#
               ENDDO p1 
#
            ENDDO mu 
#
            DO p1 
#
               PREPARE DTppqj(p1,p,q,j) = Fppqj(p1,p,q,j) 
#
            ENDDO p1 
#
            deallocate Fppqj(*,p,q,j) 
#
      ENDPARDO q, p, j 
#
      execute sip_barrier 
#
#     Finish the contribution to Qyai and Qybj 
#     ---------------------------------------- 
#
      PARDO mu, sigma  
#
            GET               QAByy(mu,sigma) 
            GET               QAyy(mu,sigma) 
            GET               QByy(mu,sigma) 
#
            txx(mu,sigma)   = QAByy(mu,sigma)  
            txx(mu,sigma)  += QAyy(mu,sigma)  
#
            t1xx(mu,sigma)  = QAByy(mu,sigma)  
            t1xx(mu,sigma) += QByy(mu,sigma)  
#
            DO a  
#
               tax(a,sigma) = txx(mu,sigma)*ca(mu,a)  
#
               DO i 
#
                  tai(a,i)       = tax(a,sigma)*ca(sigma,i) 
                  PUT Qyai(a,i) += tai(a,i)  
#
               ENDDO i 
#
            ENDDO a  
#
            DO b  
#
               tbx(b,sigma) = t1xx(mu,sigma)*cb(mu,b)  
#
               DO j 
#
                  tbj(b,j)       = tbx(b,sigma)*cb(sigma,j) 
                  PUT Qybj(b,j) += tbj(b,j)  
#
               ENDDO j 
#
            ENDDO b  
#
            DO p
#
               tpx(p,sigma) = ca(mu,p)*txx(mu,sigma)
#
               DO p1 
#
                  tpp(p,p1)      = tpx(p,sigma)*ca(sigma,p1)
                  PUT Fya(p,p1) += tpp(p,p1)
#
               ENDDO p1 
#
            ENDDO p
#
            DO q
#
               tqx(q,sigma) = cb(mu,q)*t1xx(mu,sigma)
#
               DO q1  
#
                  tqq(q,q1)      = tqx(q,sigma)*cb(sigma,q1)
                  PUT Fyb(q,q1) += tqq(q,q1)
#
               ENDDO q1  
#
            ENDDO q
#
      ENDPARDO mu, sigma  
#
      execute sip_barrier 
      execute server_barrier 
#
      ENDPROC DINT_TRAN 
#     -----------------  
#
# ---------------------------------------------------------------------- 
#
      PROC ZERO_VX
#
      execute server_barrier 
#
      PARDO mu, nu 
#
            DO i 
            DO i1 
#
               txixi(mu,i,nu,i1)          = 0.0 
               PREPARE VXxixi(mu,i,nu,i1) = txixi(mu,i,nu,i1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO j 
            DO j1 
#
               txjxj(mu,j,nu,j1)          = 0.0 
               PREPARE VXxjxj(mu,j,nu,j1) = txjxj(mu,j,nu,j1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO i 
            DO j 
#
               txixj(mu,i,nu,j)          = 0.0 
               PREPARE VXxixj(mu,i,nu,j) = txixj(mu,i,nu,j) 
#
            ENDDO j 
            ENDDO i 
#
      ENDPARDO mu, nu 
#
      PARDO mu, a, i, i1 
#
            txipi(mu,i,a,i1) = 0.0 
            PREPARE VXxipi(mu,i,a,i1) = txipi(mu,i,a,i1) 
#
      ENDPARDO mu, a, i, i1 
#
      PARDO mu, b, j, j1 
#
            txjqj(mu,j,b,j1) = 0.0 
            PREPARE VXxjqj(mu,j,b,j1) = txjqj(mu,j,b,j1) 
#
      ENDPARDO mu, b, j, j1 
#
      PARDO mu, b, i, j 
#
            txiqj(mu,i,b,j) = 0.0 
            PREPARE VXxiqj(mu,i,b,j) = txiqj(mu,i,b,j) 
#
      ENDPARDO mu, b, i, j 
#
      PARDO a, i, a1, i1 
#
            tpipi(a,i,a1,i1) = 0.0 
            PREPARE VXpipi(a,i,a1,i1) = tpipi(a,i,a1,i1) 
#
      ENDPARDO a, i, a1, i1 
#
      PARDO b, j, b1, j1 
#
            tqjqj(b,j,b1,j1) = 0.0 
            PREPARE VXqjqj(b,j,b1,j1) = tqjqj(b,j,b1,j1) 
#
      ENDPARDO b, j, b1, j1 
#
      PARDO a, i, b1, j1 
#
            tpiqj(a,i,b1,j1) = 0.0 
            PREPARE VXpiqj(a,i,b1,j1) = tpiqj(a,i,b1,j1) 
#
      ENDPARDO a, i, b1, j1 
#
      execute server_barrier 
#
      ENDPROC ZERO_VX
#
# ---------------------------------------------------------------------- 
#
      PROC ZERO_VXIXI 
#
      execute server_barrier 
#
      PARDO mu, nu 
#
            DO i 
            DO i1 
#
               txixi(mu,i,nu,i1)         = 0.0 
               PREPARE Vxixi(mu,i,nu,i1) = txixi(mu,i,nu,i1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO j 
            DO j1 
#
               txjxj(mu,j,nu,j1)         = 0.0 
               PREPARE Vxjxj(mu,j,nu,j1) = txjxj(mu,j,nu,j1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO i 
            DO j 
#
               txixj(mu,i,nu,j)         = 0.0 
               PREPARE Vxixj(mu,i,nu,j) = txixj(mu,i,nu,j) 
#
            ENDDO j 
            ENDDO i 
#
      ENDPARDO mu, nu 
#
      execute server_barrier 
#
      ENDPROC ZERO_VXIXI 
#
# ---------------------------------------------------------------------------
#
# The two-electron integral derivative <mn|ls>^l is computed
# and transformed to the MO basis for use in constructing
# the Hessian. The transformation is performed in 3 steps as
# as only the vovo integrals are needed. 
#
# 1. VXpipi  
# 1. VXqjqj  
# 1. VXpiqj  
#
# Note that the integrals are not antisymmetrized in the transformation. 
#
# ---------------------------------------------------------------------- 
#
      PROC TRAN_VX_XIXI  
#     ----------------- 
#
      create Qxai 
      create Qxbj  
      create QAxx
      create QBxx
      create QABxx 
      create Fxa 
      create Fxb 
      execute sip_barrier 
#
#     Compute integrals and perform first two stages of the transformation. 
#     --------------------------------------------------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
             execute der2_comp             saoint(mu,nu,lambda,sigma) 
             daoint(mu,nu,lambda,sigma)  = saoint(mu,nu,lambda,sigma) 
#
#            Update QAxx, QBxx, and QABxx
#            ----------------------------
#
             GET                   Dhfa(lambda,sigma)
             GET                   Dhfb(lambda,sigma)
             GET                   Dhfa(lambda,nu)
             GET                   Dhfb(lambda,nu)
#
             txx(lambda,sigma)   = Dhfa(lambda,sigma)
             txx(lambda,sigma)  += Dhfb(lambda,sigma)
#
             t1xx(mu,sigma)      = daoint(mu,nu,lambda,sigma)*Dhfa(lambda,nu)
             t1xx(mu,sigma)     *= -1.0
             PUT QAxx(mu,sigma) += t1xx(mu,sigma)
#
             t1xx(mu,sigma)      = daoint(mu,nu,lambda,sigma)*Dhfb(lambda,nu)
             t1xx(mu,sigma)     *= -1.0
             PUT QBxx(mu,sigma) += t1xx(mu,sigma)
#
             t1xx(mu,nu)         = daoint(mu,nu,lambda,sigma)*txx(lambda,sigma)
             PUT QABxx(mu,nu)   += t1xx(mu,nu)
#
             DO i 
#
                txxxi(mu,nu,lambda,i) = daoint(mu,nu,lambda,sigma)*ca(sigma,i)
#
                DO i1 
#
                   txixi(mu,i1,lambda,i)           = txxxi(mu,nu,lambda,i)*ca(nu,i1) 
                   PREPARE VXxixi(mu,i1,lambda,i) += txixi(mu,i1,lambda,i) 
#
                ENDDO i1 
#
             ENDDO i 
#
             DO j 
#
                txxxj(mu,nu,lambda,j)  = daoint(mu,nu,lambda,sigma)*cb(sigma,j)
#
                DO j1 
#
                   txjxj(mu,j1,lambda,j)           = txxxj(mu,nu,lambda,j)*cb(nu,j1) 
                   PREPARE VXxjxj(mu,j1,lambda,j) += txjxj(mu,j1,lambda,j) 
#
                ENDDO j1 
#
                DO i 
#
                   txixj(mu,i,lambda,j)           = txxxj(mu,nu,lambda,j)*ca(nu,i) 
                   PREPARE VXxixj(mu,i,lambda,j) += txixj(mu,i,lambda,j) 
#
                ENDDO i 
#
             ENDDO j 
#
      ENDPARDO mu, nu, lambda, sigma 
#
      execute server_barrier 
#
#     Perform third stage of the transformation. 
#     ------------------------------------------ 
#
#     Alpha/Alpha spin component. 
#     --------------------------- 
#
      PARDO mu, nu
#
            DO i
            DO i1
#
               REQUEST VXxixi(mu,i,nu,i1) i 
#
               DO a
                  Txiai(mu,i,a,i1)           = VXxixi(mu,i,nu,i1)*ca(nu,a)
                  PREPARE VXxipi(mu,i,a,i1) += Txiai(mu,i,a,i1)
               ENDDO a
#
            ENDDO i1
            ENDDO i
#
      ENDPARDO mu, nu
#
      execute server_barrier 
#
      PARDO mu, a
#
            DO i
            DO i1
#
               REQUEST VXxipi(mu,i,a,i1) a 
#
               DO a1
                  Taiai(a1,i,a,i1)           = VXxipi(mu,i,a,i1)*ca(mu,a1)
                  PREPARE VXpipi(a1,i,a,i1) += Taiai(a1,i,a,i1)
               ENDDO a1
#
            ENDDO i1
            ENDDO i
#
      ENDPARDO mu, a
#
      execute server_barrier 
#
#     Beta/Beta spin component. 
#     ------------------------- 
#
      PARDO mu, nu
#
            DO j
            DO j1
#
               REQUEST VXxjxj(mu,j,nu,j1) j 
#
               DO b
                  Txjbj(mu,j,b,j1)           = VXxjxj(mu,j,nu,j1)*cb(nu,b)
                  PREPARE VXxjqj(mu,j,b,j1) += Txjbj(mu,j,b,j1)
               ENDDO b
#
            ENDDO j1
            ENDDO j
#
      ENDPARDO mu, nu
#
      execute server_barrier 
#
      PARDO mu, b
#
            DO j
            DO j1
#
               REQUEST VXxjqj(mu,j,b,j1) b 
#
               DO b1
                  Tbjbj(b1,j,b,j1)           = VXxjqj(mu,j,b,j1)*cb(mu,b1)
                  PREPARE VXqjqj(b1,j,b,j1) += Tbjbj(b1,j,b,j1)
               ENDDO b1
#
            ENDDO j1
            ENDDO j
#
      ENDPARDO mu, b
#
      execute server_barrier 
#
#     Alpha/Beta spin component. 
#     -------------------------- 
#
      PARDO mu, nu
#
            DO i
            DO j
#
               REQUEST VXxixj(mu,i,nu,j) j 
#
               DO b
                  Txibj(mu,i,b,j)           = VXxixj(mu,i,nu,j)*cb(nu,b)
                  PREPARE VXxiqj(mu,i,b,j) += Txibj(mu,i,b,j)
               ENDDO b
#
            ENDDO j
            ENDDO i
#
      ENDPARDO mu, nu
#
      execute server_barrier 
#
      PARDO mu, b
#
            DO i
            DO j
#
               REQUEST VXxiqj(mu,i,b,j) b 
#
               DO a
                  Taibj(a,i,b,j)           = VXxiqj(mu,i,b,j)*ca(mu,a)
                  PREPARE VXpiqj(a,i,b,j) += Taibj(a,i,b,j)
               ENDDO a
#
            ENDDO j
            ENDDO i
#
      ENDPARDO mu, b
#
#     Finish the contribution to Qxai and Qxbj
#     ----------------------------------------
#
      PARDO mu, sigma
#
            GET               QABxx(mu,sigma)
            GET               QAxx(mu,sigma)
            GET               QBxx(mu,sigma)
#
            txx(mu,sigma)   = QABxx(mu,sigma)
            txx(mu,sigma)  += QAxx(mu,sigma)
#
            t1xx(mu,sigma)  = QABxx(mu,sigma)
            t1xx(mu,sigma) += QBxx(mu,sigma)
#
            DO a
#
               tax(a,sigma) = ca(mu,a)*txx(mu,sigma)
#
               DO i
#
                  tai(a,i)       = tax(a,sigma)*ca(sigma,i)
                  PUT Qxai(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            DO b
#
               tbx(b,sigma) = cb(mu,b)*t1xx(mu,sigma)
#
               DO j
#
                  tbj(b,j)       = tbx(b,sigma)*cb(sigma,j)
                  PUT Qxbj(b,j) += tbj(b,j)
#
               ENDDO j
#
            ENDDO b
#
            DO p
#
               tpx(p,sigma) = ca(mu,p)*txx(mu,sigma)
#
               DO p1 
#
                  tpp(p,p1)      = tpx(p,sigma)*ca(sigma,p1)
                  PUT Fxa(p,p1) += tpp(p,p1)
#
               ENDDO p1 
#
            ENDDO p
#
            DO q
#
               tqx(q,sigma) = cb(mu,q)*t1xx(mu,sigma)
#
               DO q1  
#
                  tqq(q,q1)      = tqx(q,sigma)*cb(sigma,q1)
                  PUT Fxb(q,q1) += tqq(q,q1)
#
               ENDDO q1  
#
            ENDDO q
#
      ENDPARDO mu, sigma
#
      execute sip_barrier
      execute server_barrier
#
      ENDPROC TRAN_VX_XIXI  
#     --------------------  
#
# ---------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC QYAI_H 
#     ----------- 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Qxai and Qxbj  
#           ------------------------------ 
#
            DO a 
#
               tpx(a,nu) = ca(mu,a)*txx(mu,nu) # *ca(mu,a)  
#
               DO i 
#
                  tpp(a,i)       = tpx(a,nu)*ca(nu,i) 
                  PUT Qyai(a,i) += tpp(a,i) 
#
               ENDDO i  
#
            ENDDO a 
#
            DO b 
#
               tqx(b,nu) = cb(mu,b)*txx(mu,nu) # *cb(mu,b)  
#
               DO j 
#
                  tqq(b,j)       = tqx(b,nu)*cb(nu,j) 
                  PUT Qybj(b,j) += tqq(b,j) 
#
               ENDDO j  
#
            ENDDO b 
#
      ENDPARDO mu, nu 
#
      ENDPROC QYAI_H 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC QXAI_H 
#     ----------- 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Qxai and Qxbj  
#           ------------------------------ 
#
            DO a 
#
               tpx(a,nu) = txx(mu,nu)*ca(mu,a)  
#
               DO i 
#
                  tpp(a,i)       = tpx(a,nu)*ca(nu,i) 
                  PUT Qxai(a,i) += tpp(a,i) 
#
               ENDDO i  
#
            ENDDO a 
#
            DO b 
#
               tqx(b,nu) = txx(mu,nu)*cb(mu,b)  
#
               DO j 
#
                  tqq(b,j)       = tqx(b,nu)*cb(nu,j) 
                  PUT Qxbj(b,j) += tqq(b,j) 
#
               ENDDO j  
#
            ENDDO b 
#
      ENDPARDO mu, nu 
#
      ENDPROC QXAI_H 
#     -------------- 
#
# ---------------------------------------------------------------------------
#
      PROC FINTY_TRAN 
#     --------------- 
#
#     The transformed first-derivative fock matrix is computed. The 
#     perturbation is defined by jatom, jx and jcenter and the 
#     final arrays are Fya and Fyb. 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Fya and Fyb 
#           ---------------------------- 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)      = txp(mu,p)*ca(mu,p1) 
                  PUT Fya(p1,p) += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)      = txq(mu,q)*cb(mu,q1) 
                  PUT Fyb(q1,q) += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
      ENDPARDO mu, nu 
#
#     Add contributions from coefficient derivatives and two-electron integrals  
#     ------------------------------------------------------------------------- 
#
#     alpha-alpha virtual-virtual block 
#     --------------------------------- 
#
      PARDO a, a1 
#
            taa(a,a1) = 0.0 
#
            DO p
#
               GET          Uyaa(p,a) 
               GET          Uyaa(p,a1) 
#
               t1aa(a,a1) = Uyaa(p,a)*fockmo_a(p,a1) 
               taa(a,a1) += t1aa(a,a1) 
#
               t1aa(a,a1) = fockmo_a(a,p)*Uyaa(p,a1) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO p  
#
            DO i 
#
               DO a2 
#
                  REQUEST             VSaaai(a,a1,a2,i) a  
                  REQUEST             VSaaai(a1,a,a2,i) a  
                  GET                 Uyaa(a2,i) 
#
                  tpppp(a,a1,a2,i)  = VSaaai(a,a1,a2,i)  
                  t1pppp(a,a1,a2,i) = VSaaai(a1,a,a2,i)  
                  tpppp(a,a1,a2,i) += t1pppp(a,a1,a2,i)
#
                  t1aa(a,a1)        = tpppp(a,a1,a2,i)*Uyaa(a2,i) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO a2 
#
               DO i2 
#
                  REQUEST             Vaaii(a,a1,i2,i) a # +  
                  REQUEST             Viaai(i2,a1,a,i) a # -  
                  REQUEST             Vaaii(a,a1,i,i2) a # +  
                  REQUEST             Viaai(i,a1,a,i2) a # -  
                  GET                 Uyaa(i2,i) 
#
                  tpppp(a,a1,i2,i)  = Vaaii(a,a1,i2,i)  
                  t1pppp(a,a1,i2,i) = Viaai(i2,a1,a,i)  
                  t2pppp(a,a1,i2,i) = Vaaii(a,a1,i,i2)  
                  t3pppp(a,a1,i2,i) = Viaai(i,a1,a,i2)  
                  tpppp(a,a1,i2,i) -= t1pppp(a,a1,i2,i)
                  tpppp(a,a1,i2,i) += t2pppp(a,a1,i2,i)
                  tpppp(a,a1,i2,i) -= t3pppp(a,a1,i2,i)
#
                  t1aa(a,a1)        = tpppp(a,a1,i2,i)*Uyaa(i2,i) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO i2 
#
            ENDDO i
#
            DO j 
#
               DO b2 
#
                  REQUEST             Vaabj(a,a1,b2,j) a  
                  REQUEST             Vaabj(a1,a,b2,j) a  
                  GET                 Uybb(b2,j) 
#
                  tppqq(a,a1,b2,j)  = Vaabj(a,a1,b2,j)  
                  t1ppqq(a,a1,b2,j) = Vaabj(a1,a,b2,j)  
                  tppqq(a,a1,b2,j) += t1ppqq(a,a1,b2,j)
#
                  t1aa(a,a1)        = tppqq(a,a1,b2,j)*Uybb(b2,j) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO b2 
#
               DO j2 
#
                  REQUEST             Vaajj(a,a1,j2,j) a # +  
                  REQUEST             Vaajj(a,a1,j,j2) a # +  
                  GET                 Uybb(j2,j) 
#
                  tppqq(a,a1,j2,j)  = Vaajj(a,a1,j2,j)  
                  t2ppqq(a,a1,j2,j) = Vaajj(a,a1,j,j2)  
                  tppqq(a,a1,j2,j) += t2ppqq(a,a1,j2,j)
#
                  t1aa(a,a1)        = tppqq(a,a1,j2,j)*Uybb(j2,j) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO j2 
#
            ENDDO j
#
            PUT Fya(a,a1) += taa(a,a1) 
#
      ENDPARDO a, a1 
#
#     alpha-alpha occupied-occupied block 
#     ----------------------------------- 
#
      PARDO i, i1 
#
            tii(i,i1) = 0.0 
#
            DO p 
#
               GET          Uyaa(p,i) 
               GET          Uyaa(p,i1) 
#
               t1ii(i,i1) = Uyaa(p,i)*fockmo_a(i1,p) 
               tii(i,i1) += t1ii(i,i1) 
#
               t1ii(i,i1) = Uyaa(p,i1)*fockmo_a(p,i) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO p 
#
            DO i2 
#
               DO a 
#
                  REQUEST             VSpipi(i,i1,a,i2) a # + 
                  REQUEST             VSpipi(i1,i,a,i2) a # + 
                  GET                 Uyaa(a,i2) 
#
                  tpppp(i,i1,a,i2)  = VSpipi(i1,i,a,i2) 
                  tpppp(i,i1,a,i2) += VSpipi(i,i1,a,i2) 
#
                  t1ii(i,i1)        = tpppp(i,i1,a,i2)*Uyaa(a,i2) 
                  tii(i,i1)        += t1ii(i,i1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              VSpipi(i,i1,i3,i2) i # + 
                  REQUEST              VSpipi(i,i1,i2,i3) i # + 
                  GET                  Uyaa(i3,i2) 
#
                  tpppp(i,i1,i3,i2)  = VSpipi(i,i1,i2,i3) 
                  tpppp(i,i1,i3,i2) += VSpipi(i,i1,i3,i2) 
#
                  t1ii(i,i1)         = tpppp(i,i1,i3,i2)*Uyaa(i3,i2)
                  tii(i,i1)         += t1ii(i,i1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Vpiqj(i,i1,b,j2) b # + 
                  REQUEST             Vpiqj(i1,i,b,j2) b # + 
                  GET                 Uybb(b,j2) 
#
                  tppqq(i,i1,b,j2)  = Vpiqj(i1,i,b,j2) 
                  tppqq(i,i1,b,j2) += Vpiqj(i,i1,b,j2) 
#
                  t1ii(i,i1)        = tppqq(i,i1,b,j2)*Uybb(b,j2) 
                  tii(i,i1)        += t1ii(i,i1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              Vpiqj(i,i1,j3,j2) i # + 
                  REQUEST              Vpiqj(i,i1,j2,j3) i # + 
                  GET                  Uybb(j3,j2) 
#
                  tppqq(i,i1,j3,j2)  = Vpiqj(i,i1,j2,j3) 
                  tppqq(i,i1,j3,j2) += Vpiqj(i,i1,j3,j2) 
#
                  t1ii(i,i1)         = tppqq(i,i1,j3,j2)*Uybb(j3,j2)
                  tii(i,i1)         += t1ii(i,i1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            PUT Fya(i,i1) += tii(i,i1)  
#
      ENDPARDO i, i1 
#
#     alpha-alpha virtual-occupied block 
#     ---------------------------------- 
#
      PARDO i, a1 
#
            tia(i,a1) = 0.0 
#
            DO p 
#
               GET          Uyaa(p,i) 
               GET          Uyaa(p,a1) 
#
               t1ia(i,a1) = Uyaa(p,i)*fockmo_a(a1,p) 
               tia(i,a1) += t1ia(i,a1) 
#
               t1ia(i,a1) = Uyaa(p,a1)*fockmo_a(p,i) 
               tia(i,a1) += t1ia(i,a1) 
#
            ENDDO p 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Viaai(i,a1,a,i2)  a # + 
                  REQUEST             Vaaii(a,a1,i,i2)  a # - 
                  REQUEST             VSpipi(a1,i,a,i2) a # + 
                  GET                 Uyaa(a,i2) 
#
                  tpppp(i,a1,a,i2)  = VSpipi(a1,i,a,i2) 
                  t1pppp(i,a1,a,i2) = Vaaii(a,a1,i,i2)  
                  tpppp(i,a1,a,i2) -= t1pppp(i,a1,a,i2)  
                  tpppp(i,a1,a,i2) += Viaai(i,a1,a,i2)  
#
                  t1ia(i,a1)        = tpppp(i,a1,a,i2)*Uyaa(a,i2) 
                  tia(i,a1)        += t1ia(i,a1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              VSpipi(a1,i,i2,i3) i # + 
                  REQUEST              VSpipi(a1,i,i3,i2) i # + 
                  GET                  Uyaa(i3,i2) 
#
                  tpppp(a1,i,i3,i2)  = VSpipi(a1,i,i2,i3) 
                  tpppp(a1,i,i3,i2) += VSpipi(a1,i,i3,i2) 
#
                  t1ia(i,a1)         = tpppp(a1,i,i3,i2)*Uyaa(i3,i2)
                  tia(i,a1)         += t1ia(i,a1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Viabj(i,a1,b,j2) b # + 
                  REQUEST             Vpiqj(a1,i,b,j2) b # + 
                  GET                 Uybb(b,j2) 
#
                  tppqq(i,a1,b,j2)  = Vpiqj(a1,i,b,j2) 
                  tppqq(i,a1,b,j2) += Viabj(i,a1,b,j2) 
#
                  t1ia(i,a1)        = tppqq(i,a1,b,j2)*Uybb(b,j2) 
                  tia(i,a1)        += t1ia(i,a1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              Vpiqj(a1,i,j2,j3) a1 # + 
                  REQUEST              Vpiqj(a1,i,j3,j2) a1 # + 
                  GET                  Uybb(j3,j2) 
#
                  tppqq(a1,i,j3,j2)  = Vpiqj(a1,i,j2,j3) 
                  tppqq(a1,i,j3,j2) += Vpiqj(a1,i,j3,j2) 
#
                  t1ia(i,a1)         = tppqq(a1,i,j3,j2)*Uybb(j3,j2)
                  tia(i,a1)         += t1ia(i,a1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            tai(a1,i)      = tia(i,a1) 
            PUT Fya(i,a1) += tia(i,a1)  
            PUT Fya(a1,i) += tai(a1,i)  
#
      ENDPARDO i, a1 
#
#     beta-beta virtual-virtual block 
#     --------------------------------- 
#
      PARDO b, b1 
#
            tbb(b,b1) = 0.0 
#
            DO q
#
               GET          Uybb(q,b) 
               GET          Uybb(q,b1) 
#
               t1bb(b,b1) = Uybb(q,b)*fockmo_b(q,b1) 
               tbb(b,b1) += t1bb(b,b1) 
#
               t1bb(b,b1) = fockmo_b(b,q)*Uybb(q,b1) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO q  
#
            DO j 
#
               DO b2 
#
                  REQUEST             VSbbbj(b,b1,b2,j) b  
                  REQUEST             VSbbbj(b1,b,b2,j) b  
                  GET                 Uybb(b2,j) 
#
                  tqqqq(b,b1,b2,j)  = VSbbbj(b,b1,b2,j)  
                  t1qqqq(b,b1,b2,j) = VSbbbj(b1,b,b2,j)  
                  tqqqq(b,b1,b2,j) += t1qqqq(b,b1,b2,j)
#
                  t1bb(b,b1)        = tqqqq(b,b1,b2,j)*Uybb(b2,j) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO b2 
#
               DO j2 
#
                  REQUEST             Vbbjj(b,b1,j2,j) b # +  
                  REQUEST             Vjbbj(j2,b1,b,j) b # -  
                  REQUEST             Vbbjj(b,b1,j,j2) b # +  
                  REQUEST             Vjbbj(j,b1,b,j2) b # -  
                  GET                 Uybb(j2,j) 
#
                  tqqqq(b,b1,j2,j)  = Vbbjj(b,b1,j2,j)  
                  t1qqqq(b,b1,j2,j) = Vjbbj(j2,b1,b,j)  
                  t2qqqq(b,b1,j2,j) = Vbbjj(b,b1,j,j2)  
                  t3qqqq(b,b1,j2,j) = Vjbbj(j,b1,b,j2)  
                  tqqqq(b,b1,j2,j) -= t1qqqq(b,b1,j2,j)
                  tqqqq(b,b1,j2,j) += t2qqqq(b,b1,j2,j)
                  tqqqq(b,b1,j2,j) -= t3qqqq(b,b1,j2,j)
#
                  t1bb(b,b1)        = tqqqq(b,b1,j2,j)*Uybb(j2,j) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO j2 
#
            ENDDO j
#
            DO i 
#
               DO a2 
#
                  REQUEST             Vbbai(b,b1,a2,i) b  
                  REQUEST             Vbbai(b1,b,a2,i) b  
                  GET                 Uyaa(a2,i) 
#
                  tqqpp(b,b1,a2,i)  = Vbbai(b,b1,a2,i)  
                  t1qqpp(b,b1,a2,i) = Vbbai(b1,b,a2,i)  
                  tqqpp(b,b1,a2,i) += t1qqpp(b,b1,a2,i)
#
                  t1bb(b,b1)        = tqqpp(b,b1,a2,i)*Uyaa(a2,i) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO a2 
#
               DO i2 
#
                  REQUEST             Vbbii(b,b1,i2,i) b # +  
                  REQUEST             Vbbii(b,b1,i,i2) b # +  
                  GET                 Uyaa(i2,i) 
#
                  tqqpp(b,b1,i2,i)  = Vbbii(b,b1,i2,i)  
                  t2qqpp(b,b1,i2,i) = Vbbii(b,b1,i,i2)  
                  tqqpp(b,b1,i2,i) += t2qqpp(b,b1,i2,i)
#
                  t1bb(b,b1)        = tqqpp(b,b1,i2,i)*Uyaa(i2,i) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO i2 
#
            ENDDO i
#
            PUT Fyb(b,b1) += tbb(b,b1) 
#
      ENDPARDO b, b1 
#
#     beta-beta occupied-occupied block 
#     ----------------------------------- 
#
      PARDO j, j1 
#
            tjj(j,j1) = 0.0 
#
            DO q 
#
               GET          Uybb(q,j) 
               GET          Uybb(q,j1) 
#
               t1jj(j,j1) = Uybb(q,j)*fockmo_b(j1,q) 
               tjj(j,j1) += t1jj(j,j1) 
#
               t1jj(j,j1) = Uybb(q,j1)*fockmo_b(q,j) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO q 
#
            DO j2 
#
               DO b 
#
                  REQUEST             VSqjqj(j,j1,b,j2) b # + 
                  REQUEST             VSqjqj(j1,j,b,j2) b # + 
                  GET                 Uybb(b,j2) 
#
                  tqqqq(j,j1,b,j2)  = VSqjqj(j1,j,b,j2) 
                  tqqqq(j,j1,b,j2) += VSqjqj(j,j1,b,j2) 
#
                  t1jj(j,j1)        = tqqqq(j,j1,b,j2)*Uybb(b,j2) 
                  tjj(j,j1)        += t1jj(j,j1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              VSqjqj(j,j1,j3,j2) j # + 
                  REQUEST              VSqjqj(j,j1,j2,j3) j # + 
                  GET                  Uybb(j3,j2) 
#
                  tqqqq(j,j1,j3,j2)  = VSqjqj(j,j1,j2,j3) 
                  tqqqq(j,j1,j3,j2) += VSqjqj(j,j1,j3,j2) 
#
                  t1jj(j,j1)         = tqqqq(j,j1,j3,j2)*Uybb(j3,j2)
                  tjj(j,j1)         += t1jj(j,j1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Vpiqj(a,i2,j,j1) a # + 
                  REQUEST             Vpiqj(a,i2,j1,j) a # + 
                  GET                 Uyaa(a,i2) 
#
                  tppqq(a,i2,j,j1)  = Vpiqj(a,i2,j1,j) 
                  tppqq(a,i2,j,j1) += Vpiqj(a,i2,j,j1) 
#
                  t1jj(j,j1)        = tppqq(a,i2,j,j1)*Uyaa(a,i2) 
                  tjj(j,j1)        += t1jj(j,j1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              Vpiqj(i3,i2,j,j1) j # + 
                  REQUEST              Vpiqj(i2,i3,j,j1) j # + 
                  GET                  Uyaa(i3,i2) 
#
                  tppqq(i3,i2,j,j1)  = Vpiqj(i2,i3,j,j1) 
                  tppqq(i3,i2,j,j1) += Vpiqj(i3,i2,j,j1) 
#
                  t1jj(j,j1)         = tppqq(i3,i2,j,j1)*Uyaa(i3,i2)
                  tjj(j,j1)         += t1jj(j,j1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            PUT Fyb(j,j1) += tjj(j,j1)  
#
      ENDPARDO j, j1 
#
#     beta-beta virtual-occupied block 
#     -------------------------------- 
#
      PARDO j, b1 
#
            tjb(j,b1) = 0.0 
#
            DO q 
#
               GET          Uybb(q,j) 
               GET          Uybb(q,b1) 
#
               t1jb(j,b1) = Uybb(q,j)*fockmo_b(b1,q) 
               tjb(j,b1) += t1jb(j,b1) 
#
               t1jb(j,b1) = Uybb(q,b1)*fockmo_b(q,j) 
               tjb(j,b1) += t1jb(j,b1) 
#
            ENDDO q 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Vjbbj(j,b1,b,j2)  b # + 
                  REQUEST             Vbbjj(b,b1,j,j2)  b # - 
                  REQUEST             VSqjqj(b1,j,b,j2) b # + 
                  GET                 Uybb(b,j2) 
#
                  tqqqq(j,b1,b,j2)  = VSqjqj(b1,j,b,j2) 
                  t1qqqq(j,b1,b,j2) = Vbbjj(b,b1,j,j2)  
                  tqqqq(j,b1,b,j2) -= t1qqqq(j,b1,b,j2)  
                  tqqqq(j,b1,b,j2) += Vjbbj(j,b1,b,j2)  
#
                  t1jb(j,b1)        = tqqqq(j,b1,b,j2)*Uybb(b,j2) 
                  tjb(j,b1)        += t1jb(j,b1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              VSqjqj(b1,j,j2,j3) b1 # + 
                  REQUEST              VSqjqj(b1,j,j3,j2) b1 # + 
                  GET                  Uybb(j3,j2) 
#
                  tqqqq(b1,j,j3,j2)  = VSqjqj(b1,j,j2,j3) 
                  tqqqq(b1,j,j3,j2) += VSqjqj(b1,j,j3,j2) 
#
                  t1jb(j,b1)         = tqqqq(b1,j,j3,j2)*Uybb(j3,j2)
                  tjb(j,b1)         += t1jb(j,b1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Viabj(i2,a,b1,j) a # (j,b1,a,i2) # + 
                  REQUEST             Vpiqj(a,i2,b1,j) a # + 
                  GET                 Uyaa(a,i2) 
#
                  tppqq(a,i2,b1,j)  = Viabj(i2,a,b1,j) 
                  tppqq(a,i2,b1,j) += Vpiqj(a,i2,b1,j) 
#
                  t1jb(j,b1)        = tppqq(a,i2,b1,j)*Uyaa(a,i2) 
                  tjb(j,b1)        += t1jb(j,b1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              Vpiqj(i2,i3,b1,j) j # + 
                  REQUEST              Vpiqj(i3,i2,b1,j) j # + 
                  GET                  Uyaa(i3,i2) 
#
                  tppqq(i3,i2,b1,j)  = Vpiqj(i2,i3,b1,j) 
                  tppqq(i3,i2,b1,j) += Vpiqj(i3,i2,b1,j) 
#
                  t1jb(j,b1)         = tppqq(i3,i2,b1,j)*Uyaa(i3,i2)
                  tjb(j,b1)         += t1jb(j,b1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            tbj(b1,j)      = tjb(j,b1) 
            PUT Fyb(j,b1) += tjb(j,b1)  
            PUT Fyb(b1,j) += tbj(b1,j)  
#
      ENDPARDO j, b1 
#
      execute sip_barrier 
#
      ENDPROC FINTY_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FINTX_TRAN 
#     --------------- 
#
#     The transformed first-derivative fock matrix is computed. The 
#     perturbation is defined by iatom, ix and icenter and the 
#     final arrays are Fxa and Fxb. 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)      = txp(mu,p)*ca(mu,p1) 
                  PUT Fxa(p1,p) += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)      = txq(mu,q)*cb(mu,q1) 
                  PUT Fxb(q1,q) += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
#           Compute contributions to the HF hessian. 
#           ---------------------------------------- 
#
            GET            dhfya(mu,nu) 
            GET            dhfyb(mu,nu) 
            GET            QABxx(mu,nu) 
            GET            QAxx(mu,nu) 
            GET            QBxx(mu,nu) 

            t1xx(mu,nu)  = txx(mu,nu) 
            t1xx(mu,nu) += QABxx(mu,nu) 
            t1xx(mu,nu) += QAxx(mu,nu) 

            etemp        = t1xx(mu,nu)*dhfya(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 

            t1xx(mu,nu)  = txx(mu,nu) 
            t1xx(mu,nu) += QABxx(mu,nu) 
            t1xx(mu,nu) += QBxx(mu,nu) 

            etemp        = t1xx(mu,nu)*dhfyb(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
#     Add contributions from coefficient derivatives and two-electron integrals  
#     ------------------------------------------------------------------------- 
#
#     alpha-alpha virtual-virtual block 
#     --------------------------------- 
#
      PARDO a, a1 
#
            taa(a,a1) = 0.0 
#
            DO p
#
               GET          Uxaa(p,a) 
               GET          Uxaa(p,a1) 
#
               t1aa(a,a1) = Uxaa(p,a)*fockmo_a(p,a1) 
               taa(a,a1) += t1aa(a,a1) 
#
               t1aa(a,a1) = fockmo_a(a,p)*Uxaa(p,a1) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO p  
#
            DO i 
#
               DO a2 
#
                  REQUEST             VSaaai(a,a1,a2,i) a  
                  REQUEST             VSaaai(a1,a,a2,i) a  
                  GET                 Uxaa(a2,i) 
#
                  tpppp(a,a1,a2,i)  = VSaaai(a,a1,a2,i)  
                  t1pppp(a,a1,a2,i) = VSaaai(a1,a,a2,i)  
                  tpppp(a,a1,a2,i) += t1pppp(a,a1,a2,i)
#
                  t1aa(a,a1)        = tpppp(a,a1,a2,i)*Uxaa(a2,i) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO a2 
#
               DO i2 
#
                  REQUEST             Vaaii(a,a1,i2,i) a # +  
                  REQUEST             Viaai(i2,a1,a,i) a # -  
                  REQUEST             Vaaii(a,a1,i,i2) a # +  
                  REQUEST             Viaai(i,a1,a,i2) a # -  
                  GET                 Uxaa(i2,i) 
#
                  tpppp(a,a1,i2,i)  = Vaaii(a,a1,i2,i)  
                  t1pppp(a,a1,i2,i) = Viaai(i2,a1,a,i)  
                  t2pppp(a,a1,i2,i) = Vaaii(a,a1,i,i2)  
                  t3pppp(a,a1,i2,i) = Viaai(i,a1,a,i2)  
                  tpppp(a,a1,i2,i) -= t1pppp(a,a1,i2,i)
                  tpppp(a,a1,i2,i) += t2pppp(a,a1,i2,i)
                  tpppp(a,a1,i2,i) -= t3pppp(a,a1,i2,i)
#   
                  t1aa(a,a1)        = tpppp(a,a1,i2,i)*Uxaa(i2,i) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO i2 
#
            ENDDO i
#
            DO j 
#
               DO b2 
#
                  REQUEST             Vaabj(a,a1,b2,j) a  
                  REQUEST             Vaabj(a1,a,b2,j) a  
                  GET                 Uxbb(b2,j) 
#
                  tppqq(a,a1,b2,j)  = Vaabj(a,a1,b2,j)  
                  t1ppqq(a,a1,b2,j) = Vaabj(a1,a,b2,j)  
                  tppqq(a,a1,b2,j) += t1ppqq(a,a1,b2,j)
#
                  t1aa(a,a1)        = tppqq(a,a1,b2,j)*Uxbb(b2,j) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO b2 
#
               DO j2 
#
                  REQUEST             Vaajj(a,a1,j2,j) a # +  
                  REQUEST             Vaajj(a,a1,j,j2) a # +  
                  GET                 Uxbb(j2,j) 
#
                  tppqq(a,a1,j2,j)  = Vaajj(a,a1,j2,j)  
                  t2ppqq(a,a1,j2,j) = Vaajj(a,a1,j,j2)  
                  tppqq(a,a1,j2,j) += t2ppqq(a,a1,j2,j)
#
                  t1aa(a,a1)        = tppqq(a,a1,j2,j)*Uxbb(j2,j) 
                  taa(a,a1)        += t1aa(a,a1)
#
               ENDDO j2 
#
            ENDDO j
#
            PUT Fxa(a,a1) += taa(a,a1) 
#
      ENDPARDO a, a1 
#
#     alpha-alpha occupied-occupied block 
#     ----------------------------------- 
#
      PARDO i, i1 
#
            tii(i,i1) = 0.0 
#
            DO p 
#
               GET          Uxaa(p,i) 
               GET          Uxaa(p,i1) 
#
               t1ii(i,i1) = Uxaa(p,i)*fockmo_a(i1,p) 
               tii(i,i1) += t1ii(i,i1) 
#
               t1ii(i,i1) = Uxaa(p,i1)*fockmo_a(p,i) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO p 
#
            DO i2 
#
               DO a 
#
                  REQUEST             VSpipi(i,i1,a,i2) a # + 
                  REQUEST             VSpipi(i1,i,a,i2) a # + 
                  GET                 Uxaa(a,i2) 
#
                  tpppp(i,i1,a,i2)  = VSpipi(i1,i,a,i2) 
                  tpppp(i,i1,a,i2) += VSpipi(i,i1,a,i2) 
#
                  t1ii(i,i1)        = tpppp(i,i1,a,i2)*Uxaa(a,i2) 
                  tii(i,i1)        += t1ii(i,i1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              VSpipi(i,i1,i3,i2) i # + 
                  REQUEST              VSpipi(i,i1,i2,i3) i # + 
                  GET                  Uxaa(i3,i2) 
#
                  tpppp(i,i1,i3,i2)  = VSpipi(i,i1,i2,i3) 
                  tpppp(i,i1,i3,i2) += VSpipi(i,i1,i3,i2) 
#
                  t1ii(i,i1)         = tpppp(i,i1,i3,i2)*Uxaa(i3,i2)
                  tii(i,i1)         += t1ii(i,i1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Vpiqj(i,i1,b,j2) b # + 
                  REQUEST             Vpiqj(i1,i,b,j2) b # + 
                  GET                 Uxbb(b,j2) 
#
                  tppqq(i,i1,b,j2)  = Vpiqj(i1,i,b,j2) 
                  tppqq(i,i1,b,j2) += Vpiqj(i,i1,b,j2) 
#
                  t1ii(i,i1)        = tppqq(i,i1,b,j2)*Uxbb(b,j2) 
                  tii(i,i1)        += t1ii(i,i1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              Vpiqj(i,i1,j3,j2) i # + 
                  REQUEST              Vpiqj(i,i1,j2,j3) i # + 
                  GET                  Uxbb(j3,j2) 
#
                  tppqq(i,i1,j3,j2)  = Vpiqj(i,i1,j2,j3) 
                  tppqq(i,i1,j3,j2) += Vpiqj(i,i1,j3,j2) 
#
                  t1ii(i,i1)         = tppqq(i,i1,j3,j2)*Uxbb(j3,j2)
                  tii(i,i1)         += t1ii(i,i1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            PUT Fxa(i,i1) += tii(i,i1)  
#
      ENDPARDO i, i1 
#
#     alpha-alpha virtual-occupied block 
#     ---------------------------------- 
#
      PARDO i, a1 
#
            tia(i,a1) = 0.0 
#
            DO p 
#
               GET          Uxaa(p,i) 
               GET          Uxaa(p,a1) 
#
               t1ia(i,a1) = Uxaa(p,i)*fockmo_a(a1,p) 
               tia(i,a1) += t1ia(i,a1) 
#
               t1ia(i,a1) = Uxaa(p,a1)*fockmo_a(p,i) 
               tia(i,a1) += t1ia(i,a1) 
#
            ENDDO p 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Viaai(i,a1,a,i2)  a # + 
                  REQUEST             Vaaii(a,a1,i,i2)  a # - 
                  REQUEST             VSpipi(a1,i,a,i2) a # + 
                  GET                 Uxaa(a,i2) 
#
                  tpppp(i,a1,a,i2)  = VSpipi(a1,i,a,i2) 
                  t1pppp(i,a1,a,i2) = Vaaii(a,a1,i,i2)  
                  tpppp(i,a1,a,i2) -= t1pppp(i,a1,a,i2)  
                  tpppp(i,a1,a,i2) += Viaai(i,a1,a,i2)  
#
                  t1ia(i,a1)        = tpppp(i,a1,a,i2)*Uxaa(a,i2) 
                  tia(i,a1)        += t1ia(i,a1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              VSpipi(a1,i,i2,i3) i # + 
                  REQUEST              VSpipi(a1,i,i3,i2) i # + 
                  GET                  Uxaa(i3,i2) 
#
                  tpppp(a1,i,i3,i2)  = VSpipi(a1,i,i2,i3) 
                  tpppp(a1,i,i3,i2) += VSpipi(a1,i,i3,i2) 
#   
                  t1ia(i,a1)         = tpppp(a1,i,i3,i2)*Uxaa(i3,i2)
                  tia(i,a1)         += t1ia(i,a1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Viabj(i,a1,b,j2) b # + 
                  REQUEST             Vpiqj(a1,i,b,j2) b # + 
                  GET                 Uxbb(b,j2) 
#
                  tppqq(i,a1,b,j2)  = Vpiqj(a1,i,b,j2) 
                  tppqq(i,a1,b,j2) += Viabj(i,a1,b,j2) 
#
                  t1ia(i,a1)        = tppqq(i,a1,b,j2)*Uxbb(b,j2) 
                  tia(i,a1)        += t1ia(i,a1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              Vpiqj(a1,i,j2,j3) i # + 
                  REQUEST              Vpiqj(a1,i,j3,j2) i # + 
                  GET                  Uxbb(j3,j2) 
#
                  tppqq(a1,i,j3,j2)  = Vpiqj(a1,i,j2,j3) 
                  tppqq(a1,i,j3,j2) += Vpiqj(a1,i,j3,j2) 
#
                  t1ia(i,a1)         = tppqq(a1,i,j3,j2)*Uxbb(j3,j2)
                  tia(i,a1)         += t1ia(i,a1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            tai(a1,i)      = tia(i,a1) 
            PUT Fxa(i,a1) += tia(i,a1)  
            PUT Fxa(a1,i) += tai(a1,i)  
#
      ENDPARDO i, a1 
#
#     beta-beta virtual-virtual block 
#     --------------------------------- 
#
      PARDO b, b1 
#
            tbb(b,b1) = 0.0 
#
            DO q
#
               GET          Uxbb(q,b) 
               GET          Uxbb(q,b1) 
#
               t1bb(b,b1) = Uxbb(q,b)*fockmo_b(q,b1) 
               tbb(b,b1) += t1bb(b,b1) 
#
               t1bb(b,b1) = fockmo_b(b,q)*Uxbb(q,b1) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO q  
#
            DO j 
#
               DO b2 
#
                  REQUEST             VSbbbj(b,b1,b2,j) b  
                  REQUEST             VSbbbj(b1,b,b2,j) b  
                  GET                 Uxbb(b2,j) 
#
                  tqqqq(b,b1,b2,j)  = VSbbbj(b,b1,b2,j)  
                  t1qqqq(b,b1,b2,j) = VSbbbj(b1,b,b2,j)  
                  tqqqq(b,b1,b2,j) += t1qqqq(b,b1,b2,j)
#
                  t1bb(b,b1)        = tqqqq(b,b1,b2,j)*Uxbb(b2,j) 
                  t1bb(b,b1)        = tqqqq(b,b1,b2,j)*Uxbb(b2,j) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO b2 
#
               DO j2 
#
                  REQUEST             Vbbjj(b,b1,j2,j) b # +  
                  REQUEST             Vjbbj(j2,b1,b,j) b # -  
                  REQUEST             Vbbjj(b,b1,j,j2) b # +  
                  REQUEST             Vjbbj(j,b1,b,j2) b # -  
                  GET                 Uxbb(j2,j) 
#
                  tqqqq(b,b1,j2,j)  = Vbbjj(b,b1,j2,j)  
                  t1qqqq(b,b1,j2,j) = Vjbbj(j2,b1,b,j)  
                  t2qqqq(b,b1,j2,j) = Vbbjj(b,b1,j,j2)  
                  t3qqqq(b,b1,j2,j) = Vjbbj(j,b1,b,j2)  
                  tqqqq(b,b1,j2,j) -= t1qqqq(b,b1,j2,j)
                  tqqqq(b,b1,j2,j) += t2qqqq(b,b1,j2,j)
                  tqqqq(b,b1,j2,j) -= t3qqqq(b,b1,j2,j)
#
                  t1bb(b,b1)        = tqqqq(b,b1,j2,j)*Uxbb(j2,j) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO j2 
#
            ENDDO j
#
            DO i 
#
               DO a2 
#
                  REQUEST             Vbbai(b,b1,a2,i) b  
                  REQUEST             Vbbai(b1,b,a2,i) b  
                  GET                 Uxaa(a2,i) 
#
                  tqqpp(b,b1,a2,i)  = Vbbai(b,b1,a2,i)  
                  t1qqpp(b,b1,a2,i) = Vbbai(b1,b,a2,i)  
                  tqqpp(b,b1,a2,i) += t1qqpp(b,b1,a2,i)
#
                  t1bb(b,b1)        = tqqpp(b,b1,a2,i)*Uxaa(a2,i) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO a2 
#
               DO i2 
#
                  REQUEST             Vbbii(b,b1,i2,i) b # +  
                  REQUEST             Vbbii(b,b1,i,i2) b # +  
                  GET                 Uxaa(i2,i) 
#
                  tqqpp(b,b1,i2,i)  = Vbbii(b,b1,i2,i)  
                  t2qqpp(b,b1,i2,i) = Vbbii(b,b1,i,i2)  
                  tqqpp(b,b1,i2,i) += t2qqpp(b,b1,i2,i)
#
                  t1bb(b,b1)        = tqqpp(b,b1,i2,i)*Uxaa(i2,i) 
                  tbb(b,b1)        += t1bb(b,b1)
#
               ENDDO i2 
#
            ENDDO i
#
            PUT Fxb(b,b1) += tbb(b,b1) 
#
      ENDPARDO b, b1 
#
#     beta-beta occupied-occupied block 
#     ----------------------------------- 
#
      PARDO j, j1 
#
            tjj(j,j1) = 0.0 
#
            DO q 
#
               GET          Uxbb(q,j) 
               GET          Uxbb(q,j1) 
#
               t1jj(j,j1) = Uxbb(q,j)*fockmo_b(j1,q) 
               tjj(j,j1) += t1jj(j,j1) 
#
               t1jj(j,j1) = Uxbb(q,j1)*fockmo_b(q,j) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO q 
#
            DO j2 
#
               DO b 
#
                  REQUEST             VSqjqj(j,j1,b,j2) b # + 
                  REQUEST             VSqjqj(j1,j,b,j2) b # + 
                  GET                 Uxbb(b,j2) 
#
                  tqqqq(j,j1,b,j2)  = VSqjqj(j1,j,b,j2) 
                  tqqqq(j,j1,b,j2) += VSqjqj(j,j1,b,j2) 
#
                  t1jj(j,j1)        = tqqqq(j,j1,b,j2)*Uxbb(b,j2) 
                  tjj(j,j1)        += t1jj(j,j1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              VSqjqj(j,j1,j3,j2) j # + 
                  REQUEST              VSqjqj(j,j1,j2,j3) j # + 
                  GET                  Uxbb(j3,j2) 
#
                  tqqqq(j,j1,j3,j2)  = VSqjqj(j,j1,j2,j3) 
                  tqqqq(j,j1,j3,j2) += VSqjqj(j,j1,j3,j2) 
#   
                  t1jj(j,j1)         = tqqqq(j,j1,j3,j2)*Uxbb(j3,j2)
                  tjj(j,j1)         += t1jj(j,j1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Vpiqj(a,i2,j,j1) a # + 
                  REQUEST             Vpiqj(a,i2,j1,j) a # + 
                  GET                 Uxaa(a,i2) 
#
                  tppqq(a,i2,j,j1)  = Vpiqj(a,i2,j1,j) 
                  tppqq(a,i2,j,j1) += Vpiqj(a,i2,j,j1) 
#
                  t1jj(j,j1)        = tppqq(a,i2,j,j1)*Uxaa(a,i2) 
                  tjj(j,j1)        += t1jj(j,j1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              Vpiqj(i3,i2,j,j1) j # + 
                  REQUEST              Vpiqj(i2,i3,j,j1) j # + 
                  GET                  Uxaa(i3,i2) 
#
                  tppqq(i3,i2,j,j1)  = Vpiqj(i2,i3,j,j1) 
                  tppqq(i3,i2,j,j1) += Vpiqj(i3,i2,j,j1) 
#
                  t1jj(j,j1)         = tppqq(i3,i2,j,j1)*Uxaa(i3,i2)
                  tjj(j,j1)         += t1jj(j,j1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            PUT Fxb(j,j1) += tjj(j,j1)  
#
      ENDPARDO j, j1 
#
#     beta-beta virtual-occupied block 
#     -------------------------------- 
#
      PARDO j, b1 
#
            tjb(j,b1) = 0.0 
#
            DO q 
#
               GET          Uxbb(q,j) 
               GET          Uxbb(q,b1) 
#
               t1jb(j,b1) = Uxbb(q,j)*fockmo_b(b1,q) 
               tjb(j,b1) += t1jb(j,b1) 
#
               t1jb(j,b1) = Uxbb(q,b1)*fockmo_b(q,j) 
               tjb(j,b1) += t1jb(j,b1) 
#
            ENDDO q 
#
            DO j2 
#
               DO b 
#
                  REQUEST             Vjbbj(j,b1,b,j2)  b # + 
                  REQUEST             Vbbjj(b,b1,j,j2)  b # - 
                  REQUEST             VSqjqj(b1,j,b,j2) b # + 
                  GET                 Uxbb(b,j2) 
#
                  tqqqq(j,b1,b,j2)  = VSqjqj(b1,j,b,j2) 
                  t1qqqq(j,b1,b,j2) = Vbbjj(b,b1,j,j2)  
                  tqqqq(j,b1,b,j2) -= t1qqqq(j,b1,b,j2)  
                  tqqqq(j,b1,b,j2) += Vjbbj(j,b1,b,j2)  
#
                  t1jb(j,b1)        = tqqqq(j,b1,b,j2)*Uxbb(b,j2) 
                  tjb(j,b1)        += t1jb(j,b1) 
#
               ENDDO b 
#
               DO j3 
#
                  REQUEST              VSqjqj(b1,j,j2,j3) j # + 
                  REQUEST              VSqjqj(b1,j,j3,j2) j # + 
                  GET                  Uxbb(j3,j2) 
#
                  tqqqq(b1,j,j3,j2)  = VSqjqj(b1,j,j2,j3) 
                  tqqqq(b1,j,j3,j2) += VSqjqj(b1,j,j3,j2) 
#
                  t1jb(j,b1)         = tqqqq(b1,j,j3,j2)*Uxbb(j3,j2)
                  tjb(j,b1)         += t1jb(j,b1) 
#
               ENDDO j3 
#
            ENDDO j2 
#
            DO i2 
#
               DO a 
#
                  REQUEST             Viabj(i2,a,b1,j) a # (j,b1,a,i2) # + 
                  REQUEST             Vpiqj(a,i2,b1,j) a # + 
                  GET                 Uxaa(a,i2) 
#
                  tppqq(a,i2,b1,j)  = Viabj(i2,a,b1,j) 
                  tppqq(a,i2,b1,j) += Vpiqj(a,i2,b1,j) 
#
                  t1jb(j,b1)        = tppqq(a,i2,b1,j)*Uxaa(a,i2) 
                  tjb(j,b1)        += t1jb(j,b1) 
#
               ENDDO a 
#
               DO i3 
#
                  REQUEST              Vpiqj(i2,i3,b1,j) j # + 
                  REQUEST              Vpiqj(i3,i2,b1,j) j # + 
                  GET                  Uxaa(i3,i2) 
#
                  tppqq(i3,i2,b1,j)  = Vpiqj(i2,i3,b1,j) 
                  tppqq(i3,i2,b1,j) += Vpiqj(i3,i2,b1,j) 
#
                  t1jb(j,b1)         = tppqq(i3,i2,b1,j)*Uxaa(i3,i2)
                  tjb(j,b1)         += t1jb(j,b1) 
#
               ENDDO i3 
#
            ENDDO i2 
#
            tbj(b1,j)      = tjb(j,b1) 
            PUT Fxb(j,b1) += tjb(j,b1)  
            PUT Fxb(b1,j) += tbj(b1,j)  
#
      ENDPARDO j, b1 
#
      ENDPROC FINTX_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC SINTY_TRAN 
#     --------------- 
#
#     The transformed first-derivative overlap matrix is computed. The 
#     perturbation is defined by jatom, jx and jcenter and the 
#     final arrays are Sya and Syb. 
#
      create Sya 
      create Syb 
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            txx(mu,nu)  = 0.0 
#
            execute overlap_der txx(mu,nu) 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)       = txp(mu,p)*ca(mu,p1) 
                  PUT Sya(p1,p)  += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)       = txq(mu,q)*cb(mu,q1) 
                  PUT Syb(q1,q)  += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
      ENDPARDO mu, nu 

      execute sip_barrier 
#
      ENDPROC SINTY_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC SINTX_TRAN 
#     --------------- 
#
#     The transformed first-derivative overlap matrix is computed. The 
#     perturbation is defined by iatom, ix and icenter and the 
#     final arrays are Sxa and Sxb. 
#
      create Sxa 
      create Sxb 
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            execute overlap_der txx(mu,nu) 
#
#           Compute contributions to HF hessian. 
#           ------------------------------------ 
#
            GET            whfya(mu,nu) 
            GET            whfyb(mu,nu) 
            t1xx(mu,nu)  = whfya(mu,nu) 
            t1xx(mu,nu) += whfyb(mu,nu) 
            etemp        = txx(mu,nu)*t1xx(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)       = txp(mu,p)*ca(mu,p1) 
                  PUT Sxa(p1,p)  += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)       = txq(mu,q)*cb(mu,q1) 
                  PUT Sxb(q1,q)  += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
      ENDPARDO mu, nu 
#
      ENDPROC SINTX_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Uy_XX  
#     ----------- 
#
      create Uyaa 
      create Uybb 
      execute sip_barrier 
#
#     Form the virtual-occupied block of the Q array --> Qyai, Qybj 
#     ------------------------------------------------------------- 
#
#     Qyai first 
#     ---------- 
#
      PARDO a, i 
#
            tai(a,i) = 0.0 # Fya(a,i) 
#
            DO i1 
#
               GET         Sya(a,i1) 
               t1ai(a,i) = Sya(a,i1)*Fockmo_a(i1,i) 
               tai(a,i) -= t1ai(a,i) 
#
               DO i2 
#
                  REQUEST     VSpipi(a,i,i2,i1) a  
                  GET         Sya(i2,i1) 
                  t1ai(a,i) = VSpipi(a,i,i2,i1)*Sya(i2,i1) 
                  tai(a,i) -= t1ai(a,i) 
#
               ENDDO i2 
#
            ENDDO i1 
#
            DO j 
            DO j1 
#
               REQUEST     Vpiqj(a,i,j1,j) a  
               GET         Syb(j1,j) 
               t1ai(a,i) = Vpiqj(a,i,j,j1)*Syb(j1,j) 
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO j1 
            ENDDO j 
#
            PUT Qyai(a,i) += tai(a,i) 
#
      ENDPARDO a, i 
#
#     Qybj next  
#     --------- 
#
      PARDO b, j 
#
            tbj(b,j) = 0.0 # Fyb(b,j) 
#
            DO j1 
#
               GET         Syb(b,j1) 
               t1bj(b,j) = Syb(b,j1)*Fockmo_b(j1,j) 
               tbj(b,j) -= t1bj(b,j) 
#
               DO j2 
#
                  REQUEST     VSqjqj(b,j,j2,j1) b  
                  GET         Syb(j1,j2) 
                  t1bj(b,j) = VSqjqj(b,j,j2,j1)*Syb(j1,j2) 
                  tbj(b,j) -= t1bj(b,j) 
#
               ENDDO j2 
#
            ENDDO j1 
#
            DO i 
            DO i1 
#
               REQUEST     Vpiqj(i1,i,b,j) b  
               GET         Sya(i,i1) 
               t1bj(b,j) = Vpiqj(i1,i,b,j)*Sya(i,i1) 
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO i1 
            ENDDO i 
#
            PUT Qybj(b,j) += tbj(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC Uy_XX  
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Ux_XX  
#     ----------- 
#
      create Uxaa 
      create Uxbb 
#
      execute sip_barrier 
#
#     Form the virtual-occupied block of the Q array --> Qxai, Qxbj
#     -------------------------------------------------------------
#
#     Qxai first
#     ----------
#
      PARDO a, i
#
            tai(a,i) = 0.0 # Fxa(a,i)
#
            DO i1
#
               GET         Sxa(a,i1)
               t1ai(a,i) = Sxa(a,i1)*Fockmo_a(i,i1)
               tai(a,i) -= t1ai(a,i)
#
               DO i2
#
                  REQUEST     VSpipi(a,i,i2,i1) a 
                  GET         Sxa(i1,i2)
                  t1ai(a,i) = VSpipi(a,i,i2,i1)*Sxa(i1,i2)
                  tai(a,i) -= t1ai(a,i)
#
               ENDDO i2
#
            ENDDO i1
#
            DO j
            DO j1
#
               REQUEST     Vpiqj(a,i,j1,j) a 
               GET         Sxb(j,j1)
               t1ai(a,i) = Vpiqj(a,i,j1,j)*Sxb(j,j1)
               tai(a,i) -= t1ai(a,i)
#
            ENDDO j1
            ENDDO j
#
            PUT Qxai(a,i) += tai(a,i)
#
      ENDPARDO a, i
#
#     Qxbj next
#     ---------
#
      PARDO b, j
#
            tbj(b,j) = 0.0 # Fxb(b,j)
#
            DO j1
#
               GET         Sxb(b,j1)
               t1bj(b,j) = Sxb(b,j1)*Fockmo_b(j,j1)
               tbj(b,j) -= t1bj(b,j)
#
               DO j2
#
                  REQUEST     VSqjqj(b,j,j2,j1) b 
                  GET         Sxb(j1,j2)
                  t1bj(b,j) = VSqjqj(b,j,j2,j1)*Sxb(j1,j2)
                  tbj(b,j) -= t1bj(b,j)
#
               ENDDO j2
#
            ENDDO j1
#
            DO i
            DO i1
#
               REQUEST     Vpiqj(i1,i,b,j) b 
               GET         Sxa(i,i1)
               t1bj(b,j) = Vpiqj(i1,i,b,j)*Sxa(i,i1)
               tbj(b,j) -= t1bj(b,j)
#
            ENDDO i1
            ENDDO i
#
            PUT Qxbj(b,j) += tbj(b,j)
#
      ENDPARDO b, j
#
      ENDPROC Ux_XX  
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC I_HF
#     --------
#
      create Ihfa 
      create Ihfb 
      create Ihf 
      execute sip_barrier 
#
      PARDO mu, nu
#
            Txx(mu,nu)  = 0.0 
            T2xx(mu,nu) = 0.0 
#
            DO i
#
               Txi(nu,i) = 0.0
#
               DO i1
#
                  T1xi(nu,i) = ca(nu,i1)*fockmo_a(i,i1)
                  Txi(nu,i) -= T1xi(nu,i)
#
               ENDDO i1
#
               T1xx(mu,nu) = ca(mu,i)*Txi(nu,i)
               Txx(mu,nu) += T1xx(mu,nu)  
#
            ENDDO i 
#
            DO j
#
               Txj(nu,j) = 0.0
#
               DO j1
#
                  T1xj(nu,j) = cb(nu,j1)*fockmo_b(j,j1)
                  Txj(nu,j) -= T1xj(nu,j)
#
               ENDDO j1
#
               T1xx(mu,nu)  = cb(mu,j)*Txj(nu,j)
               T2xx(mu,nu) += T1xx(mu,nu)  
#
            ENDDO j 
#
            T1xx(mu,nu)      = Txx(mu,nu) 
            T1xx(mu,nu)     += T2xx(mu,nu) 
            PUT Ihf(mu,nu)  += T1xx(mu,nu)
            PUT Ihfa(mu,nu)  = Txx(mu,nu)
            PUT Ihfb(mu,nu)  = T2xx(mu,nu)
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
      ENDPROC I_HF
#     ------------
#
# ---------------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      create Dhfa 
      create Dhfb 
      execute sip_barrier 
#
      PARDO mu, nu 
#
            Txx(mu,nu)  = 0.0 
            T2xx(mu,nu) = 0.0 
#
            DO i
#
               Txi(nu,i)   = ca(nu,i)
               T1xx(mu,nu) = ca(mu,i)*Txi(nu,i)
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO i 
#
            DO j
#
               Txj(nu,j)    = cb(nu,j)
               T1xx(mu,nu)  = cb(mu,j)*Txj(nu,j)
               T2xx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO j 
#
            PUT Dhfa(mu,nu) = Txx(mu,nu)
            PUT Dhfb(mu,nu) = T2xx(mu,nu)
#
      ENDPARDO mu, nu 
#
      ENDPROC HFDENS
#     --------------
#
# ---------------------------------------------------------------------------------
#
      PROC SXY_CONT
#     -------------
#
# Contract with the second derivative integrals
# --------------------------------------
#
      PARDO mu, nu
#
            GET             Ihf(mu,nu)
            GET             Ixx(mu,nu)

            Txx(mu,nu)    = Ihf(mu,nu)
            Txx(mu,nu)   += Ixx(mu,nu)

            EXECUTE SCONTXY Txx(mu,nu)
# 
      ENDPARDO mu, nu
#
      ENDPROC SXY_CONT
#     ----------------
#
# ---------------------------------------------------------------------------------
#
      PROC DXY_CONT
#     -------------
#
# Contract with the second derivative integrals
# --------------------------------------
#
      PARDO mu, nu
            GET             Dxx_a(mu,nu)
            GET             Dxx_b(mu,nu)
            GET             Dhfa(mu,nu)
            GET             Dhfb(mu,nu)
#
            Txx(mu,nu)    = Dxx_a(mu,nu)
            Txx(mu,nu)   += Dxx_b(mu,nu)
            Txx(mu,nu)   += Dhfa(mu,nu)
            Txx(mu,nu)   += Dhfb(mu,nu)
#
            EXECUTE HCONTXY Txx(mu,nu)
#
      ENDPARDO mu, nu
#
      ENDPROC DXY_CONT
#     ----------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC GIJAB_CONT
#     ---------------
#
#     First 'backtransform' G^{ab}_{ij} to G^{mu nu}_{ij}.
#     ----------------------------------------------------
#
#     alpha/alpha block.
#     ------------------
#
      PARDO a, a1, i, i1
#
            REQUEST T1aiai_aa(a,i,a1,i1) a 
#
            DO mu
#
               Txiai(mu,i,a1,i1) = T1aiai_aa(a,i,a1,i1)*ca(mu,a)
#
               DO nu
#
                  Txixi(mu,i,nu,i1)          = Txiai(mu,i,a1,i1)*ca(nu,a1)
                  PREPARE Vxixi(mu,i,nu,i1) += Txixi(mu,i,nu,i1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1, i, i1
#
#     beta/beta block.
#     ----------------
#
      PARDO b, b1, j, j1
#
            REQUEST T1bjbj_bb(b,j,b1,j1) b 
#
            DO mu
#
               Txjbj(mu,j,b1,j1) = T1bjbj_bb(b,j,b1,j1)*cb(mu,b)
#
               DO nu
#
                  Txjxj(mu,j,nu,j1)          = Txjbj(mu,j,b1,j1)*cb(nu,b1)
                  PREPARE Vxjxj(mu,j,nu,j1) += Txjxj(mu,j,nu,j1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1, j, j1
#
#     alpha/beta block.
#     -----------------
#
      PARDO a, b, i, j
#
            REQUEST T1aibj_ab(a,i,b,j) a 
#
            DO mu
#
               Txibj(mu,i,b,j) = T1aibj_ab(a,i,b,j)*ca(mu,a)
#
               DO nu
#
                  Txixj(mu,i,nu,j)          = Txibj(mu,i,b,j)*cb(nu,b)
                  PREPARE Vxixj(mu,i,nu,j) += Txixj(mu,i,nu,j)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, b, i, j
#
      execute server_barrier
#
#     Complete backtransformation and 'contract' with second derivative integral.
#     ---------------------------------------------------------------------------
#
        PARDO mu, nu, lambda
#
              allocate D2(mu,lambda,nu,*)
#
              DO i1
#
                 Txxxi(mu,lambda,nu,i1) = 0.0
#
                 DO i
#
                    REQUEST                   Vxixi(mu,i,nu,i1) i 
                    T1xxxi(mu,lambda,nu,i1) = Vxixi(mu,i,nu,i1)*ca(lambda,i)
                    Txxxi(mu,lambda,nu,i1) += T1xxxi(mu,lambda,nu,i1)
#
                 ENDDO i
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxi(mu,lambda,nu,i1)*ca(sigma,i1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO i1
#
              DO j1
#
                 Txxxj(mu,lambda,nu,j1) = 0.0
#
                 DO j
#
                    REQUEST                   Vxjxj(mu,j,nu,j1) j 
                    T1xxxj(mu,lambda,nu,j1) = Vxjxj(mu,j,nu,j1)*cb(lambda,j)
                    Txxxj(mu,lambda,nu,j1) += T1xxxj(mu,lambda,nu,j1)
#
                 ENDDO j
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j1)*cb(sigma,j1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j1
#
              DO j
#
                 Txxxj(mu,lambda,nu,j) = 0.0
#
                 DO i
#
                    REQUEST                  Vxixj(mu,i,nu,j) j 
                    T1xxxj(mu,lambda,nu,j) = Vxixj(mu,i,nu,j)*ca(lambda,i)
                    Txxxj(mu,lambda,nu,j) += T1xxxj(mu,lambda,nu,j)
#
                 ENDDO i
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j)*cb(sigma,j)
                    Txxxx(mu,lambda,nu,sigma)*= 2.0
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j
#
              DO sigma
#
#                Get 1-particle pieces
#                ---------------------
#
                 GET DHFa(mu,lambda)
                 GET DHFa(nu,sigma)
                 GET DHFa(mu,sigma)
                 GET DHFa(nu,lambda)
#
                 GET DHFb(mu,lambda)
                 GET DHFb(nu,sigma)
                 GET DHFb(mu,sigma)
                 GET DHFb(nu,lambda)
#
                 GET Dxx_a(mu,lambda)
                 GET Dxx_a(nu,sigma)
                 GET Dxx_a(mu,sigma)
                 GET Dxx_a(nu,lambda)
#
                 GET Dxx_b(mu,lambda)
                 GET Dxx_b(nu,sigma)
                 GET Dxx_b(mu,sigma)
                 GET Dxx_b(nu,lambda)
#
#                HF only
#                -------
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 Txxxx(mu,lambda,nu,sigma)  = Txx(mu,lambda)^DHFa(nu,sigma)
#
                 Txx(mu,lambda)             = DHFb(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,lambda)             = DHFb(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFa(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFa(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFa(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFb(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFb(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txxxx(mu,lambda,nu,sigma) *= 0.5
#
#                Correlation
#                -----------
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)

                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,sigma)^DHFA(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(nu,lambda)^DHFA(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,sigma)^DHFB(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(nu,lambda)^DHFB(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
#                The nonseparable part
#                ----------------------
                 Txxxx(mu,lambda,nu,sigma) += D2(mu,lambda,nu,sigma)
#
#                Compute integral block and contract density with second-derivatives.
#                --------------------------------------------------------------------
                 execute compute_Sderivative_integrals Txxxx(mu,lambda,nu,sigma)
#
              ENDDO sigma
#
              deallocate D2(mu,lambda,nu,*)
#
        ENDPARDO mu, nu, lambda
#
      execute sip_barrier 
      execute server_barrier 
#
      ENDPROC GIJAB_CONT
#     ------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FSCF_HESS 
#     -------------- 
#
      create cya 
      create cyb 
      create dhfya 
      create dhfyb 
      create whfya 
      create whfyb 
      execute sip_barrier 
#
#     Compute derivatives of coefficients. 
#     ------------------------------------ 
#
      PARDO mu, p 
#
           txp(mu,p) = 0.0 
#
           DO p1 
#
              GET          Uyaa(p1,p) 
              t1xp(mu,p) = ca(mu,p1)*Uyaa(p1,p) 
              txp(mu,p) += t1xp(mu,p) 
#
           ENDDO p1 
#
           PUT cya(mu,p) = txp(mu,p) 
#
      ENDPARDO mu, p 
#
      PARDO mu, q 
#
           txq(mu,q) = 0.0 
#
           DO q1 
#
              GET          Uybb(q1,q) 
              t1xq(mu,q) = cb(mu,q1)*Uybb(q1,q) 
              txq(mu,q) += t1xq(mu,q) 
#
           ENDDO q1 
#
           PUT cyb(mu,q) = txq(mu,q) 
#
      ENDPARDO mu, q 
#
      execute sip_barrier 
#
#     Form derivatives of HF density. 
#     ------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component. 
#           ---------------- 
#
            txx(mu,nu) = 0.0 
#
            DO i 
#
               GET           cya(mu,i) 
               GET           cya(nu,i) 
#
               t1xx(mu,nu) = cya(mu,i)*ca(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = ca(mu,i)*cya(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO i 
#
            PUT dhfya(mu,nu) = txx(mu,nu) 
#
#           beta component. 
#           --------------- 
#
            txx(mu,nu) = 0.0 
#
            DO j 
#
               GET           cyb(mu,j) 
               GET           cyb(nu,j) 
#
               t1xx(mu,nu) = cyb(mu,j)*cb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = cb(mu,j)*cyb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO j 
#
            PUT dhfyb(mu,nu) = txx(mu,nu) 
#
      ENDPARDO mu, nu 
#
#     Compute derivatives of weighted HF density. 
#     ------------------------------------------- 
#
      PARDO mu, nu 
#
            Txx(mu,nu)  = 0.0 
            T2xx(mu,nu) = 0.0 
#
#           alpha-alpha block 
#           ----------------- 
#
            DO i 
#
#              piece 1. 
#              -------- 
#
               Txi(nu,i) = 0.0
#
               DO i1
#
                  GET          cya(nu,i1) 
                  T1xi(nu,i) = cya(nu,i1)*fockmo_a(i1,i)
                  Txi(nu,i) -= T1xi(nu,i)
#
               ENDDO i1
#
               T1xx(mu,nu) = ca(mu,i)*Txi(nu,i)
               Txx(mu,nu) += T1xx(mu,nu) 
#
#              piece 2. 
#              -------- 
#
               Txi(nu,i) = 0.0
#
               DO i1
#
                  T1xi(nu,i) = ca(nu,i1)*fockmo_a(i1,i)
                  Txi(nu,i) -= T1xi(nu,i)
#
               ENDDO i1
#
               GET            cya(mu,i) 
               T1xx(mu,nu)  = cya(mu,i)*Txi(nu,i)
               Txx(mu,nu)  += T1xx(mu,nu)  
#
#              piece 3. 
#              -------- 
#
               Txi(nu,i) = 0.0
#
               DO i1
#
                  GET          fya(i1,i) 
                  T1xi(nu,i) = ca(nu,i1)*fya(i1,i) # epsya(i1,i)
                  Txi(nu,i) -= T1xi(nu,i)
#
               ENDDO i1
#
               T1xx(mu,nu)  = ca(mu,i)*Txi(nu,i)
               Txx(mu,nu)  += T1xx(mu,nu)  
#
            ENDDO i 
#
#           beta-beta block 
#           --------------- 
#
            DO j 
#
#              piece 1. 
#              -------- 
#
               Txj(nu,j) = 0.0
#
               DO j1
#
                  GET          cyb(nu,j1) 
                  T1xj(nu,j) = cyb(nu,j1)*fockmo_b(j1,j)
                  Txj(nu,j) -= T1xj(nu,j)
#
               ENDDO j1
#
               T1xx(mu,nu)  = cb(mu,j)*Txj(nu,j)
               T2xx(mu,nu) += T1xx(mu,nu) 
#
#              piece 2. 
#              -------- 
#
               Txj(nu,j) = 0.0
#
               DO j1
#
                  T1xj(nu,j) = cb(nu,j1)*fockmo_b(j1,j)
                  Txj(nu,j) -= T1xj(nu,j)
#
               ENDDO j1
#
               GET            cyb(mu,j) 
               T1xx(mu,nu)  = cyb(mu,j)*Txj(nu,j)
               T2xx(mu,nu) += T1xx(mu,nu)  
#
#              piece 3. 
#              -------- 
#
               Txj(nu,j) = 0.0
#
               DO j1
#
                  GET          fyb(j1,j) 
                  T1xj(nu,j) = cb(nu,j1)*fyb(j1,j) # epsyb(j1,j)
                  Txj(nu,j) -= T1xj(nu,j)
#
               ENDDO j1
#
               T1xx(mu,nu)  = cb(mu,j)*Txj(nu,j)
               T2xx(mu,nu) += T1xx(mu,nu)  
#
            ENDDO j 
#
            PUT whfya(mu,nu) = Txx(mu,nu)
            PUT whfyb(mu,nu) = T2xx(mu,nu)
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
      delete cya 
      delete cyb 
#
      ENDPROC FSCF_HESS 
#     ----------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FOCK_TRANS 
#     ---------------
#
      create FA 
      create FB 
      execute sip_barrier 
#
      PARDO p, p1     
#
            tpp(p,p1) = 0.0 
#
            DO mu    
#
               tpx(p,mu) = 0.0 
#
               DO nu    
#
                  t1px(p,mu) = fockrohf_a(nu,mu)*ca(nu,p) 
                  tpx(p,mu) += t1px(p,mu)  
#
               ENDDO nu    
#
               t1pp(p,p1)  = tpx(p,mu)*ca(mu,p1) 
               tpp(p,p1)  += t1pp(p,p1) 
#
            ENDDO mu    
#
            PUT FA(p,p1) = tpp(p,p1) 
#
      ENDPARDO p, p1     
#
      PARDO q, q1     
#
            tqq(q,q1) = 0.0 
#
            DO mu    
#
               tqx(q,mu) = 0.0 
#
               DO nu    
#
                  t1qx(q,mu) = fockrohf_b(nu,mu)*cb(nu,q) 
                  tqx(q,mu) += t1qx(q,mu)  
#
               ENDDO nu    
#
               t1qq(q,q1)  = tqx(q,mu)*cb(mu,q1) 
               tqq(q,q1)  += t1qq(q,q1) 
#
            ENDDO mu    
#
            PUT FB(q,q1) = tqq(q,q1) 
#
      ENDPARDO q, q1     
#
      execute sip_barrier 
#
      DO p1 
      DO p 
#
         GET              FA(p,p1) 
         fockmo_a(p,p1) = FA(p,p1) 
#
      ENDDO p 
      ENDDO p1 
#
      DO q1 
      DO q 
#
         GET              FB(q,q1) 
         fockmo_b(q,q1) = FB(q,q1) 
#
      ENDDO q 
      ENDDO q1 
#
      execute sip_barrier 
#
      delete FA 
      delete FB 
#
      ENDPROC FOCK_TRANS 
#     ------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Singles --> T1a_a 
# ----------------------------
#
# t^a_i d^i_a = f_{ia} - \Sum_{m .ne. i} f_{mi} t^a_m
#                      + \Sum_{e .ne. a} f_{ae} t^e_i
#
# ---------------------------------------------------------------------------
#
      PROC T1A_REFERANCE
#     ------------------
#
#     Create distributed arrays used in the referance computation. 
#     ------------------------------------------------------------ 
#
      create T1ai_a 
      create T2ai_a 
#
      execute sip_barrier 
#
#     First initialize the amplitudes.
#     --------------------------------
#
      ecorra = 0.0
      esum   = 0.0
      PARDO a, i
#
            tai(a,i)                 = Fockmo_a(a,i)
            execute energy_denominator tai(a,i)
            etemp                    = Tai(a,i)*Fockmo_a(a,i)
            esum                    += etemp
            PUT T1ai_a(a,i)          = tai(a,i)
#
      ENDPARDO a, i
#
      execute sip_barrier 
#
      collective ecorra += esum
      execute print_scalar ecorra 
#
      eold = ecorra
#
#     Start iterations
#     ----------------
#
      DO kiter
#
         PARDO a, i
#
               tai(a,i) = Fockmo_a(a,i)
#
               DO i1
#
                  GET         T1ai_a(a,i1)
                  t1ai(a,i) = T1ai_a(a,i1)*Focknd_a(i1,i)
                  tai(a,i) -= t1ai(a,i)
#
               ENDDO i1
#
               DO a1
#
                  GET         T1ai_a(a1,i)
                  t1ai(a,i) = T1ai_a(a1,i)*Focknd_a(a,a1)
                  tai(a,i) += t1ai(a,i)
#
               ENDDO a1
#
               execute energy_denominator tai(a,i)
               PUT T2ai_a(a,i)          = tai(a,i)
#
         ENDPARDO a, i
#
         execute sip_barrier
#
#        Update amplitudes
#        -----------------
#
         ecorra = 0.0
         esum   = 0.0
         PARDO a, i
#
            GET               T2ai_a(a,i)
            etemp           = T2ai_a(a,i)*Fockmo_a(a,i)
            esum           += etemp
            PUT T1ai_a(a,i) = T2ai_a(a,i)
#
         ENDPARDO a, i
#
         execute sip_barrier
         collective ecorra += esum
         execute print_scalar ecorra 
#
#        Check on convergence
#        --------------------
#
         IF ecorra == eold
            exit 
         ENDIF 
#
         IF ecorra < eold
            ediff = eold - ecorra
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorra > eold
            ediff = ecorra - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorra
#
      ENDDO kiter
#
      execute sip_barrier 
#
#     Remove distributed arrays not used again. 
#     ----------------------------------------- 
#
      delete T2ai_a 
#
      ENDPROC T1A_REFERANCE
#     ---------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Singles --> T1a_b 
# ----------------------------
#
      PROC T1B_REFERANCE
#     ------------------
#
#     Create distributed arrays used in the referance computation. 
#     ------------------------------------------------------------ 
#
      create T1ai_b 
      create T2ai_b 
#
      execute sip_barrier 
#
#     First initialize the amplitudes.
#     --------------------------------
#
      ecorrb = 0.0
      esum   = 0.0
      PARDO b, j
#
            tbj(b,j)                 = Fockmo_b(b,j)
            execute energy_denominator tbj(b,j)
            etemp                    = Tbj(b,j)*Fockmo_b(b,j)
            esum                    += etemp
            PUT T1ai_b(b,j)          = tbj(b,j)
#
      ENDPARDO b, j
#
      execute sip_barrier 
#
      collective ecorrb += esum
      execute print_scalar ecorrb 
#
      eold = ecorrb
#
#     Start iterations
#     ----------------
#
      DO kiter
#
         PARDO b, j
#
               tbj(b,j) = Fockmo_b(b,j)
#
               DO j1
#
                  GET         T1ai_b(b,j1)
                  t1bj(b,j) = T1ai_b(b,j1)*Focknd_b(j1,j)
                  tbj(b,j) -= t1bj(b,j)
#
               ENDDO j1
#
               DO b1
#
                  GET         T1ai_b(b1,j)
                  t1bj(b,j) = T1ai_b(b1,j)*Focknd_b(b,b1)
                  tbj(b,j) += t1bj(b,j)
#
               ENDDO b1
#
               execute energy_denominator tbj(b,j)
               PUT T2ai_b(b,j)          = tbj(b,j)
#
         ENDPARDO b, j
#
         execute sip_barrier
#
#        Update amplitudes
#        -----------------
#
         ecorrb = 0.0
         esum   = 0.0
         PARDO b, j
#
            GET               T2ai_b(b,j)
            etemp           = T2ai_b(b,j)*Fockmo_b(b,j)
            esum           += etemp
            PUT T1ai_b(b,j) = T2ai_b(b,j)
#
         ENDPARDO b, j
#
         execute sip_barrier
         collective ecorrb += esum
         execute print_scalar ecorrb 
#
#        Check on convergence
#        --------------------
#
         IF ecorrb == eold
            exit 
         ENDIF 
#
         IF ecorrb < eold
            ediff = eold - ecorrb
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrb > eold
            ediff = ecorrb - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrb
#
      ENDDO kiter
#
#     Remove distributed arrays not used again. 
#     ----------------------------------------- 
#
      delete T2ai_b 
#
      ENDPROC T1B_REFERANCE
#     ---------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2AA_REFERANCE
#     -------------------
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2AA  
#     -----
#
      esum    = 0.0
      ecorraa = 0.0 
      PARDO a, a1, i, i1
#
            REQUEST                         VSpipi(a,i,a1,i1) a 
            taiai(a,i,a1,i1)              = VSpipi(a,i,a1,i1)
            execute energy_denominator      taiai(a,i,a1,i1)
            etemp                         = taiai(a,i,a1,i1)*VSpipi(a,i,a1,i1) 
            etemp                        *= 0.5 
            esum                         += etemp 
            PREPARE T1aiai_aa(a,i,a1,i1)  = taiai(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
      execute server_barrier 
#
      collective ecorraa += esum
      execute print_scalar ecorraa 
#
      eold = ecorraa 
#
#     Start iterations
#     ----------------
#
      DO kiter
#
         PARDO a, a1, i, i1
#
               REQUEST            VSpipi(a,i,a1,i1) a 
               taiai(a,i,a1,i1) = VSpipi(a,i,a1,i1) 
#
               DO a2
#
                  REQUEST             T1aiai_aa(a2,i,a1,i1) a1 
                  REQUEST             T1aiai_aa(a,i,a2,i1)  a 
#
                  t1aiai(a,i,a1,i1) = T1aiai_aa(a2,i,a1,i1)*Focknd_a(a,a2)
                  taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
                  t1aiai(a,i,a1,i1) = T1aiai_aa(a,i,a2,i1)*Focknd_a(a1,a2)
                  taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
               ENDDO a2
#
               DO i2
#
                  REQUEST             T1aiai_aa(a,i2,a1,i1) a 
                  REQUEST             T1aiai_aa(a,i,a1,i2)  a 
#
                  t1aiai(a,i,a1,i1) = T1aiai_aa(a,i2,a1,i1)*Focknd_a(i2,i)
                  taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1)
#
                  t1aiai(a,i,a1,i1) = T1aiai_aa(a,i,a1,i2)*Focknd_a(i2,i1)
                  taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1)
#
               ENDDO i2
#
               execute energy_denominator     taiai(a,i,a1,i1)
               PREPARE T2aiai_aa(a,i,a1,i1) = taiai(a,i,a1,i1)
#
         ENDPARDO a, a1, i, i1
#
         execute server_barrier
#
#        Update amplitudes
#        -----------------
#
         esum    = 0.0 
         ecorraa = 0.0 
         PARDO a, a1, i, i1
#
               REQUEST                        T2aiai_aa(a,i,a1,i1) a 
               REQUEST                        VSpipi(a,i,a1,i1) a 
               etemp                        = VSpipi(a,i,a1,i1)*T2aiai_aa(a,i,a1,i1)
               etemp                       *= 0.25  
               esum                        += etemp 
               PREPARE T1aiai_aa(a,i,a1,i1) = T2aiai_aa(a,i,a1,i1)
#
         ENDPARDO a, a1, i, i1
#
         execute server_barrier
         collective ecorraa += esum
         execute print_scalar ecorraa 
#
#        Check on convergence
#        --------------------
#
         IF ecorraa == eold
            exit 
         ENDIF 
#
         IF ecorraa < eold
            ediff = eold - ecorraa
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorraa > eold
            ediff = ecorraa - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorraa 
#
      ENDDO kiter
#
      ENDPROC T2AA_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2BB_REFERANCE
#     -------------------
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2BB  
#     -----
#
      esum    = 0.0
      ecorrbb = 0.0 
      PARDO b, b1, j, j1
#
            REQUEST                         VSqjqj(b,j,b1,j1) b 
            tbjbj(b,j,b1,j1)              = VSqjqj(b,j,b1,j1)
            execute energy_denominator      tbjbj(b,j,b1,j1)
            etemp                         = tbjbj(b,j,b1,j1)*VSqjqj(b,j,b1,j1) 
            etemp                        *= 0.25 
            esum                         += etemp 
            PREPARE T1bjbj_bb(b,j,b1,j1)  = tbjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
      execute server_barrier 
#
      collective ecorrbb += esum
      execute print_scalar ecorrbb 
#
      eold = ecorrbb 
#
#     Start iterations
#     ----------------
#
      DO kiter
#
         PARDO b, b1, j, j1
#
               REQUEST            VSqjqj(b,j,b1,j1) b 
               tbjbj(b,j,b1,j1) = VSqjqj(b,j,b1,j1) 
#
               DO b2
#
                  REQUEST             T1bjbj_bb(b2,j,b1,j1) b1 
                  REQUEST             T1bjbj_bb(b,j,b2,j1)  b 
#
                  t1bjbj(b,j,b1,j1) = T1bjbj_bb(b2,j,b1,j1)*Focknd_b(b,b2)
                  tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1)
#
                  t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j,b2,j1)*Focknd_b(b1,b2)
                  tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1)
#
               ENDDO b2
#
               DO j2
#
                  REQUEST             T1bjbj_bb(b,j2,b1,j1) b 
                  REQUEST             T1bjbj_bb(b,j,b1,j2)  b 
#
                  t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j2,b1,j1)*Focknd_b(j2,j)
                  tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1)
#
                  t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j,b1,j2)*Focknd_b(j2,j1)
                  tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1)
#
               ENDDO j2
#
               execute energy_denominator     tbjbj(b,j,b1,j1)
               PREPARE T2bjbj_bb(b,j,b1,j1) = tbjbj(b,j,b1,j1)
#
         ENDPARDO b, b1, j, j1
#
         execute server_barrier
#
#        Update amplitudes
#        -----------------
#
         esum    = 0.0 
         ecorrbb = 0.0 
         PARDO b, b1, j, j1
#
               REQUEST                        T2bjbj_bb(b,j,b1,j1) b 
               REQUEST                        VSqjqj(b,j,b1,j1) b 
               etemp                        = VSqjqj(b,j,b1,j1)*T2bjbj_bb(b,j,b1,j1)
               etemp                       *= 0.25  
               esum                        += etemp 
               PREPARE T1bjbj_bb(b,j,b1,j1) = T2bjbj_bb(b,j,b1,j1)
#
         ENDPARDO b, b1, j, j1
#
         execute server_barrier
         collective ecorrbb += esum
         execute print_scalar ecorrbb 
#
#        Check on convergence
#        --------------------
#
         IF ecorrbb == eold
            exit 
         ENDIF 
#
         IF ecorrbb < eold
            ediff = eold - ecorrbb
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrbb > eold
            ediff = ecorrbb - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrbb 
#
      ENDDO kiter
#
      ENDPROC T2BB_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2AB_REFERANCE
#     -------------------
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2BB  
#     -----
#
      esum    = 0.0
      ecorrab = 0.0 
#
      PARDO a, b, i, j
#
            REQUEST                      Vpiqj(a,i,b,j) a 
            taibj(a,i,b,j)             = Vpiqj(a,i,b,j)
            execute energy_denominator   taibj(a,i,b,j)
            etemp                      = taibj(a,i,b,j)*Vpiqj(a,i,b,j) 
            esum                      += etemp 
            PREPARE T1aibj_ab(a,i,b,j) = taibj(a,i,b,j)
#
      ENDPARDO a, b, i, j
      execute server_barrier 
#
      collective ecorrab += esum
      execute print_scalar ecorrab 
#
      eold = ecorrab 
#
#     Start iterations
#     ----------------
#
      DO kiter
#
         PARDO a, b, i, j
#
               REQUEST          Vpiqj(a,i,b,j) a 
               taibj(a,i,b,j) = Vpiqj(a,i,b,j)
#
               DO a1
#
                  REQUEST           T1aibj_ab(a1,i,b,j) b 
#
                  t1aibj(a,i,b,j) = T1aibj_ab(a1,i,b,j)*Focknd_a(a,a1)
                  taibj(a,i,b,j) += t1aibj(a,i,b,j)
#
               ENDDO a1
#
               DO b1
#
                  REQUEST           T1aibj_ab(a,i,b1,j) a 
#
                  t1aibj(a,i,b,j) = T1aibj_ab(a,i,b1,j)*Focknd_b(b,b1)
                  taibj(a,i,b,j) += t1aibj(a,i,b,j)
#
               ENDDO b1
#
               DO i1
#
                  REQUEST           T1aibj_ab(a,i1,b,j) a 
#
                  t1aibj(a,i,b,j) = T1aibj_ab(a,i1,b,j)*Focknd_a(i1,i)
                  taibj(a,i,b,j) -= t1aibj(a,i,b,j)
#
               ENDDO i1
#
               DO j1
#
                  REQUEST           T1aibj_ab(a,i,b,j1) a 
#
                  t1aibj(a,i,b,j) = T1aibj_ab(a,i,b,j1)*Focknd_b(j1,j)
                  taibj(a,i,b,j) -= t1aibj(a,i,b,j)
#
               ENDDO j1
#
               execute energy_denominator   taibj(a,i,b,j)
               PREPARE T2aibj_ab(a,i,b,j) = taibj(a,i,b,j)
#
         ENDPARDO a, b, i, j
#
         execute server_barrier
#
#        Update amplitudes
#        -----------------
#
         esum    = 0.0 
         ecorrab = 0.0 
         PARDO a, b, i, j
#
               REQUEST                      Vpiqj(a,i,b,j) a 
               REQUEST                      T2aibj_ab(a,i,b,j) a 
               etemp                      = T2aibj_ab(a,i,b,j)*Vpiqj(a,i,b,j) 
               esum                      += etemp 
               PREPARE T1aibj_ab(a,i,b,j) = T2aibj_ab(a,i,b,j)
#
         ENDPARDO a, b, i, j
#
         execute server_barrier
#
         collective ecorrab += esum
         execute print_scalar ecorrab 
#
#        Check on convergence
#        --------------------
#
         IF ecorrab == eold
            exit 
         ENDIF 
#
         IF ecorrab < eold
            ediff = eold - ecorrab
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrab > eold
            ediff = ecorrab - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrab 
#
      ENDDO kiter
#
      ENDPROC T2AB_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
      PROC REMOVE_DIAG
#     --------------------
#
      execute remove_diagonal fockmo_a focknd_a
      execute remove_diagonal fockmo_b focknd_b
      execute sip_barrier
#
      ENDPROC REMOVE_DIAG
#     -------------------
#
# ------------------------------------------------------------------------------ ---
#
      PROC ROHF_ENERGY
#     --------------------
#
#     'HF' terms
#     ----------
#
      esum    = 0.0
      ecorraa = 0.0
      PARDO a, a1, i, i1
#
            REQUEST VSpipi(a,i,a1,i1) a 
            REQUEST T1aiai_aa(a,i,a1,i1) a 
#
            etemp = VSpipi(a,i,a1,i1)*T1aiai_aa(a,i,a1,i1)
            etemp = 0.25*etemp
            esum += etemp
#
      ENDPARDO a, a1, i, i1
#
      execute sip_barrier
      collective ecorraa += esum
      execute print_scalar ecorraa
#
      ecorrbb = 0.0
      esum    = 0.0
      PARDO b, b1, j, j1
#
            REQUEST VSqjqj(b,j,b1,j1) b 
            REQUEST T1bjbj_bb(b,j,b1,j1) b 
#
            etemp = VSqjqj(b,j,b1,j1)*T1bjbj_bb(b,j,b1,j1)
            etemp = 0.25*etemp
            esum += etemp
#
      ENDPARDO b, b1, j, j1
      execute sip_barrier
      collective ecorrbb += esum
      execute print_scalar ecorrbb
#
      ecorrab = 0.0
      esum    = 0.0
      PARDO a, b, i, j
#
            REQUEST Vpiqj(a,i,b,j) a 
            REQUEST T1aibj_ab(a,i,b,j) a 
#
            etemp = T1aibj_ab(a,i,b,j)*Vpiqj(a,i,b,j)
            esum += etemp
#
      ENDPARDO a, b, i, j
      execute sip_barrier
      collective ecorrab += esum
      execute print_scalar ecorrab
#
#     NON 'HF' terms
#     --------------
#
      ecorra = 0.0
      esum   = 0.0
      PARDO a, i
#
            GET     T1ai_a(a,i)
            etemp = T1ai_a(a,i)*Fockmo_a(a,i)
            esum += etemp
#
      ENDPARDO a, i
      execute sip_barrier
      collective ecorra += esum
      execute print_scalar ecorra
#
      ecorrb = 0.0
      esum   = 0.0
      PARDO b, j
#
            GET     T1ai_b(b,j)
            etemp = T1ai_b(b,j)*Fockmo_b(b,j)
            esum += etemp
#
      ENDPARDO b, j
      execute sip_barrier
      collective ecorrb += esum
      execute print_scalar ecorrb
#
      ecorrT  = ecorra
      ecorrT += ecorrb
      ecorrT += ecorraa
      ecorrT += ecorrbb
      ecorrT += ecorrab
      execute print_scalar ecorrT
      totenerg  = ecorrT
      totenerg += scfeneg
#
      ENDPROC ROHF_ENERGY
#     -----------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Iij_p   
#     ----------
#
#     Create distributed arrays. 
#     -------------------------- 
#
      create Iij_a
      create Iij_b
      execute sip_barrier 
#
#     Start Iij_a
#     -----------
#
      PARDO i, i1, i2
#
            GET                Dij_a(i2,i1)
            T1ii(i,i1)       = Dij_a(i2,i1)*Fockmo_a(i2,i)
            T1ii(i,i1)      *= -1.0
            PUT Iij_a(i,i1) += T1ii(i,i1)
#
      ENDPARDO i, i1, i2
#
      PARDO i, i1, a
#
            GET                Dai_a(a,i1)
            T1ii(i,i1)       = Dai_a(a,i1)*Fockmo_a(a,i)
            T1ii(i,i1)      *= -1.0
            PUT Iij_a(i,i1) += T1ii(i,i1)
#
      ENDPARDO i, i1, a
#
      PARDO a, a1, i1, i2
#
            REQUEST T1aiai_aa(a,i1,a1,i2) a 
#
            DO i
#
               REQUEST            VSpipi(a,i,a1,i2) a 
               Tii(i,i1)        = VSpipi(a,i,a1,i2)*T1aiai_aa(a,i1,a1,i2)
               Tii(i,i1)       *= -0.5
               PUT Iij_a(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
      PARDO a, b, i1, j
#
            REQUEST T1aibj_ab(a,i1,b,j) a 
#
            DO i
#
               REQUEST            Vpiqj(a,i,b,j) a 
               Tii(i,i1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i1,b,j)
               Tii(i,i1)       *= -1.0
               PUT Iij_a(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
#     Contributions from density. 
#     --------------------------- 
#
      PARDO i, i1 
#
            Tii(i,i1) = 0.0 
#
            DO a 
            DO a1 
#
               REQUEST             Vaaii(a,a1,i,i1) a  
               REQUEST             Viaai(i1,a,a1,i) a  
               GET                 Dab_a(a,a1) 
#
               taaii(a,a1,i,i1)  = Vaaii(a,a1,i,i1) 
               t1aaii(a,a1,i,i1) = Viaai(i1,a,a1,i)
               taaii(a,a1,i,i1) -= t1aaii(a,a1,i,i1) 
#
               T1ii(i,i1)        = taaii(a,a1,i,i1)*Dab_a(a,a1)  
               Tii(i,i1)        -= T1ii(i,i1) 
#
            ENDDO a1 
            ENDDO a 
#
            DO b 
            DO b1 
#
               REQUEST      Vbbii(b,b1,i,i1) b  
               GET          Dab_b(b,b1) 
#
               T1ii(i,i1) = Vbbii(b,b1,i,i1)*Dab_b(b,b1)  
               Tii(i,i1) -= T1ii(i,i1) 
#
            ENDDO b1 
            ENDDO b 
#
            DO a 
            DO i2 
#
               REQUEST             VSpipi(a,i2,i,i1) a  
               REQUEST             VSpipi(a,i2,i1,i) a  
               GET                 Dai_a(a,i2) 
#
               tpppp(a,i2,i,i1)  = VSpipi(a,i2,i1,i)
               tpppp(a,i2,i,i1) += VSpipi(a,i2,i,i1)
#
               T1ii(i,i1)        = tpppp(a,i2,i,i1)*Dai_a(a,i2)  
               Tii(i,i1)         -= T1ii(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO b 
            DO j 
#
               REQUEST            Vpiqj(i,i1,b,j) b  
               REQUEST            Vpiqj(i1,i,b,j) b  
               GET                Dai_b(b,j) 
#
               tppqq(i,i1,b,j)  = Vpiqj(i1,i,b,j) 
               tppqq(i,i1,b,j) += Vpiqj(i,i1,b,j) 
#
               T1ii(i,i1)       = tppqq(i,i1,b,j)*Dai_b(b,j)  
               Tii(i,i1)       -= T1ii(i,i1) 
#
            ENDDO j 
            ENDDO b 
#
            DO i3 
            DO i2 
#
               REQUEST      VSpipi(i3,i2,i,i1) i  
               GET          Dij_a(i3,i2) 
#
               T1ii(i,i1) = VSpipi(i3,i2,i,i1)*Dij_a(i3,i2)  
               Tii(i,i1) -= T1ii(i,i1) 
#
            ENDDO i2 
            ENDDO i3 
#
            DO j1 
            DO j 
#
               REQUEST      Vpiqj(i,i1,j1,j) i  
               GET          Dij_b(j1,j) 
#
               T1ii(i,i1) = Vpiqj(i,i1,j1,j)*Dij_b(j1,j)  
               Tii(i,i1) -= T1ii(i,i1) 
#
            ENDDO j 
            ENDDO j1 
#
            PUT Iij_a(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1 
#
#     Start Iij_b
#     -----------
#
      PARDO j, j1, j2
#
            GET                Dij_b(j2,j1)
            T1jj(j,j1)       = Dij_b(j2,j1)*Fockmo_b(j2,j)
            T1jj(j,j1)      *= -1.0
            PUT Iij_b(j,j1) += T1jj(j,j1)
#
      ENDPARDO j, j1, j2
#
      PARDO j, j1, b
#
            GET                Dai_b(b,j1)
            T1jj(j,j1)       = Dai_b(b,j1)*Fockmo_b(b,j)
            T1jj(j,j1)      *= -1.0
            PUT Iij_b(j,j1) += T1jj(j,j1)
#
      ENDPARDO j, j1, b
#
      PARDO b, b1, j1, j2
#
            REQUEST T1bjbj_bb(b,j1,b1,j2) b 
#
            DO j
#
               REQUEST            VSqjqj(b,j,b1,j2) b 
               Tjj(j,j1)        = VSqjqj(b,j,b1,j2)*T1bjbj_bb(b,j1,b1,j2)
               Tjj(j,j1)       *= -0.5
               PUT Iij_b(j,j1) += Tjj(j,j1)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
      PARDO a, b, i, j1
#
            REQUEST T1aibj_ab(a,i,b,j1) a 
#
            DO j
#
               REQUEST            Vpiqj(a,i,b,j) a 
               Tjj(j,j1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i,b,j1)
               Tjj(j,j1)       *= -1.0
               PUT Iij_b(j,j1) += Tjj(j,j1)
#
            ENDDO j
#
      ENDPARDO a, b, i, j1
#
#     Contributions from density. 
#     --------------------------- 
#
      PARDO j, j1 
#
            Tjj(j,j1) = 0.0 
#
            DO b 
            DO b1 
#
               REQUEST             Vbbjj(b,b1,j,j1) b  
               REQUEST             Vjbbj(j1,b,b1,j) b  
               GET                 Dab_b(b,b1) 
#
               tbbjj(b,b1,j,j1)  = Vbbjj(b,b1,j,j1) 
               t1bbjj(b,b1,j,j1) = Vjbbj(j1,b,b1,j)
               tbbjj(b,b1,j,j1) -= t1bbjj(b,b1,j,j1) 
#
               T1jj(j,j1)        = tbbjj(b,b1,j,j1)*Dab_b(b,b1)  
               Tjj(j,j1)        -= T1jj(j,j1) 
#
            ENDDO b1 
            ENDDO b 
#
            DO a 
            DO a1 
#
               REQUEST      Vaajj(a,a1,j,j1) a  
               GET          Dab_a(a,a1) 
#
               T1jj(j,j1) = Vaajj(a,a1,j,j1)*Dab_a(a,a1)  
               Tjj(j,j1) -= T1jj(j,j1) 
#
            ENDDO a1 
            ENDDO a 
#
            DO b 
            DO j2 
#
               REQUEST             VSqjqj(b,j2,j,j1) b  
               REQUEST             VSqjqj(b,j2,j1,j) b  
               GET                 Dai_b(b,j2) 
#
               tqqqq(b,j2,j,j1)  = VSqjqj(b,j2,j1,j)
               tqqqq(b,j2,j,j1) += VSqjqj(b,j2,j,j1)
#
               T1jj(j,j1)        = tqqqq(b,j2,j,j1)*Dai_b(b,j2)  
               Tjj(j,j1)         -= T1jj(j,j1) 
#
            ENDDO j2 
            ENDDO b 
#
            DO a 
            DO i 
#
               REQUEST            Vpiqj(a,i,j,j1) a  
               REQUEST            Vpiqj(a,i,j1,j) a  
               GET                Dai_a(a,i) 
#
               tppqq(a,i,j,j1)  = Vpiqj(a,i,j1,j) 
               tppqq(a,i,j,j1) += Vpiqj(a,i,j,j1) 
#
               T1jj(j,j1)       = tppqq(a,i,j,j1)*Dai_a(a,i)  
               Tjj(j,j1)       -= T1jj(j,j1) 
#
            ENDDO i 
            ENDDO a 
#
            DO j3 
            DO j2 
#
               REQUEST      VSqjqj(j3,j2,j,j1) j  
               GET          Dij_b(j3,j2) 
#
               T1jj(j,j1) = VSqjqj(j3,j2,j,j1)*Dij_b(j3,j2)  
               Tjj(j,j1) -= T1jj(j,j1) 
#
            ENDDO j2 
            ENDDO j3 
#
            DO i1 
            DO i 
#
               REQUEST      Vpiqj(i,i1,j1,j) i  
               GET          Dij_a(i1,i) 
#
               T1jj(j,j1) = Vpiqj(i,i1,j1,j)*Dij_a(i1,i)  
               Tjj(j,j1) -= T1jj(j,j1) 
#
            ENDDO i 
            ENDDO i1 
#
            PUT Iij_b(j,j1) += Tjj(j,j1)
#
      ENDPARDO j, j1 
#
      ENDPROC Iij_p   
#     -------------
#
#     Finish Iij_a
#     ------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Iab_p  
#     -----------
#
#     Create distributed arrays. 
#     -------------------------- 
#
      create Iab_a
      create Iab_b
      execute sip_barrier 
#
#     Start Iab_a
#     -----------
#
       PARDO a, a1, a2
#
             GET                Dab_a(a2,a1)
             Taa(a,a1)        = Dab_a(a2,a1)*Fockmo_a(a2,a)
             Taa(a,a1)       *= -1.0
             PUT Iab_a(a,a1) += Taa(a,a1)
#
       ENDPARDO a, a1, a2 
#
       PARDO a, a1, i2
#
             GET               Dai_a(a1,i2)
             Taa(a,a1)        = Dai_a(a1,i2)*Fockmo_a(a,i2)
             Taa(a,a1)       *= -1.0
             PUT Iab_a(a,a1) += Taa(a,a1)
#
       ENDPARDO a, a1, i2 
#
      PARDO a1, a2, i, i1
#
            REQUEST T1aiai_aa(a1,i,a2,i1) a1 
#
            DO a
#
               REQUEST            VSpipi(a,i,a2,i1) a 
               Taa(a,a1)        = VSpipi(a,i,a2,i1)*T1aiai_aa(a1,i,a2,i1)
               Taa(a,a1)       *= -0.5
               PUT Iab_a(a,a1) += Taa(a,a1)
#
            ENDDO a
#
      ENDPARDO a1, a2, i, i1
#
      PARDO a1, b, i, j
#
            REQUEST T1aibj_ab(a1,i,b,j) b 
#
            DO a
#
               REQUEST            Vpiqj(a,i,b,j) a 
               Taa(a,a1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a1,i,b,j)
               Taa(a,a1)       *= -1.0  
               PUT Iab_a(a,a1) += Taa(a,a1)
#
            ENDDO a
#
      ENDPARDO a1, b, i, j
#
#     Finish Iab_a
#     ------------
#
#     Start Iab_b
#     -----------
#
       PARDO b, b1, b2
#
             GET                Dab_b(b2,b1)
             Tbb(b,b1)        = Dab_b(b2,b1)*Fockmo_b(b2,b)
             Tbb(b,b1)       *= -1.0
             PUT Iab_b(b,b1) += Tbb(b,b1)
#
       ENDPARDO b, b1, b2 
#
       PARDO b, b1, j2
#
             GET                Dai_b(b1,j2)
             Tbb(b,b1)        = Dai_b(b1,j2)*Fockmo_b(b,j2)
             Tbb(b,b1)       *= -1.0
             PUT Iab_b(b,b1) += Tbb(b,b1)
#
       ENDPARDO b, b1, j2 
#
      PARDO b1, b2, j, j1
#
            REQUEST T1bjbj_bb(b1,j,b2,j1) b1 
#
            DO b
#
               REQUEST            VSqjqj(b,j,b2,j1) b 
               Tbb(b,b1)        = VSqjqj(b,j,b2,j1)*T1bjbj_bb(b1,j,b2,j1)
               Tbb(b,b1)       *= -0.5
               PUT Iab_b(b,b1) += Tbb(b,b1)
#
            ENDDO b
#
      ENDPARDO b1, b2, j, j1
#
      PARDO b1, a, i, j
#
            REQUEST T1aibj_ab(a,i,b1,j) a 
#
            DO b
#
               REQUEST            Vpiqj(a,i,b,j) a 
               Tbb(b,b1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i,b1,j)
               Tbb(b,b1)       *= -1.0  
               PUT Iab_b(b,b1) += Tbb(b,b1)
#
            ENDDO b
#
      ENDPARDO b1, a, i, j
#
#     Finish Iab_b
#     ------------
#
      ENDPROC Iab_p  
#     -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Iia_p  
#     -----------
#
#     Create distributed arrays. 
#     -------------------------- 
#
      create Iia_a
      create Iia_b
      execute sip_barrier 
#
#     Start Iia_a
#     -----------
#
      PARDO a, a1, i1, i2
#
            REQUEST T1aiai_aa(a,i1,a1,i2) a 
#
            DO i
#
               REQUEST           VSpipi(a1,i2,i,i1) i 
               Tia(i,a)        = T1aiai_aa(a,i1,a1,i2)*VSpipi(a1,i2,i,i1)
               Tia(i,a)       *= -0.5
               PUT Iia_a(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
      PARDO a, b, i1, j
#
            REQUEST T1aibj_ab(a,i1,b,j) a 
#
            DO i
#
               REQUEST           Vjbii(j,b,i1,i) b # Vppqq(i,i1,b,j)
               Tia(i,a)        = T1aibj_ab(a,i1,b,j)*Vjbii(j,b,i1,i)
               Tia(i,a)       *= -1.0
               PUT Iia_a(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
      PARDO a, i 
#
            Tia(i,a) = 0.0 
#
            DO a1 
#
              GET         Dab_a(a,a1) 
              T1ia(i,a) = Dab_a(a,a1)*Fockmo_a(a1,i) 
              Tia(i,a) -= T1ia(i,a) 
#
            ENDDO a1 
#
            DO i1 
#
              GET         Dai_a(a,i1) 
              T1ia(i,a) = Dai_a(a,i1)*Fockmo_a(i1,i) 
              Tia(i,a) -= T1ia(i,a) 
#
            ENDDO i1 
#
            PUT Iia_a(i,a) += Tia(i,a)
#
      ENDPARDO a, i 
#
#     Finish Iia_a
#     ------------
#
#     Start Iia_b
#     -----------
#
      PARDO b, b1, j1, j2
#
            REQUEST T1bjbj_bb(b,j1,b1,j2) b 
#
            DO j
#
               REQUEST           VSqjqj(b1,j2,j,j1) j 
               Tjb(j,b)        = T1bjbj_bb(b,j1,b1,j2)*VSqjqj(b1,j2,j,j1)
               Tjb(j,b)       *= -0.5
               PUT Iia_b(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
      PARDO b, a, j1, i
#
            REQUEST T1aibj_ab(a,i,b,j1) a 
#
            DO j
#
               REQUEST           Vpiqj(a,i,j,j1) a 
               Tjb(j,b)        = T1aibj_ab(a,i,b,j1)*Vpiqj(a,i,j,j1)
               Tjb(j,b)       *= -1.0
               PUT Iia_b(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
      PARDO b, j 
#
            Tjb(j,b) = 0.0 
#
            DO b1 
#
              GET         Dab_b(b,b1) 
              T1jb(j,b) = Dab_b(b,b1)*Fockmo_b(b1,j) 
              Tjb(j,b) -= T1jb(j,b) 
#
            ENDDO b1 
#
            DO j1 
#
              GET         Dai_b(b,j1) 
              T1jb(j,b) = Dai_b(b,j1)*Fockmo_b(j1,j) 
              Tjb(j,b) -= T1jb(j,b) 
#
            ENDDO j1 
#
            Tbj(b,j)       *= -1.0 
            PUT Iia_b(j,b) += Tjb(j,b)
#
      ENDPARDO b, j 
#
#     Finish Iia_b
#     ------------
#
      ENDPROC Iia_p  
#     -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Iai_p  
#     ----------
#
#     Start Iai_a
#     -----------
#
      create Iai_a 
      create Iai_b 
#
      execute sip_barrier 
#
      PARDO a, i
#
            Tai(a,i) = 0.0 # Fockmo_a(a,i) 
#
            DO a1 
#
               GET         Dai_a(a1,i) 
               t1ai(a,i) = Fockmo_a(a,a1)*Dai_a(a1,i) 
               tai(a,i) += t1ai(a,i)  
#
            ENDDO a1 
#
            DO i1 
#
               GET         Dij_a(i1,i) 
               t1ai(a,i) = Fockmo_a(a,i1)*Dij_a(i1,i) 
               tai(a,i) += t1ai(a,i)  
#
            ENDDO i1 
#
            DO i1
            DO i2
#
               REQUEST             VSpipi(a,i,i2,i1) a 
               REQUEST             VSpipi(a,i,i1,i2) a 
               GET                 Dij_a(i2,i1)
#
               Taiii(a,i,i2,i1)  = VSpipi(a,i,i2,i1)
               T1aiii(a,i,i2,i1) = VSpipi(a,i,i1,i2)
               Taiii(a,i,i2,i1) += T1aiii(a,i,i2,i1)
               T1ai(a,i)         = Taiii(a,i,i2,i1)*Dij_a(i2,i1)
               T1ai(a,i)        *= 0.5
               Tai(a,i)         += T1ai(a,i)
#
            ENDDO i2
            ENDDO i1
#
            DO j
            DO j1
#
               REQUEST            Vpiqj(a,i,j1,j) a 
               REQUEST            Vpiqj(a,i,j,j1) a 
               GET                Dij_b(j1,j)
#
               Taijj(a,i,j1,j)  = Vpiqj(a,i,j1,j)
               T1aijj(a,i,j1,j) = Vpiqj(a,i,j,j1)
               Taijj(a,i,j1,j) += T1aijj(a,i,j1,j)
               T1ai(a,i)        = Taijj(a,i,j1,j)*Dij_b(j1,j)
               T1ai(a,i)       *= 0.5
               Tai(a,i)        += T1ai(a,i)
#
            ENDDO j1
            ENDDO j
#
            DO a1
            DO a2
#
               REQUEST             VSaaai(a2,a1,a,i) a 
               REQUEST             VSaaai(a1,a2,a,i) a 
               GET                 Dab_a(a2,a1)
#
               Taaai(a2,a1,a,i)  = VSaaai(a2,a1,a,i)
               T1aaai(a2,a1,a,i) = VSaaai(a1,a2,a,i)
               Taaai(a2,a1,a,i) += T1aaai(a2,a1,a,i)
#
               T1ai(a,i)         = Taaai(a2,a1,a,i)*Dab_a(a2,a1)
               T1ai(a,i)        *= 0.5
               Tai(a,i)         += T1ai(a,i)
#
            ENDDO a2
            ENDDO a1
#
            DO b
            DO b1
#
               REQUEST            Vbbai(b1,b,a,i) a # Vppqq(a,i,b1,b)
               REQUEST            Vbbai(b,b1,a,i) a # Vppqq(a,i,b,b1)
               GET                Dab_b(b1,b)
#
               Tbbai(b1,b,a,i)  = Vbbai(b1,b,a,i)
               T1bbai(b1,b,a,i) = Vbbai(b,b1,a,i)
               Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)
#
               T1ai(a,i)        = Tbbai(b1,b,a,i)*Dab_b(b1,b)
               T1ai(a,i)       *= 0.5
               Tai(a,i)        += T1ai(a,i)
#
            ENDDO b1
            ENDDO b
#
            DO i1
            DO a2
#
               REQUEST             VSpipi(a2,i1,a,i) a 
               REQUEST             Viaai(i1,a2,a,i)  a 
               REQUEST             Vaaii(a2,a,i,i1)  a  
               GET                 Dai_a(a2,i1)
#
               tpppp(a2,i1,a,i)  = VSpipi(a2,i1,a,i) 
               t1pppp(a2,i1,a,i) = Viaai(i1,a2,a,i) 
               t2pppp(a2,i1,a,i) = Vaaii(a2,a,i,i1)
               tpppp(a2,i1,a,i) += t1pppp(a2,i1,a,i)  
               tpppp(a2,i1,a,i) -= t2pppp(a2,i1,a,i)  
#
               T1ai(a,i)         = tpppp(a2,i1,a,i)*Dai_a(a2,i1)
               Tai(a,i)         += T1ai(a,i)
#
            ENDDO a2
            ENDDO i1
#
            DO j
            DO b1
#
               REQUEST            Vpiqj(a,i,b1,j) a  
               REQUEST            Viabj(i,a,b1,j) a 
               GET                Dai_b(b1,j)
#
               tppqq(a,i,b1,j)  = Viabj(i,a,b1,j)  
               tppqq(a,i,b1,j) += Vpiqj(a,i,b1,j) 
#
               T1ai(a,i)        = tppqq(a,i,b1,j)*Dai_b(b1,j)
               Tai(a,i)        += T1ai(a,i)
#
            ENDDO b1
            ENDDO j
#
            DO a1
            DO a2
            DO i1
#
               REQUEST     T1aiai_aa(a1,i1,a2,i) a1 
               REQUEST     VSaaai(a2,a,a1,i1) a 
#
               T1ai(a,i) = VSaaai(a2,a,a1,i1)*T1aiai_aa(a1,i1,a2,i)
               T1ai(a,i) *= 0.5
               Tai(a,i) += T1ai(a,i)
#
            ENDDO i1
            ENDDO a2
            ENDDO a1
#
            DO b
            DO a1
            DO j
#
               REQUEST      T1aibj_ab(a1,i,b,j) b 
               REQUEST      Vaabj(a1,a,b,j) a 
#
               T1ai(a,i)  = Vaabj(a1,a,b,j)*T1aibj_ab(a1,i,b,j)
               Tai(a,i)  += T1ai(a,i)
#
            ENDDO j
            ENDDO a1
            ENDDO b
#
            Tai(a,i)      *= -1.0 
            PUT Iai_a(a,i) = Tai(a,i)
#
      ENDPARDO a, i
#
#     Finish Iai_a
#     ------------
#
#     Start Iai_b
#     -----------
#
      PARDO b, j
#
            Tbj(b,j) = 0.0 # Fockmo_b(b,j) 
#
            DO b1 
#
               GET         Dai_b(b1,j) 
               t1bj(b,j) = Fockmo_b(b,b1)*Dai_b(b1,j) 
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO b1 
#
            DO j1 
#
               GET         Dij_b(j1,j) 
               t1bj(b,j) = Fockmo_b(b,j1)*Dij_b(j1,j) 
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO j1 
#
            DO j1
            DO j2
#
               REQUEST             VSqjqj(b,j,j2,j1) b 
               REQUEST             VSqjqj(b,j,j1,j2) b 
               GET                 Dij_b(j2,j1)
#
               Tbjjj(b,j,j2,j1)  = VSqjqj(b,j,j2,j1)
               T1bjjj(b,j,j2,j1) = VSqjqj(b,j,j1,j2)
               Tbjjj(b,j,j2,j1) += T1bjjj(b,j,j2,j1)
               T1bj(b,j)         = Tbjjj(b,j,j2,j1)*Dij_b(j2,j1)
               T1bj(b,j)        *= 0.5
               Tbj(b,j)         += T1bj(b,j)
#
            ENDDO j2
            ENDDO j1
#
            DO i
            DO i1
#
               REQUEST            Vpiqj(i1,i,b,j) b 
               REQUEST            Vpiqj(i,i1,b,j) b 
               GET                Dij_a(i1,i)
#
               Tiibj(i1,i,b,j)  = Vpiqj(i1,i,b,j)
               T1iibj(i1,i,b,j) = Vpiqj(i,i1,b,j)
               Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j)
               T1bj(b,j)        = Tiibj(i1,i,b,j)*Dij_a(i1,i)
               T1bj(b,j)       *= 0.5
               Tbj(b,j)        += T1bj(b,j)
#
            ENDDO i1
            ENDDO i
#
            DO b1
            DO b2
#
               REQUEST             VSbbbj(b2,b1,b,j) b 
               REQUEST             VSbbbj(b1,b2,b,j) b 
               GET                 Dab_b(b2,b1)
#
               Tbbbj(b2,b1,b,j)  = VSbbbj(b2,b1,b,j)
               T1bbbj(b2,b1,b,j) = VSbbbj(b1,b2,b,j)
               Tbbbj(b2,b1,b,j) += T1bbbj(b2,b1,b,j)
               T1bj(b,j)         = Tbbbj(b2,b1,b,j)*Dab_b(b2,b1)
               T1bj(b,j)        *= 0.5
               Tbj(b,j)         += T1bj(b,j)
#
            ENDDO b2
            ENDDO b1
#
            DO a
            DO a1
#
               REQUEST            Vaabj(a1,a,b,j) a 
               REQUEST            Vaabj(a,a1,b,j) a 
               GET                Dab_a(a1,a)
#
               Taabj(a1,a,b,j)  = Vaabj(a1,a,b,j)
               T1aabj(a1,a,b,j) = Vaabj(a,a1,b,j)
               Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)
               T1bj(b,j)        = Taabj(a1,a,b,j)*Dab_a(a1,a)
               T1bj(b,j)       *= 0.5
               Tbj(b,j)        += T1bj(b,j)
#
            ENDDO a1
            ENDDO a
#
            DO j1
            DO b2
#
               REQUEST             VSqjqj(b2,j1,b,j) b 
               REQUEST             Vjbbj(j1,b2,b,j)  b 
               REQUEST             Vbbjj(b2,b,j,j1)  b  
               GET                 Dai_b(b2,j1)
#
               tqqqq(b2,j1,b,j)  = VSqjqj(b2,j1,b,j) 
               t1qqqq(b2,j1,b,j) = Vjbbj(j1,b2,b,j) 
               t2qqqq(b2,j1,b,j) = Vbbjj(b2,b,j,j1)
               tqqqq(b2,j1,b,j) += t1qqqq(b2,j1,b,j)  
               tqqqq(b2,j1,b,j) -= t2qqqq(b2,j1,b,j)  
#
               T1bj(b,j)         = tqqqq(b2,j1,b,j)*Dai_b(b2,j1)
               Tbj(b,j)         += T1bj(b,j)
#
            ENDDO b2
            ENDDO j1
#
            DO i
            DO a1
#
               REQUEST            Vpiqj(a1,i,b,j) b  
               REQUEST            Viabj(i,a1,b,j) b  
               GET                Dai_a(a1,i)
#
               tppqq(a1,i,b,j)  = Viabj(i,a1,b,j)  
               tppqq(a1,i,b,j) += Vpiqj(a1,i,b,j) 
#
               T1bj(b,j)        = tppqq(a1,i,b,j)*Dai_a(a1,i)
               Tbj(b,j)        += T1bj(b,j)
#
            ENDDO a1
            ENDDO i
#
            DO b1
            DO b2
            DO j1
#
               REQUEST     T1bjbj_bb(b1,j1,b2,j) b1 
               REQUEST     VSbbbj(b2,b,b1,j1) b 
#
               T1bj(b,j) = VSbbbj(b2,b,b1,j1)*T1bjbj_bb(b1,j1,b2,j)
               T1bj(b,j) *= 0.5
               Tbj(b,j) += T1bj(b,j)
#
            ENDDO j1
            ENDDO b2
            ENDDO b1
#
            DO a
            DO b1
            DO i
#
               REQUEST      T1aibj_ab(a,i,b1,j) a 
               REQUEST      Vbbai(b1,b,a,i) a # Vppqq(a,i,b1,b)
#
               T1bj(b,j)  = Vbbai(b1,b,a,i)*T1aibj_ab(a,i,b1,j)
               Tbj(b,j)  += T1bj(b,j)
#
            ENDDO i
            ENDDO b1
            ENDDO a
#
            Tbj(b,j)      *= -1.0 
            PUT Iai_b(b,j) = Tbj(b,j)
#
      ENDPARDO b, j
      execute sip_barrier
#
#     Finish Iai_b
#     ------------
#
      ENDPROC Iai_p  
#     -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FCOPY 
#
# Copy the complete beta MO fock matrix to an alpha array. 
# -------------------------------------------------------- 
#
      DO q 
      DO q1 
         fockmo_b(q,q1) *= 1.0 
         focknd_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q 
#
      execute copy_ff fockmo_b fockmob_a 
#
# Copy the beta MO fock matrix without diagonal pieces to an alpha array. 
# ----------------------------------------------------------------------- 
#
      execute copy_ff focknd_b fockndb_a 
#
# Copy the complete beta X_ai array into an alpha array. 
# ------------------------------------------------------ 
#
      create Xai_a 
      execute sip_barrier 
#
      PARDO a, i 
         GET              Iia_a(i,a) 
         GET              Iai_a(a,i) 
         tpp(a,i)       = Iia_a(i,a) 
         tpp(a,i)      -= Iai_a(a,i) 
         PUT Xai_a(a,i) = tpp(a,i)  
      ENDPARDO a, i 
#
      DO b
      DO j 
         GET           Iia_b(j,b) 
         GET           Iai_b(b,j) 
         tqq(b,j)    = Iia_b(j,b) 
         tqq(b,j)   -= Iai_b(b,j) 
         SXai_b(b,j) = tqq(b,j)  
      ENDDO j 
      ENDDO b  
#
      DO q
      DO q1 
         SXai_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q  
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0  
      ENDDO p1 
      ENDDO p  
#
      execute copy_ff SXai_b SXaib_a 
#
      ENDPROC FCOPY 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENS_DD
#     ------------ 
#
      PARDO a, i 
#
            GET         Xai_a(a,i) 
            tpp(a,i)  = Xai_a(a,i) 
            tpp(a,i) += SXaib_a(a,i) 
# 
            DO a1 
            DO i1 
#
               REQUEST             Vpipi(a1,i1,a,i) a  
               REQUEST             Vpipi(a1,i,a,i1) a  
               REQUEST             Vaaii(a1,a,i,i1) a  
               GET                 Dold_dd(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 4.0  
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1) 
               t2pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
#
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) -= t2pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 2.0  
#
               t1pp(a1,i1)       = 0.0  
               t2pp(a1,i1)       = Dold_dd(a1,i1)
               execute remove_xs   t2pp t1pp 
#
               t2pp(a,i)         = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
               tpp(a,i)         += t2pp(a,i)  
# 
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET               Dold_dd(a1,i) 
               t1pp(a1,a)      = Focknd_a(a1,a) 
               t1pp(a1,a)     += Fockndb_a(a1,a) 
               t2pp(a1,i)      = 0.0 
               t3pp(a1,i)      = Dold_dd(a1,i)
               execute remove_xs t3pp t2pp  
               t3pp(a,i)       = t1pp(a1,a)*t2pp(a1,i)  
               tpp(a,i)       += t3pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET               Dold_dd(a,i1) 
#
               t1pp(i1,i)      = Focknd_a(i1,i) 
               t1pp(i1,i)     += Fockndb_a(i1,i) 
#
               t2pp(a,i1)      = 0.0 
               t3pp(a,i1)      = Dold_dd(a,i1)
               execute remove_xs t3pp t2pp 
#
               t3pp(a,i)       = t2pp(a,i1)*t1pp(i1,i) 
               tpp(a,i)       -= t3pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1  
#
               REQUEST             Vpipi(a1,i1,a,i) a  
               REQUEST             Vpipi(a1,i,a,i1) a  
               REQUEST             Vaaii(a1,a,i,i1) a  
               GET                 Dold_ds(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i)  
               tpppp(a1,i1,a,i) *= 4.0 
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               t1pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
#
               t1pp(a1,i1)       = 0.0 
               t2pp(a1,i1)       = Dold_ds(a1,i1)
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i)       = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
               tpp(a,i)       += t2pp(a,i) 
#
            ENDDO i1  
            ENDDO a1 
#
            DO i1 
#
               GET               Dold_ds(a,i1) 
               t1pp(a,i1)      = 0.0 
               t2pp(a,i1)      = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp  
#
               t2pp(a,i)       = t1pp(a,i1)*Fockmo_a(i1,i)  
               tpp(a,i)       -= t2pp(a,i)
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST             Vpipi(a,i,i1,i2) a  
               REQUEST             Vpipi(a,i2,i1,i) a  
               REQUEST             Vpipi(a,i1,i2,i) a 
               GET                 Dold_sd(i1,i2) 
#
               tpppp(a,i,i1,i2)  = Vpipi(a,i,i1,i2) 
               tpppp(a,i,i1,i2) *= 4.0  
               t1pppp(a,i,i1,i2) = Vpipi(a,i2,i1,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
               t1pppp(a,i,i1,i2) = Vpipi(a,i1,i2,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
#
               t1pp(i1,i2)       = 0.0 
               t2pp(i1,i2)       = Dold_sd(i1,i2) 
               execute remove_ds t2pp t1pp 
               t2pp(a,i)         = tpppp(a,i,i1,i2)*t1pp(i1,i2) 
               tpp(a,i)         += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET               Dold_sd(i1,i) 
#
               t1pp(i1,i)      = 0.0 
               t2pp(i1,i)      = Dold_sd(i1,i)
               execute remove_ds t2pp t1pp
               t2pp(a,i)       = Fockmob_a(i1,a)*t1pp(i1,i) 
               tpp(a,i)       += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i)       = tpp(a,i) # 0.0 
            execute remove_xs tpp t1pp  
#
            execute energy_abdenominator t1pp(a,i)  
            PUT Dnew_dd(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_dd(a,i) 
     #      Dold_dd(a,i) = Dnew_dd(a,i) 
     #      etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC DENS_DD
#     --------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENS_DS
#     ------------ 
#
      PARDO a, i 
#
            GET         Xai_a(a,i) 
            tpp(a,i)  = Xai_a(a,i) 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_dd(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1)  
               tpppp(a,i,a1,i1) *= 4.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) =  Dold_dd(a1,i1)
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO i1 
#
               GET Dold_dd(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_dd(a,i1)
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Fockmo_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_ds(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1) 
               tpppp(a,i,a1,i1) *= 2.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_ds(a1,i1) 
               execute remove_xd t2pp t1pp 
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET Dold_ds(a1,i) 
               t1pp(a,i) = Focknd_a(a1,a)*Dold_ds(a1,i) 
               tpp(a,i) += t1pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Dold_ds(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Focknd_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST Vpipi(a,i,i2,i1) a  
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Vpipi(a,i,i2,i1)*t1pp(i2,i1) 
               t2pp(a,i) *= 2.0 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET Dold_sd(i,i1) 
               t1pp(i,i1) = 0.0 
               t2pp(i,i1) = Dold_sd(i,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Fockmob_a(a,i1)*t1pp(i,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i) = 0.0 
            execute remove_xd tpp t1pp  
#
            execute energy_adenominator t1pp(a,i)  
            PUT Dnew_ds(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_ds(a,i) 
     #      Dold_ds(a,i) = Dnew_ds(a,i) 
     #      etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC DENS_DS
#     --------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENS_SD
#     ------------ 
#
      PARDO i, i1 
#
            tpp(i,i1) = SXaib_a(i,i1) 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               REQUEST Vpipi(a,i1,i,i2) a  
               REQUEST Vpipi(a,i,i1,i2) a  
               GET Dold_dd(a,i2) 
#
               tpppp(a,i2,i,i1)  = Vpipi(a,i2,i,i1) 
               tpppp(a,i2,i,i1) *= 4.0  
               t1pppp(a,i2,i,i1) = Vpipi(a,i1,i,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
               t1pppp(a,i2,i,i1) = Vpipi(a,i,i1,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
#
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_dd(a,i2)
               execute remove_xs t2pp t1pp 
#
               t2pp(i,i1) = tpppp(a,i2,i,i1)*t1pp(a,i2) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_dd(a,i1) 
               t1pp(i,i1) = Fockmob_a(a,i)*Dold_dd(a,i1) 
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               GET Dold_ds(a,i2) 
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_ds(a,i2)
               execute remove_xd t2pp t1pp 
               t2pp(i,i1) = Vpipi(a,i2,i,i1)*t1pp(a,i2)  
               t2pp(i,i1) *= 2.0  
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_ds(a,i) 
               t1pp(i,i1) = Dold_ds(a,i)*Fockmob_a(a,i1)  
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO i2 
            DO i3 
#
               REQUEST Vpipi(i,i1,i2,i3) i  
               REQUEST Vpipi(i,i3,i2,i1) i  
               REQUEST Vpipi(i,i2,i3,i1) i  
               GET Dold_sd(i2,i3) 
#
               tpppp(i,i1,i2,i3) = Vpipi(i,i1,i2,i3) 
               tpppp(i,i1,i2,i3) *= 2.0  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i3,i2,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i2,i3,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
#
               t1pp(i2,i3) = 0.0 
               t2pp(i2,i3) = Dold_sd(i2,i3)
               execute remove_ds t2pp t1pp 
#
               t2pp(i,i1) = tpppp(i,i1,i2,i3)*t1pp(i2,i3)
               tpp(i,i1) += t2pp(i,i1)
#
            ENDDO i3 
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1)
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = Fockndb_a(i,i2)*t1pp(i2,i1) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i,i2) 
               t1pp(i,i2) = 0.0 
               t2pp(i,i2) = Dold_sd(i,i2)
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = t1pp(i,i2)*Fockndb_a(i2,i1) 
               tpp(i,i1) -= t2pp(i,i1) 
#
            ENDDO i2 
#
# Finish construction. 
# -------------------- 
#
            t1pp(i,i1) = 0.0 
            execute remove_ds tpp t1pp  
#
            execute energy_bdenominator t1pp(i,i1)  
            PUT Dnew_sd(i,i1) = t1pp(i,i1) 
#
      ENDPARDO i, i1  
#
      execute sip_barrier 
#
     #PARDO i, i1  
     #      GET Dnew_sd(i,i1) 
     #      Dold_sd(i,i1) = Dnew_sd(i,i1) 
     #      etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
     #      execute print_scalar etemp 
     #ENDPARDO i, i1  
#
      ENDPROC DENS_SD
#     --------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENS_UPDATE  
#
# DD and DS blocks. 
# ----------------- 
#
      esum = 0.0 
      enew = 0.0 
#
      PARDO a, i 
#
            GET Dnew_dd(a,i) 
            GET Dnew_ds(a,i) 
            PUT Dold_dd(a,i) = Dnew_dd(a,i) 
            PUT Dold_ds(a,i) = Dnew_ds(a,i) 
            etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
            esum += etemp 
            etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
            esum += etemp 
#
      ENDPARDO a, i 
#
      PARDO i, i1 
#
            GET Dnew_sd(i,i1) 
            PUT Dold_sd(i,i1) = Dnew_sd(i,i1) 
            etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
            esum += etemp 
#
      ENDPARDO i, i1 
#
      execute sip_barrier 
#
      collective enew += esum 
      execute print_scalar esum 
#
      ENDPROC DENS_UPDATE  
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC IOO_FINISH 
#     --------------- 
#
      PARDO i, i1 
#
            tpp(i,i1) = 0.0 # Iij_a(i,i1) 
#
            DO a 
#
               GET           Dold_ds(a,i1) 
               t1pp(i,i1)  = Fockmo_a(a,i)*Dold_ds(a,i1) 
               t1pp(i,i1) *= 2.0  
               tpp(i,i1)  -= t1pp(i,i1) 
#
               DO i2 
#
                  REQUEST             Vpipi(i,i1,a,i2) a  
                  REQUEST             Vpipi(i,i2,a,i1) a  
                  GET                 Dold_dd(a,i2) 
                  GET                 Dold_ds(a,i2) 
#
                  tpppp(i,i1,a,i2)  = Vpipi(i,i1,a,i2) 
                  tpppp(i,i1,a,i2) *= 2.0  
                  t1pppp(i,i1,a,i2) = Vpipi(i,i2,a,i1) 
                  tpppp(i,i1,a,i2) -= t1pppp(i,i1,a,i2)  
#
                  t2pp(i,i1)        = tpppp(i,i1,a,i2)*Dold_dd(a,i2) 
                  t2pp(i,i1)       *= 2.0  
                  tpp(i,i1)        -= t2pp(i,i1) 
#
                  tpppp(i,i1,a,i2)  = Vpipi(i,i1,a,i2) 
                  t1pppp(i,i1,a,i2) = Vpipi(i,i2,a,i1) 
                  tpppp(i,i1,a,i2) -= t1pppp(i,i1,a,i2)  
#
                  t2pp(i,i1)        = tpppp(i,i1,a,i2)*Dold_ds(a,i2) 
                  t2pp(i,i1)       *= 2.0  
                  tpp(i,i1)        -= t2pp(i,i1) 
#
               ENDDO i2 
#
            ENDDO a 
#
            DO i2 
            DO i3 
#
               REQUEST      Vpipi(i,i1,i2,i3) i  
               GET          Dold_sd(i2,i3) 
#
               t1pp(i,i1) = Vpipi(i,i1,i2,i3)*Dold_sd(i2,i3) 
               t1pp(i,i1) *= 2.0  
               tpp(i,i1) -= t1pp(i,i1) 
#
            ENDDO i3 
            ENDDO i2 
#
            PUT Iij_a(i,i1) += tpp(i,i1)  
#
      ENDPARDO i, i1 
#
#     Beta-beta block --> DD contribution. 
#     ------------------------------------ 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO a 
      DO i 
#
         GET             Dold_dd(a,i)
         SXaib_a(a,i)  = Dold_dd(a,i) 
#
      ENDDO i 
      ENDDO a 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO j, j1 
#
            tqq(j,j1) = 0.0 # Iij_b(j,j1) 
#
            DO b 
            DO j2 
#
               REQUEST             Vqjqj(j,j1,b,j2) b  
               REQUEST             Vqjqj(j,j2,b,j1) b  
#
               tqqqq(j,j1,b,j2)  = Vqjqj(j,j1,b,j2) 
               tqqqq(j,j1,b,j2) *= 2.0  
               t1qqqq(j,j1,b,j2) = Vqjqj(j,j2,b,j1) 
               tqqqq(j,j1,b,j2) -= t1qqqq(j,j1,b,j2)  
#
               t2qq(j,j1)        = tqqqq(j,j1,b,j2)*SXai_b(b,j2) 
               t2qq(j,j1)       *= 2.0  
               tqq(j,j1)        -= t2qq(j,j1) 
#
            ENDDO j2 
            ENDDO b 
#
            PUT Iij_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
#     Beta-beta block --> SD contribution. 
#     ------------------------------------ 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO i 
      DO i1 
#
         GET             Dold_sd(i,i1)
         SXaib_a(i,i1) = Dold_sd(i,i1) 
#
      ENDDO i1 
      ENDDO i 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO j, j1 
#
            tqq(j,j1) = 0.0 # Iij_b(j,j1) 
#
            DO b 
            DO j2 
#
               REQUEST             Vqjqj(j,j1,b,j2) b  
               REQUEST             Vqjqj(j,j2,b,j1) b  
#
               tqqqq(j,j1,b,j2)  = Vqjqj(j,j1,b,j2) 
               t1qqqq(j,j1,b,j2) = Vqjqj(j,j2,b,j1) 
               tqqqq(j,j1,b,j2) -= t1qqqq(j,j1,b,j2)  
#
               t2qq(j,j1)        = tqqqq(j,j1,b,j2)*SXai_b(b,j2) 
               t2qq(j,j1)       *= 2.0  
               tqq(j,j1)        -= t2qq(j,j1) 
#
            ENDDO j2 
            ENDDO b 
#
            PUT Iij_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
      PARDO j, j1 
#
            tqq(j,j1) = 0.0  
#
            DO b  
#
               t1qq(j,j1)  = Fockmo_b(b,j)*SXai_b(b,j1) 
               t1qq(j,j1) *= 2.0  
               tqq(j,j1)  -= t1qq(j,j1) 
#
            ENDDO b 
#
            PUT Iij_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
#     Beta-beta block --> DS contribution. 
#     ------------------------------------ 
#
      PARDO j, j1 
#
            tqq(j,j1) = 0.0  
#
            DO a 
            DO i 
#
               REQUEST       Vpiqj(a,i,j,j1) a  
               GET           Dold_ds(a,i) 
               t1qq(j,j1)  = Vpiqj(a,i,j,j1)*Dold_ds(a,i) 
               t1qq(j,j1) *= 2.0  
               tqq(j,j1)  -= t1qq(j,j1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT Iij_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
      ENDPROC IOO_FINISH 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC IOV_FINISH 
#     --------------- 
#
#     Alpha-alpha block. 
#     ------------------ 
#
      PARDO a, i 
#
           tpp(i,a) = 0.0 # Fockmo_a(i,a)  
#
           DO i1 
#
              GET           Dold_dd(a,i1) 
              GET           Dold_ds(a,i1) 
#
              t1pp(a,i1)  = Dold_dd(a,i1)
              t1pp(a,i1) += Dold_ds(a,i1)
#
              t2pp(i,a)   = Fockmo_a(i,i1)*t1pp(a,i1) 
              tpp(i,a)   -= t2pp(i,a) 
#
           ENDDO i1 
#
           PUT Iia_a(i,a) += tpp(i,a) 
#
      ENDPARDO a, i 
#
#     Beta-beta block. 
#     ---------------- 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO a 
      DO i 
#
         GET            Dold_dd(a,i)
         SXaib_a(a,i) = Dold_dd(a,i) 
#
      ENDDO i 
      ENDDO a 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
           tqq(j,b) = 0.0 # Fockmo_b(j,b) 
#
           DO j1 
#
              t2qq(j,b) = Fockmo_b(j,j1)*SXai_b(b,j1) 
              tqq(j,b) -= t2qq(j,b) 
#
           ENDDO j1 
#
           PUT Iia_b(j,b) += tqq(j,b) 
#
      ENDPARDO b, j 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO i 
      DO i1 
#
         GET             Dold_sd(i,i1)
         SXaib_a(i,i1) = Dold_sd(i,i1) 
#
      ENDDO i1
      ENDDO i 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
           tqq(j,b) = 0.0 # Fockmo_b(j,b) 
#
           DO j1 
#
              t2qq(j,b) = Fockmo_b(j,j1)*SXai_b(b,j1) 
              tqq(j,b) -= t2qq(j,b) 
#
           ENDDO j1 
#
           PUT Iia_b(j,b) += tqq(j,b) 
#
      ENDPARDO b, j 
#
      ENDPROC IOV_FINISH 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC DENS_TRAN
#     --------------
#
      create Dxx_a 
      create Dxx_b 
      create Whfa 
      create Whfb 
#
      execute sip_barrier 
#
# Form the weighted Hartree-Fock density. 
# ---------------------------------------
#
      PARDO mu, nu
#
            Txx(mu,nu)  = 0.0 
            T2xx(mu,nu) = 0.0 
#
            DO i
#
               Txi(nu,i) = 0.0
#
               DO i1
#
                  T1xi(nu,i) = ca(nu,i1)*fockmo_a(i,i1)
                  Txi(nu,i) -= T1xi(nu,i)
#
               ENDDO i1
#
               T1xx(mu,nu) = ca(mu,i)*Txi(nu,i)
               Txx(mu,nu) += T1xx(mu,nu)  
#
            ENDDO i 
#
            DO j
#
               Txj(nu,j) = 0.0
#
               DO j1
#
                  T1xj(nu,j) = cb(nu,j1)*fockmo_b(j,j1)
                  Txj(nu,j) -= T1xj(nu,j)
#
               ENDDO j1
#
               T1xx(mu,nu) = cb(mu,j)*Txj(nu,j)
               Txx(mu,nu) += T1xx(mu,nu)  
#
            ENDDO j 
#
            PUT Whfa(mu,nu) = Txx(mu,nu)
            PUT Whfb(mu,nu) = T2xx(mu,nu)
#
      ENDPARDO mu, nu 
#
      execute sip_barrier
#
# Contract with the derivative integrals
# --------------------------------------
#
      PARDO mu, nu
#
            GET           Dhfa(mu,nu) 
            GET           Dhfb(mu,nu) 
            Txx(mu,nu)  = Dhfa(mu,nu)  
            Txx(mu,nu) += Dhfb(mu,nu)  
#
#           AA-Block. 
#           --------- 
#
            DO a 
#
               Tpx(a,nu) = 0.0 
#
               DO a1 
#
                  GET          Dab_a(a,a1)  
                  T1px(a,nu) = Dab_a(a,a1)*ca(nu,a1)  
                  Tpx(a,nu) += T1px(a,nu) 
#
               ENDDO a1 
#
               T1xx(mu,nu)       = ca(mu,a)*Tpx(a,nu) 
               Txx(mu,nu)       += T1xx(mu,nu) 
               PUT Dxx_a(mu,nu) += T1xx(mu,nu) 
#
            ENDDO a 
#
#           BB-Block. 
#           --------- 
#
            DO b 
#
               Tqx(b,nu) = 0.0 
#
               DO b1 
#
                  GET          Dab_b(b,b1)  
                  T1qx(b,nu) = Dab_b(b,b1)*cb(nu,b1)  
                  Tqx(b,nu) += T1qx(b,nu) 
#
               ENDDO b1 
#
               T1xx(mu,nu)       = cb(mu,b)*Tqx(b,nu) 
               PUT Dxx_b(mu,nu) += T1xx(mu,nu) 
               Txx(mu,nu)       += T1xx(mu,nu) 
#
            ENDDO b 
#
#           II-Block. 
#           --------- 
#
            DO i 
#
               Tpx(i,nu) = 0.0 
#
               DO i1 
#
                  GET          Dij_a(i,i1)  
                  T1px(i,nu) = Dij_a(i,i1)*ca(nu,i1)  
                  Tpx(i,nu) += T1px(i,nu) 
#
               ENDDO i1 
#
               T1xx(mu,nu)       = ca(mu,i)*Tpx(i,nu) 
               Txx(mu,nu)       += T1xx(mu,nu) 
               PUT Dxx_a(mu,nu) += T1xx(mu,nu) 
#
            ENDDO i 
#
#           JJ-Block. 
#           --------- 
#
            DO j 
#
               Tqx(j,nu) = 0.0 
#
               DO j1 
#
                  GET          Dij_b(j,j1)  
                  T1qx(j,nu) = Dij_b(j,j1)*cb(nu,j1)  
                  Tqx(j,nu) += T1qx(j,nu) 
#
               ENDDO j1 
#
               T1xx(mu,nu)       = cb(mu,j)*Tqx(j,nu) 
               Txx(mu,nu)       += T1xx(mu,nu) 
               PUT Dxx_b(mu,nu) += T1xx(mu,nu) 
#
            ENDDO j 
#
#           AI-Block. 
#           --------- 
#
            DO a 
#
               Tpx(a,nu) = 0.0 
#
               DO i1 
#
                  GET          Dai_a(a,i1)  
                  T1px(a,nu) = Dai_a(a,i1)*ca(nu,i1)  
                  Tpx(a,nu) += T1px(a,nu) 
#
               ENDDO i1 
#
               T1xx(mu,nu)       = ca(mu,a)*Tpx(a,nu) 
               T1xx(mu,nu)      *= 2.0  
               Txx(mu,nu)       += T1xx(mu,nu) 
               PUT Dxx_a(mu,nu) += T1xx(mu,nu) 
#
            ENDDO a 
#
#           BJ-Block. 
#           --------- 
#
            DO b 
#
               Tqx(b,nu) = 0.0 
#
               DO j1 
#
                  GET          Dai_b(b,j1)  
                  T1qx(b,nu) = Dai_b(b,j1)*cb(nu,j1)  
                  Tqx(b,nu) += T1qx(b,nu) 
#
               ENDDO j1 
#
               T1xx(mu,nu)       = cb(mu,b)*Tqx(b,nu) 
               T1xx(mu,nu)      *= 2.0  
               Txx(mu,nu)       += T1xx(mu,nu) 
               PUT Dxx_b(mu,nu) += T1xx(mu,nu) 
#
            ENDDO b 
#
            EXECUTE HCONT1 Txx(mu,nu)
#
      ENDPARDO mu, nu
#
      ENDPROC DENS_TRAN
#     ------------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC INTER_TRAN
#     ---------------
#
# Contract with the derivative integrals
# --------------------------------------
#
      PARDO mu, nu
#
            GET          Whfa(mu,nu) 
            GET          Whfb(mu,nu) 
            txx(mu,nu) = 0.0 
#
#           AA-Block. 
#           --------- 
#
            DO a 
#
               Tpx(a,nu) = 0.0 
#
               DO a1 
#
                  GET          Iab_a(a,a1)  
                  T1px(a,nu) = Iab_a(a,a1)*ca(nu,a1)  
                  Tpx(a,nu) += T1px(a,nu) 
#
               ENDDO a1 
#
               T1xx(mu,nu) = ca(mu,a)*Tpx(a,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO a 
#
#           BB-Block. 
#           --------- 
#
            DO b 
#
               Tqx(b,nu) = 0.0 
#
               DO b1 
#
                  GET          Iab_b(b,b1)  
                  T1qx(b,nu) = Iab_b(b,b1)*cb(nu,b1)  
                  Tqx(b,nu) += T1qx(b,nu) 
#
               ENDDO b1 
#
               T1xx(mu,nu) = cb(mu,b)*Tqx(b,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO b 
#
#           II-Block. 
#           --------- 
#
            DO i 
#
               Tpx(i,nu) = 0.0 
#
               DO i1 
#
                  GET          Iij_a(i,i1)  
                  T1px(i,nu) = Iij_a(i,i1)*ca(nu,i1)  
                  Tpx(i,nu) += T1px(i,nu) 
#
               ENDDO i1 
#
               T1xx(mu,nu) = ca(mu,i)*Tpx(i,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO i 
#
#           JJ-Block. 
#           --------- 
#
            DO j 
#
               Tqx(j,nu) = 0.0 
#
               DO j1 
#
                  GET          Iij_b(j,j1)  
                  T1qx(j,nu) = Iij_b(j,j1)*cb(nu,j1)  
                  Tqx(j,nu) += T1qx(j,nu) 
#
               ENDDO j1 
#
               T1xx(mu,nu) = cb(mu,j)*Tqx(j,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO j 
#
#           AI-Block. 
#           --------- 
#
            DO a 
#
               Tpx(a,nu) = 0.0 
#
               DO i1 
#
                  GET          Iia_a(i1,a)  
                  T1px(a,nu) = Iia_a(i1,a)*ca(nu,i1)  
                  Tpx(a,nu) += T1px(a,nu) 
#
               ENDDO i1 
#
               T1xx(mu,nu) = ca(mu,a)*Tpx(a,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO a 
#
            DO i1 
#
               Tpx(i1,nu) = 0.0 
#
               DO a 
#
                  GET           Iia_a(i1,a)  
                  T1px(i1,nu) = Iia_a(i1,a)*ca(nu,a)  
                  Tpx(i1,nu) += T1px(i1,nu) 
#
               ENDDO a 
#
               T1xx(mu,nu) = ca(mu,i1)*Tpx(i1,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO i1 
#
#           BJ-Block. 
#           --------- 
#
            DO b 
#
               Tqx(b,nu) = 0.0 
#
               DO j1 
#
                  GET          Iia_b(j1,b)  
                  T1qx(b,nu) = Iia_b(j1,b)*cb(nu,j1)  
                  Tqx(b,nu) += T1qx(b,nu) 
#
               ENDDO j1 
#
               T1xx(mu,nu) = cb(mu,b)*Tqx(b,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO b 
#
            DO j1 
#
               Tqx(j1,nu) = 0.0 
#
               DO b 
#
                  GET           Iia_b(j1,b)  
                  T1qx(j1,nu) = Iia_b(j1,b)*cb(nu,b)  
                  Tqx(j1,nu) += T1qx(j1,nu) 
#
               ENDDO b 
#
               T1xx(mu,nu) = cb(mu,j1)*Tqx(j1,nu) 
               Txx(mu,nu) += T1xx(mu,nu) 
#
            ENDDO j1 
#
            PUT Ixx(mu,nu) = Txx(mu,nu)
            Txx(mu,nu) += Whfa(mu,nu)  
            Txx(mu,nu) += Whfb(mu,nu)  
#
            EXECUTE SCONT1 Txx(mu,nu)
#
      ENDPARDO mu, nu
#
      ENDPROC INTER_TRAN
#     -------------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC D2TRANS
#     ------------
#
      PARDO a, a1, i, i1
#
            REQUEST T1aiai_aa(a,i,a1,i1) a 
#
            DO mu
#
               Txipi(mu,i,a1,i1) = T1aiai_aa(a,i,a1,i1)*ca(mu,a)
#
               DO nu
#
                  Txixi(mu,i,nu,i1)          = Txipi(mu,i,a1,i1)*ca(nu,a1)
                  PREPARE Vxixi(mu,i,nu,i1) += Txixi(mu,i,nu,i1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1, i, i1
#
#     BBBB spin case
#     --------------
#
      PARDO b, b1, j, j1
#
            REQUEST T1bjbj_bb(b,j,b1,j1) b 
#
            DO mu
#
               Txjqj(mu,j,b1,j1) = T1bjbj_bb(b,j,b1,j1)*cb(mu,b)
#
               DO nu
#
                  Txjxj(mu,j,nu,j1)          = Txjqj(mu,j,b1,j1)*cb(nu,b1)
                  PREPARE Vxjxj(mu,j,nu,j1) += Txjxj(mu,j,nu,j1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1, j, j1
#
#     AABB spin case
#     --------------
#
      PARDO a, b, i, j
#
            REQUEST T1aibj_ab(a,i,b,j) a 
#
            DO mu
#
               Txiqj(mu,i,b,j) = T1aibj_ab(a,i,b,j)*ca(mu,a)
#
               DO nu
#
                  Txixj(mu,i,nu,j)          = Txiqj(mu,i,b,j)*cb(nu,b)
                  PREPARE Vxixj(mu,i,nu,j) += Txixj(mu,i,nu,j)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, b, i, j
#
      execute server_barrier 
#
        PARDO mu, nu, lambda
#
              allocate D2(mu,lambda,nu,*)
#
              DO i1
#
                 Txxxi(mu,lambda,nu,i1) = 0.0
#
                 DO i
#
                    REQUEST                   Vxixi(mu,i,nu,i1) i 
#
                    T1xxxi(mu,lambda,nu,i1) = Vxixi(mu,i,nu,i1)*ca(lambda,i)
                    Txxxi(mu,lambda,nu,i1) += T1xxxi(mu,lambda,nu,i1)
#
                 ENDDO i
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxi(mu,lambda,nu,i1)*ca(sigma,i1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO i1
#
              DO j1
#
                 Txxxj(mu,lambda,nu,j1) = 0.0
#
                 DO j
#
                    REQUEST                   Vxjxj(mu,j,nu,j1) j 
                    T1xxxj(mu,lambda,nu,j1) = Vxjxj(mu,j,nu,j1)*cb(lambda,j)
                    Txxxj(mu,lambda,nu,j1) += T1xxxj(mu,lambda,nu,j1)
#
                 ENDDO j
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j1)*cb(sigma,j1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j1
#
              DO j
#
                 Txxxj(mu,lambda,nu,j) = 0.0
#
                 DO i
#
                    REQUEST                  Vxixj(mu,i,nu,j) j 
#
                    T1xxxj(mu,lambda,nu,j) = Vxixj(mu,i,nu,j)*ca(lambda,i)
                    Txxxj(mu,lambda,nu,j) += T1xxxj(mu,lambda,nu,j)
#
                    ENDDO i
#
                    DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j)*cb(sigma,j)
                    Txxxx(mu,lambda,nu,sigma)*= 2.0
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j
#
              DO sigma
#
#                Get 1-particle pieces
#                ---------------------
#
                 GET DHFa(mu,lambda)
                 GET DHFa(nu,sigma)
                 GET DHFa(mu,sigma)
                 GET DHFa(nu,lambda)
#
                 GET DHFb(mu,lambda)
                 GET DHFb(nu,sigma)
                 GET DHFb(mu,sigma)
                 GET DHFb(nu,lambda)
#
                 GET Dxx_a(mu,lambda)
                 GET Dxx_a(nu,sigma)
                 GET Dxx_a(mu,sigma)
                 GET Dxx_a(nu,lambda)
#
                 GET Dxx_b(mu,lambda)
                 GET Dxx_b(nu,sigma)
                 GET Dxx_b(mu,sigma)
                 GET Dxx_b(nu,lambda)
#
#                HF only
#                -------
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 Txxxx(mu,lambda,nu,sigma)  = Txx(mu,lambda)^DHFa(nu,sigma)
#
                 Txx(mu,lambda)             = DHFb(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 2.0
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFa(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFa(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFb(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFb(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txxxx(mu,lambda,nu,sigma) *= 0.5
#
#                Correlation
#                -----------
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)

                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,sigma)^DHFA(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(nu,lambda)^DHFA(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,sigma)^DHFB(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(nu,lambda)^DHFB(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
#                The nonseparable part
#                ----------------------
                 Txxxx(mu,lambda,nu,sigma) += D2(mu,lambda,nu,sigma)
#
#                Set up integrals
#                ----------------
                 execute der_int_setup dx1(mu,lambda,nu,sigma)
                 execute der_int_setup dx2(mu,lambda,nu,sigma)
                 execute der_int_setup dx3(mu,lambda,nu,sigma)
                 execute der_int_setup dx4(mu,lambda,nu,sigma)
                 execute der_int_setup dy1(mu,lambda,nu,sigma)
                 execute der_int_setup dy2(mu,lambda,nu,sigma)
                 execute der_int_setup dy3(mu,lambda,nu,sigma)
                 execute der_int_setup dy4(mu,lambda,nu,sigma)
                 execute der_int_setup dz1(mu,lambda,nu,sigma)
                 execute der_int_setup dz2(mu,lambda,nu,sigma)
                 execute der_int_setup dz3(mu,lambda,nu,sigma)
                 execute der_int_setup dz4(mu,lambda,nu,sigma)
#
#                Compute integral block
#                ----------------------
                 execute compute_derivative_integrals
#
#                Contract density with integral derivatives
#                ------------------------------------------
                 execute DCONT2 Txxxx(mu,lambda,nu,sigma)
#
              ENDDO sigma
#
              deallocate D2(mu,lambda,nu,*)
#
        ENDPARDO mu, nu, lambda
#
      ENDPROC D2TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC QYCOPY 
#
# Copy the complete beta MO fock matrix to an alpha array. 
# -------------------------------------------------------- 
#
      DO q 
      DO q1 
         fockmo_b(q,q1) *= 1.0 
         focknd_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q 
#
      DO p 
      DO p1 
         fockmob_a(p,p1) = 0.0 
         fockndb_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      execute copy_ff fockmo_b fockmob_a 
#
# Copy the beta MO fock matrix without diagonal pieces to an alpha array. 
# ----------------------------------------------------------------------- 
#
      execute copy_ff focknd_b fockndb_a 
#
# Copy the complete beta Qybj array into an alpha array. 
# ------------------------------------------------------ 
#
      DO q
      DO q1 
         SXai_b(q,q1) = 0.0 
      ENDDO q1 
      ENDDO q  
#
      DO b
      DO j 
         GET           Qybj(b,j) 
         SXai_b(b,j) = Qybj(b,j)  
      ENDDO j 
      ENDDO b  
#
      DO q
      DO q1 
         SXai_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q  
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0  
      ENDDO p1 
      ENDDO p  
#
      execute copy_ff SXai_b SXaib_a 
#
      ENDPROC QYCOPY 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UY_DD
#     ---------- 
#
      PARDO a, i 
#
            GET         Qyai(a,i) 
            tpp(a,i)  = Qyai(a,i) 
            tpp(a,i) += SXaib_a(a,i) 
# 
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a1,i1,a,i) a  
               REQUEST Vpipi(a1,i,a,i1) a  
               REQUEST Vaaii(a1,a,i,i1) a  
               GET Dold_dd(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 4.0  
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1) 
               t2pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
#
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) -= t2pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 2.0  
#
               t1pp(a1,i1)       = 0.0  
               t2pp(a1,i1)       = Dold_dd(a1,i1)
               execute remove_xs   t2pp t1pp 
#
               t2pp(a,i)         = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
               tpp(a,i)         += t2pp(a,i)  
# 
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET Dold_dd(a1,i) 
#
               t1pp(a1,a)  = Focknd_a(a1,a) 
               t1pp(a1,a) += Fockndb_a(a1,a) 
#
               t2pp(a1,i) = 0.0 
               t3pp(a1,i) = Dold_dd(a1,i) 
               execute remove_xs t3pp t2pp  
#
               t3pp(a,i) = t1pp(a1,a)*t2pp(a1,i)  
#
               tpp(a,i) += t3pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Dold_dd(a,i1) 
#
               t1pp(i1,i)  = Focknd_a(i1,i) 
               t1pp(i1,i) += Fockndb_a(i1,i) 
#
               t2pp(a,i1) = 0.0 
               t3pp(a,i1) = Dold_dd(a,i1)
               execute remove_xs t3pp t2pp 
#
               t3pp(a,i) = t2pp(a,i1)*t1pp(i1,i) 
#
               tpp(a,i) -= t3pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1  
#
               REQUEST Vpipi(a1,i1,a,i) a  
               REQUEST Vpipi(a1,i,a,i1) a  
               REQUEST Vaaii(a1,a,i,i1) a  
               GET Dold_ds(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i)  
               tpppp(a1,i1,a,i) *= 4.0 
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               t1pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_ds(a1,i1)
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i) = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
#
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1  
            ENDDO a1 
#
            DO i1 
#
               GET Dold_ds(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp  
#
               t2pp(a,i) = t1pp(a,i1)*Fockmo_a(i1,i)  
#
               tpp(a,i) -= t2pp(a,i)
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST Vpipi(a,i,i1,i2) a  
               REQUEST Vpipi(a,i2,i1,i) a  
               REQUEST Vpipi(a,i1,i2,i) a 
#
               tpppp(a,i,i1,i2) = Vpipi(a,i,i1,i2) 
               tpppp(a,i,i1,i2) *= 4.0  
               t1pppp(a,i,i1,i2) = Vpipi(a,i2,i1,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
               t1pppp(a,i,i1,i2) = Vpipi(a,i1,i2,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
#
               GET Dold_sd(i1,i2) 
               t1pp(i1,i2) = 0.0 
               t2pp(i1,i2) = Dold_sd(i1,i2)
               execute remove_ds t2pp t1pp 
               t2pp(a,i)  = tpppp(a,i,i1,i2)*t1pp(i1,i2) 
#
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET Dold_sd(i1,i) 
#
               t1pp(i1,i) = 0.0 
               t2pp(i1,i) = Dold_sd(i1,i)
               execute remove_ds t2pp t1pp
               t2pp(a,i) = Fockmob_a(i1,a)*t1pp(i1,i) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i) = tpp(a,i) # 0.0 
            execute remove_xs tpp t1pp  
#
            execute energy_abdenominator t1pp(a,i)  
            PUT Dnew_dd(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_dd(a,i) 
     #      Dold_dd(a,i) = Dnew_dd(a,i) 
     #      etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC UY_DD
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UY_DS
#     ----------- 
#
      PARDO a, i 
#
            GET         Qyai(a,i) 
            tpp(a,i)  = Qyai(a,i) 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_dd(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1)  
               tpppp(a,i,a1,i1) *= 4.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_dd(a1,i1)
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO i1 
#
               GET Dold_dd(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_dd(a,i1) 
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Fockmo_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_ds(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1) 
               tpppp(a,i,a1,i1) *= 2.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_ds(a1,i1)
               execute remove_xd t2pp t1pp 
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET Dold_ds(a1,i) 
               t1pp(a,i) = Focknd_a(a1,a)*Dold_ds(a1,i) 
               tpp(a,i) += t1pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Dold_ds(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Focknd_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST Vpipi(a,i,i2,i1) a  
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Vpipi(a,i,i2,i1)*t1pp(i2,i1) 
               t2pp(a,i) *= 2.0 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET Dold_sd(i,i1) 
               t1pp(i,i1) = 0.0 
               t2pp(i,i1) = Dold_sd(i,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Fockmob_a(a,i1)*t1pp(i,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i) = 0.0 
            execute remove_xd tpp t1pp  
#
            execute energy_adenominator t1pp(a,i)  
            PUT Dnew_ds(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_ds(a,i) 
     #      Dold_ds(a,i) = Dnew_ds(a,i) 
     #      etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC Uy_DS
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UY_SD
#     ---------- 
#
      PARDO i, i1 
#
            tpp(i,i1) = SXaib_a(i,i1) 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               REQUEST Vpipi(a,i1,i,i2) a  
               REQUEST Vpipi(a,i,i1,i2) a  
               GET Dold_dd(a,i2) 
#
               tpppp(a,i2,i,i1)  = Vpipi(a,i2,i,i1) 
               tpppp(a,i2,i,i1) *= 4.0  
               t1pppp(a,i2,i,i1) = Vpipi(a,i1,i,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
               t1pppp(a,i2,i,i1) = Vpipi(a,i,i1,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
#
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_dd(a,i2)
               execute remove_xs t2pp t1pp 
#
               t2pp(i,i1) = tpppp(a,i2,i,i1)*t1pp(a,i2) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_dd(a,i1) 
               t1pp(i,i1) = Fockmob_a(a,i)*Dold_dd(a,i1) 
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               GET Dold_ds(a,i2) 
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_ds(a,i2)
               execute remove_xd t2pp t1pp 
               t2pp(i,i1) = Vpipi(a,i2,i,i1)*t1pp(a,i2)  
               t2pp(i,i1) *= 2.0  
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_ds(a,i) 
               t1pp(i,i1) = Dold_ds(a,i)*Fockmob_a(a,i1)  
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO i2 
            DO i3 
#
               REQUEST Vpipi(i,i1,i2,i3) i  
               REQUEST Vpipi(i,i3,i2,i1) i  
               REQUEST Vpipi(i,i2,i3,i1) i 
               GET Dold_sd(i2,i3) 
#
               tpppp(i,i1,i2,i3) = Vpipi(i,i1,i2,i3) 
               tpppp(i,i1,i2,i3) *= 2.0  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i3,i2,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i2,i3,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
#
               t1pp(i2,i3) = 0.0 
               t2pp(i2,i3) = Dold_sd(i2,i3)
               execute remove_ds t2pp t1pp 
#
               t2pp(i,i1) = tpppp(i,i1,i2,i3)*t1pp(i2,i3)
               tpp(i,i1) += t2pp(i,i1)
#
            ENDDO i3 
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1)
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = Fockndb_a(i,i2)*t1pp(i2,i1) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i,i2) 
               t1pp(i,i2) = 0.0 
               t2pp(i,i2) = Dold_sd(i,i2)
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = t1pp(i,i2)*Fockndb_a(i2,i1) 
               tpp(i,i1) -= t2pp(i,i1) 
#
            ENDDO i2 
#
# Finish construction. 
# -------------------- 
#
            t1pp(i,i1) = 0.0 
            execute remove_ds tpp t1pp  
#
            execute energy_bdenominator t1pp(i,i1)  
            PUT Dnew_sd(i,i1) = t1pp(i,i1) 
#
      ENDPARDO i, i1  
#
      execute sip_barrier 
#
     #PARDO i, i1  
     #      GET Dnew_sd(i,i1) 
     #      Dold_sd(i,i1) = Dnew_sd(i,i1) 
     #      etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
     #      execute print_scalar etemp 
     #ENDPARDO i, i1  
#
      ENDPROC UY_SD
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UY_UPDATE  
#
# DD and DS blocks. 
# ----------------- 
#
      esum = 0.0 
#
      PARDO a, i 
#
            GET Dnew_dd(a,i) 
            GET Dnew_ds(a,i) 
            PUT Dold_dd(a,i) = Dnew_dd(a,i) 
            PUT Dold_ds(a,i) = Dnew_ds(a,i) 
            etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
            esum += etemp 
            etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
            esum += etemp 
#
      ENDPARDO a, i 
#
# SD block. 
# --------- 
#
      PARDO i, i1 
#
            GET Dnew_sd(i,i1) 
            PUT Dold_sd(i,i1) = Dnew_sd(i,i1) 
            etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
            esum += etemp 
#
      ENDPARDO i, i1 
#
      execute sip_barrier 
#
      collective enew += esum 
      execute print_scalar esum 
#
      ENDPROC UY_UPDATE  
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UYAI_FINISH   
#
      PARDO a, i 
#
            GET              Dold_dd(a,i) 
            GET              Dold_ds(a,i) 
            tpp(a,i)       = Dold_dd(a,i) 
            tpp(a,i)      += Dold_ds(a,i) 
            PUT Uyaa(a,i) += tpp(a,i) 
#
      ENDPARDO a, i 
#
#     Beta-beta sd block. 
#     ------------------- 
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0 
      ENDDO p1  
      ENDDO p  
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0 
      ENDDO q1  
      ENDDO q  
#
      DO i  
      DO i1
#
         GET             Dold_sd(i,i1) 
         SXaib_a(i,i1) = Dold_sd(i,i1)
#
      ENDDO i1   
      ENDDO i   
#
      DO p 
      DO p1
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1  
      ENDDO p  
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)       = SXai_b(b,j)  
            PUT Uybb(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
#     Beta-beta dd and ds blocks. 
#     --------------------------- 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO a 
      DO i 
#
         GET Dold_dd(a,i)
         SXaib_a(a,i)  = Dold_dd(a,i) 
#
      ENDDO i 
      ENDDO a 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)       = SXai_b(b,j)  
            PUT Uybb(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
#     Now form the IA blocks. 
#     ----------------------- 
#
      execute sip_barrier

      PARDO a, i 
#
            GET             Sya(i,a) 
            GET             Uyaa(a,i) 
            tpp(i,a)      = Uyaa(a,i) 
            tpp(i,a)     += Sya(i,a) 
            tpp(i,a)     *= -1.0  
            PUT Tyaa(i,a) = tpp(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET             Syb(j,b) 
            GET             Uybb(b,j) 
            tqq(j,b)      = Uybb(b,j) 
            tqq(j,b)     += Syb(j,b) 
            tqq(j,b)     *= -1.0  
            PUT Tybb(j,b) = tqq(j,b) 
#
      ENDPARDO b, j 
#
      execute sip_barrier

      PARDO a, i 
#
            GET             Tyaa(i,a) 
            PUT Uyaa(i,a) = Tyaa(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET             Tybb(j,b) 
            PUT Uybb(j,b) = Tybb(j,b) 
#
      ENDPARDO b, j 
#
      ENDPROC UYAI_FINISH  
#
# ---------------------------------------------------------------------------
#
      PROC UYVV_FINISH  
#
#     Alpha-alpha block 
#     ----------------- 
#
      PARDO a, a1 
#
            GET               Sya(a,a1) 
            tpp(a,a1)       = Sya(a,a1) 
            tpp(a,a1)      *= -0.5 
            PUT Uyaa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
#     BETA-BETA block 
#     --------------- 
#
      PARDO b, b1 
#
            GET               Syb(b,b1) 
            tqq(b,b1)       = Syb(b,b1) 
            tqq(b,b1)      *= -0.5 
            t1qq(b,b1)      = 0.0 
            execute remove_ss tqq t1qq 
            PUT Uybb(b,b1) += tqq(b,b1) 
#
      ENDPARDO b, b1 
#
      ENDPROC UYVV_FINISH 
#
# ---------------------------------------------------------------------------
#
      PROC UYOO_FINISH  
#
#     Beta-Beta block 
#     ---------------- 
#
      PARDO j, j1 
#
            GET               Syb(j,j1) 
            tqq(j,j1)       = Syb(j,j1) 
            tqq(j,j1)      *= -0.5 
            PUT Uybb(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
#     Alpha-Alpha block 
#     ----------------- 
#
      PARDO i, i1 
#
            GET          Sya(i,i1) 
            tpp(i,i1)  = Sya(i,i1) 
            tpp(i,i1) *= -0.5  
            t1pp(i,i1) = 0.0 
            execute remove_ss tpp t1pp 
            PUT Uyaa(i,i1) += tpp(i,i1) 
#
      ENDPARDO i, i1 
#
      ENDPROC UYOO_FINISH  
#
# ---------------------------------------------------------------------------
#
      PROC QXCOPY 
#
# Copy the complete beta MO fock matrix to an alpha array. 
# -------------------------------------------------------- 
#
      DO q 
      DO q1 
         fockmo_b(q,q1) *= 1.0 
         focknd_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q 
#
      DO p 
      DO p1 
         fockmob_a(p,p1) = 0.0 
         fockndb_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      execute copy_ff fockmo_b fockmob_a 
#
# Copy the beta MO fock matrix without diagonal pieces to an alpha array. 
# ----------------------------------------------------------------------- 
#
      execute copy_ff focknd_b fockndb_a 
#
# Copy the complete beta Qybj array into an alpha array. 
# ------------------------------------------------------ 
#
      DO q
      DO q1 
         SXai_b(q,q1) = 0.0 
      ENDDO q1 
      ENDDO q  
#
      DO b
      DO j 
         GET           Qxbj(b,j) 
         SXai_b(b,j) = Qxbj(b,j)  
      ENDDO j 
      ENDDO b  
#
      DO q
      DO q1 
         SXai_b(q,q1) *= 1.0 
      ENDDO q1 
      ENDDO q  
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0  
      ENDDO p1 
      ENDDO p  
#
      execute copy_ff SXai_b SXaib_a 
#
      ENDPROC QXCOPY 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UX_DD
#     ---------- 
#
      PARDO a, i 
#
            GET         Qxai(a,i) 
            tpp(a,i)  = Qxai(a,i) 
            tpp(a,i) += SXaib_a(a,i) 
# 
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a1,i1,a,i) a  
               REQUEST Vpipi(a1,i,a,i1) a  
               REQUEST Vaaii(a1,a,i,i1) a  
               GET Dold_dd(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 4.0  
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1) 
               t2pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
#
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) -= t2pppp(a1,i1,a,i) 
               tpppp(a1,i1,a,i) *= 2.0  
#
               t1pp(a1,i1)       = 0.0  
               t2pp(a1,i1)       = Dold_dd(a1,i1)
               execute remove_xs   t2pp t1pp 
#
               t2pp(a,i)         = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
               tpp(a,i)         += t2pp(a,i)  
# 
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET Dold_dd(a1,i) 
#
               t1pp(a1,a)  = Focknd_a(a1,a) 
               t1pp(a1,a) += Fockndb_a(a1,a) 
#
               t2pp(a1,i) = 0.0 
               t3pp(a1,i) = Dold_dd(a1,i)
               execute remove_xs t3pp t2pp  
#
               t3pp(a,i) = t1pp(a1,a)*t2pp(a1,i)  
#
               tpp(a,i) += t3pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Dold_dd(a,i1) 
#
               t1pp(i1,i)  = Focknd_a(i1,i) 
               t1pp(i1,i) += Fockndb_a(i1,i) 
#
               t2pp(a,i1) = 0.0 
               t3pp(a,i1) = Dold_dd(a,i1) 
               execute remove_xs t3pp t2pp 
#
               t3pp(a,i) = t2pp(a,i1)*t1pp(i1,i) 
#
               tpp(a,i) -= t3pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1  
#
               REQUEST Vpipi(a1,i1,a,i) a  
               REQUEST Vpipi(a1,i,a,i1) a  
               REQUEST Vaaii(a1,a,i,i1) a  
               GET Dold_ds(a1,i1) 
#
               tpppp(a1,i1,a,i)  = Vpipi(a1,i1,a,i)  
               tpppp(a1,i1,a,i) *= 4.0 
               t1pppp(a1,i1,a,i) = Vpipi(a1,i,a,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
               t1pppp(a1,i1,a,i) = Vaaii(a1,a,i,i1)  
               tpppp(a1,i1,a,i) -= t1pppp(a1,i1,a,i) 
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_ds(a1,i1) 
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i) = tpppp(a1,i1,a,i)*t1pp(a1,i1) 
#
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1  
            ENDDO a1 
#
            DO i1 
#
               GET Dold_ds(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp  
#
               t2pp(a,i) = t1pp(a,i1)*Fockmo_a(i1,i)  
#
               tpp(a,i) -= t2pp(a,i)
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST Vpipi(a,i,i1,i2) a  
               REQUEST Vpipi(a,i2,i1,i) a  
               REQUEST Vpipi(a,i1,i2,i) a 
               GET Dold_sd(i1,i2) 
#
               tpppp(a,i,i1,i2) = Vpipi(a,i,i1,i2) 
               tpppp(a,i,i1,i2) *= 4.0  
               t1pppp(a,i,i1,i2) = Vpipi(a,i2,i1,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
               t1pppp(a,i,i1,i2) = Vpipi(a,i1,i2,i)  
               tpppp(a,i,i1,i2) -= t1pppp(a,i,i1,i2)  
#
               t1pp(i1,i2) = 0.0 
               t2pp(i1,i2) = Dold_sd(i1,i2)
               execute remove_ds t2pp t1pp 
               t2pp(a,i)  = tpppp(a,i,i1,i2)*t1pp(i1,i2) 
#
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET Dold_sd(i1,i) 
#
               t1pp(i1,i) = 0.0 
               t2pp(i1,i) = Dold_sd(i1,i)
               execute remove_ds t2pp t1pp
               t2pp(a,i) = Fockmob_a(i1,a)*t1pp(i1,i) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i) = tpp(a,i) # 0.0 
            execute remove_xs tpp t1pp  
#
            execute energy_abdenominator t1pp(a,i)  
            PUT Dnew_dd(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_dd(a,i) 
     #      Dold_dd(a,i) = Dnew_dd(a,i) 
     #      etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC UX_DD
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UX_DS
#     ----------- 
#
      PARDO a, i 
#
            GET         Qxai(a,i) 
            tpp(a,i)  = Qxai(a,i) 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_dd(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1)  
               tpppp(a,i,a1,i1) *= 4.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_dd(a1,i1)
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO i1 
#
               GET Dold_dd(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_dd(a,i1)
               execute remove_xs t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Fockmo_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO a1 
            DO i1 
#
               REQUEST Vpipi(a,i,a1,i1) a  
               REQUEST Vpipi(a,i1,a1,i) a  
               REQUEST Vaaii(a,a1,i1,i) a  
               GET Dold_ds(a1,i1) 
#
               tpppp(a,i,a1,i1)  = Vpipi(a,i,a1,i1) 
               tpppp(a,i,a1,i1) *= 2.0  
               t1pppp(a,i,a1,i1) = Vpipi(a,i1,a1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
               t1pppp(a,i,a1,i1) = Vaaii(a,a1,i1,i)  
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)  
#
               t1pp(a1,i1) = 0.0 
               t2pp(a1,i1) = Dold_ds(a1,i1)
               execute remove_xd t2pp t1pp 
               t2pp(a,i) = tpppp(a,i,a1,i1)*t1pp(a1,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
#
               GET Dold_ds(a1,i) 
               t1pp(a,i) = Focknd_a(a1,a)*Dold_ds(a1,i) 
               tpp(a,i) += t1pp(a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Dold_ds(a,i1) 
               t1pp(a,i1) = 0.0 
               t2pp(a,i1) = Dold_ds(a,i1)
               execute remove_xd t2pp t1pp 
#
               t2pp(a,i) = t1pp(a,i1)*Focknd_a(i1,i) 
               tpp(a,i) -= t2pp(a,i) 
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               REQUEST Vpipi(a,i,i2,i1) a  
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Vpipi(a,i,i2,i1)*t1pp(i2,i1) 
               t2pp(a,i) *= 2.0 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO i1 
#
               GET Dold_sd(i,i1) 
               t1pp(i,i1) = 0.0 
               t2pp(i,i1) = Dold_sd(i,i1)
               execute remove_ds t2pp t1pp 
#
               t2pp(a,i) = Fockmob_a(a,i1)*t1pp(i,i1) 
               tpp(a,i) += t2pp(a,i) 
#
            ENDDO i1 
#
# Finish construction. 
# -------------------- 
#
            t1pp(a,i) = 0.0 
            execute remove_xd tpp t1pp  
#
            execute energy_adenominator t1pp(a,i)  
            PUT Dnew_ds(a,i) = t1pp(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
     #PARDO a, i 
     #      GET Dnew_ds(a,i) 
     #      Dold_ds(a,i) = Dnew_ds(a,i) 
     #      etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
     #      execute print_scalar etemp 
     #ENDPARDO a, i 
#
      ENDPROC UX_DS
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UX_SD
#     ---------- 
#
      PARDO i, i1 
#
            tpp(i,i1) = SXaib_a(i,i1) 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               REQUEST Vpipi(a,i1,i,i2) a  
               REQUEST Vpipi(a,i,i1,i2) a  
               GET Dold_dd(a,i2) 
#
               tpppp(a,i2,i,i1)  = Vpipi(a,i2,i,i1) 
               tpppp(a,i2,i,i1) *= 4.0  
               t1pppp(a,i2,i,i1) = Vpipi(a,i1,i,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
               t1pppp(a,i2,i,i1) = Vpipi(a,i,i1,i2)  
               tpppp(a,i2,i,i1) -= t1pppp(a,i2,i,i1)  
#
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_dd(a,i2)
               execute remove_xs t2pp t1pp 
#
               t2pp(i,i1) = tpppp(a,i2,i,i1)*t1pp(a,i2) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_dd(a,i1) 
               t1pp(i,i1) = Fockmob_a(a,i)*Dold_dd(a,i1) 
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO a 
            DO i2 
#
               REQUEST Vpipi(a,i2,i,i1) a  
               GET Dold_ds(a,i2) 
               t1pp(a,i2) = 0.0 
               t2pp(a,i2) = Dold_ds(a,i2)
               execute remove_xd t2pp t1pp 
               t2pp(i,i1) = Vpipi(a,i2,i,i1)*t1pp(a,i2)  
               t2pp(i,i1) *= 2.0  
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
            ENDDO a 
#
            DO a 
#
               GET          Dold_ds(a,i) 
               t1pp(i,i1) = Dold_ds(a,i)*Fockmob_a(a,i1)  
               tpp(i,i1) += t1pp(i,i1) 
#
            ENDDO a 
#
            DO i2 
            DO i3 
#
               REQUEST Vpipi(i,i1,i2,i3) i  
               REQUEST Vpipi(i,i3,i2,i1) i   
               REQUEST Vpipi(i,i2,i3,i1) i
               GET Dold_sd(i2,i3) 
#
               tpppp(i,i1,i2,i3) = Vpipi(i,i1,i2,i3) 
               tpppp(i,i1,i2,i3) *= 2.0  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i3,i2,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
               t1pppp(i,i1,i2,i3) = Vpipi(i,i2,i3,i1)  
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)  
#
               t1pp(i2,i3) = 0.0 
               t2pp(i2,i3) = Dold_sd(i2,i3)
               execute remove_ds t2pp t1pp 
#
               t2pp(i,i1) = tpppp(i,i1,i2,i3)*t1pp(i2,i3)
               tpp(i,i1) += t2pp(i,i1)
#
            ENDDO i3 
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i2,i1) 
               t1pp(i2,i1) = 0.0 
               t2pp(i2,i1) = Dold_sd(i2,i1) 
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = Fockndb_a(i,i2)*t1pp(i2,i1) 
               tpp(i,i1) += t2pp(i,i1) 
#
            ENDDO i2 
#
            DO i2 
#
               GET Dold_sd(i,i2) 
               t1pp(i,i2) = 0.0 
               t2pp(i,i2) = Dold_sd(i,i2)
               execute remove_ds t2pp t1pp 
               t2pp(i,i1) = t1pp(i,i2)*Fockndb_a(i2,i1) 
               tpp(i,i1) -= t2pp(i,i1) 
#
            ENDDO i2 
#
# Finish construction. 
# -------------------- 
#
            t1pp(i,i1) = 0.0 
            execute remove_ds tpp t1pp  
#
            execute energy_bdenominator t1pp(i,i1)  
            PUT Dnew_sd(i,i1) = t1pp(i,i1) 
#
      ENDPARDO i, i1  
#
      execute sip_barrier 
#
     #PARDO i, i1  
     #      GET Dnew_sd(i,i1) 
     #      Dold_sd(i,i1) = Dnew_sd(i,i1) 
     #      etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
     #      execute print_scalar etemp 
     #ENDPARDO i, i1  
#
      ENDPROC UX_SD
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UX_UPDATE  
#
# DD and DS blocks. 
# ----------------- 
#
      esum = 0.0 
#
      PARDO a, i 
#
            GET Dnew_dd(a,i) 
            GET Dnew_ds(a,i) 
            PUT Dold_dd(a,i) = Dnew_dd(a,i) 
            PUT Dold_ds(a,i) = Dnew_ds(a,i) 
            etemp = Dnew_dd(a,i)*Dnew_dd(a,i) 
            esum += etemp 
            etemp = Dnew_ds(a,i)*Dnew_ds(a,i) 
            esum += etemp 
#
      ENDPARDO a, i 
#
# SD block. 
# --------- 
#
      PARDO i, i1 
#
            GET Dnew_sd(i,i1) 
            PUT Dold_sd(i,i1) = Dnew_sd(i,i1) 
            etemp = Dnew_sd(i,i1)*Dnew_sd(i,i1) 
            esum += etemp 
#
      ENDPARDO i, i1 
#
      execute sip_barrier 
#
      collective enew += esum 
      execute print_scalar esum 
#
      ENDPROC UX_UPDATE  
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC UXAI_FINISH   
#
      PARDO a, i 
#
            GET              Dold_dd(a,i) 
            GET              Dold_ds(a,i) 
            tpp(a,i)       = Dold_dd(a,i) 
            tpp(a,i)      += Dold_ds(a,i) 
            PUT Uxaa(a,i) += tpp(a,i) 
#
      ENDPARDO a, i 
#
#     Beta-beta sd block. 
#     ------------------- 
#
      DO p 
      DO p1
         SXaib_a(p,p1) = 0.0 
      ENDDO p1  
      ENDDO p  
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0 
      ENDDO q1  
      ENDDO q  
#
      DO i  
      DO i1
#
         GET             Dold_sd(i,i1) 
         SXaib_a(i,i1) = Dold_sd(i,i1)
#
      ENDDO i1   
      ENDDO i   
#
      DO p 
      DO p1
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1  
      ENDDO p  
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)       = SXai_b(b,j)  
            PUT Uxbb(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
#     Beta-beta dd and ds blocks. 
#     --------------------------- 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) = 0.0 
      ENDDO p1 
      ENDDO p 
#
      DO a 
      DO i 
#
         GET Dold_dd(a,i)
         SXaib_a(a,i)  = Dold_dd(a,i) 
#
      ENDDO i 
      ENDDO a 
#
      DO p 
      DO p1 
         SXaib_a(p,p1) *= 1.0 
      ENDDO p1 
      ENDDO p 
#
      DO q 
      DO q1
         SXai_b(q,q1) = 0.0  
      ENDDO q1
      ENDDO q 
#
      execute copy_ff SXaib_a SXai_b 
#
      PARDO b, j 
#
            tqq(b,j)       = SXai_b(b,j)  
            PUT Uxbb(b,j) += tqq(b,j) 
#
      ENDPARDO b, j 
#
      execute sip_barrier 
#
#     Now form the IA blocks. 
#     ----------------------- 

      PARDO a, i 
#
            GET             Sxa(i,a) 
            GET             Uxaa(a,i) 
            tpp(i,a)      = Uxaa(a,i) 
            tpp(i,a)     += Sxa(i,a) 
            tpp(i,a)     *= -1.0  
            PUT Tyaa(i,a) = tpp(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET             Sxb(j,b) 
            GET             Uxbb(b,j) 
            tqq(j,b)      = Uxbb(b,j) 
            tqq(j,b)     += Sxb(j,b) 
            tqq(j,b)     *= -1.0  
            PUT Tybb(j,b) = tqq(j,b) 
#
      ENDPARDO b, j 
#
      execute sip_barrier 

      PARDO a, i 
#
            GET             Tyaa(i,a) 
            PUT Uxaa(i,a) = Tyaa(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET             Tybb(j,b) 
            PUT Uxbb(j,b) = Tybb(j,b) 
#
      ENDPARDO b, j 
#
      ENDPROC UXAI_FINISH  
#
# ---------------------------------------------------------------------------
#
      PROC UXVV_FINISH  
#
#     Alpha-alpha block 
#     ----------------- 
#
      PARDO a, a1 
#
            GET               Sxa(a,a1) 
            tpp(a,a1)       = Sxa(a,a1) 
            tpp(a,a1)      *= -0.5 
            PUT Uxaa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
#     BETA-BETA block 
#     --------------- 
#
      PARDO b, b1 
#
            GET               Sxb(b,b1) 
            tqq(b,b1)       = Sxb(b,b1) 
            tqq(b,b1)      *= -0.5 
            t1qq(b,b1)      = 0.0 
            execute remove_ss tqq t1qq 
            PUT Uxbb(b,b1) += tqq(b,b1) 
#
      ENDPARDO b, b1 
#
      ENDPROC UXVV_FINISH 
#
# ---------------------------------------------------------------------------
#
      PROC UXOO_FINISH  
#
#     Beta-Beta block 
#     ---------------- 
#
      PARDO j, j1 
#
            GET               Sxb(j,j1) 
            tqq(j,j1)       = Sxb(j,j1) 
            tqq(j,j1)      *= -0.5 
            PUT Uxbb(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
#     Alpha-Alpha block 
#     ----------------- 
#
      PARDO i, i1 
#
            GET          Sxa(i,i1) 
            tpp(i,i1)  = Sxa(i,i1) 
            tpp(i,i1) *= -0.5  
            t1pp(i,i1) = 0.0 
            execute remove_ss tpp t1pp 
            PUT Uxaa(i,i1) += tpp(i,i1) 
#
      ENDPARDO i, i1 
#
      ENDPROC UXOO_FINISH  
#
# ---------------------------------------------------------------------------
#
#
      PROC VX_UX
#     ----------
#
#     Add contrubutions to derivative MO integrals from derivatives of coefficients.

#     ------------------------------------------------------------------------------
#
#     alpha-alpha first
#     -----------------
#
      PARDO a, a1, i, i1
#
            REQUEST VXpipi(a,i,a1,i1) a 
            REQUEST VXpipi(a,i1,a1,i) a 
#
            tpppp(a,i,a1,i1)  = VXpipi(a,i,a1,i1)
            t1pppp(a,i,a1,i1) = VXpipi(a,i1,a1,i)
            tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            DO a2
#
               REQUEST VSpipi(a2,i,a1,i1) i 
               GET Uxaa(a2,a)
#
               t1pppp(a,i,a1,i1) = VSpipi(a2,i,a1,i1)*Uxaa(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO i2
#
               REQUEST VSpipi(i2,i,a1,i1) i 
               GET Uxaa(i2,a)
#
               t1pppp(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*Uxaa(i2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            DO a2
#
               REQUEST VSpipi(a,i,a2,i1) a 
               GET Uxaa(a2,a1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a2,i1)*Uxaa(a2,a1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO i2
#
               REQUEST VSpipi(a,i,i2,i1) a 
               GET Uxaa(i2,a1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,i2,i1)*Uxaa(i2,a1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            DO a2
#
               REQUEST VSaaai(a,a2,a1,i1) a 
               GET Uxaa(a2,i)
#
               t1pppp(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*Uxaa(a2,i)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO i2
#
               REQUEST VSpipi(a,i2,a1,i1) a 
               GET Uxaa(i2,i)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i2,a1,i1)*Uxaa(i2,i)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            DO a2
#
               REQUEST VSaaai(a1,a2,a,i) a 
               GET Uxaa(a2,i1)
#
               t1pppp(a,i,a1,i1) = VSaaai(a1,a2,a,i)*Uxaa(a2,i1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO i2
#
               REQUEST VSpipi(a,i,a1,i2) a 
               GET Uxaa(i2,i1)
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a1,i2)*Uxaa(i2,i1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            PREPARE VXSFullaa(a,i,a1,i1) = tpppp(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
#
#     beta-beta spin next
#     -------------------
#
      PARDO b, b1, j, j1
#
            REQUEST VXqjqj(b,j,b1,j1) b 
            REQUEST VXqjqj(b,j1,b1,j) b 
#
            tqqqq(b,j,b1,j1)  = VXqjqj(b,j,b1,j1)
            t1qqqq(b,j,b1,j1) = VXqjqj(b,j1,b1,j)
            tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            DO b2
#
               REQUEST VSqjqj(b2,j,b1,j1) b1 
               GET Uxbb(b2,b)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b2,j,b1,j1)*Uxbb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO j2
#
               REQUEST VSqjqj(j2,j,b1,j1) b1 
               GET Uxbb(j2,b)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(j2,j,b1,j1)*Uxbb(j2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            DO b2
#
               REQUEST VSqjqj(b,j,b2,j1) b 
               GET Uxbb(b2,b1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b2,j1)*Uxbb(b2,b1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO j2
#
               REQUEST VSqjqj(b,j,j2,j1) b 
               GET Uxbb(j2,b1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,j2,j1)*Uxbb(j2,b1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            DO b2
#
               REQUEST VSbbbj(b,b2,b1,j1) b 
               GET Uxbb(b2,j)
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b,b2,b1,j1)*Uxbb(b2,j)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO j2
#
               REQUEST VSqjqj(b,j2,b1,j1) b 
               GET Uxbb(j2,j)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j2,b1,j1)*Uxbb(j2,j)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            DO b2
#
               REQUEST VSbbbj(b1,b2,b,j) b 
               GET Uxbb(b2,j1)
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b1,b2,b,j)*Uxbb(b2,j1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO j2
#
               REQUEST VSqjqj(b,j,b1,j2) b 
               GET Uxbb(j2,j1)
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b1,j2)*Uxbb(j2,j1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            PREPARE VXSFullbb(b,j,b1,j1) = tqqqq(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
#     alpha-beta spin last
#     --------------------
#
      PARDO a, b, i, j
#
            REQUEST VXpiqj(a,i,b,j) a 
            tppqq(a,i,b,j) = VXpiqj(a,i,b,j)
#
            DO a2
#
               REQUEST Vpiqj(a2,i,b,j) b 
               GET Uxaa(a2,a)
#
               t1ppqq(a,i,b,j) = Vpiqj(a2,i,b,j)*Uxaa(a2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2
#
            DO i2
#
               REQUEST Vpiqj(i2,i,b,j) b 
               GET Uxaa(i2,a)
#
               t1ppqq(a,i,b,j) = Vpiqj(i2,i,b,j)*Uxaa(i2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2
#
            DO b2
#
               REQUEST Vpiqj(a,i,b2,j) j 
               GET Uxbb(b2,b)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b2,j)*Uxbb(b2,b)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2
#
            DO j2
#
               REQUEST Vpiqj(a,i,j2,j) a 
               GET Uxbb(j2,b)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,j2,j)*Uxbb(j2,b)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2
#
            DO a2
#
               REQUEST Vaabj(a,a2,b,j) a 
               GET Uxaa(a2,i)
#
               t1ppqq(a,i,b,j) = Vaabj(a,a2,b,j)*Uxaa(a2,i)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2
#
            DO i2
#
               REQUEST Vpiqj(a,i2,b,j) a 
               GET Uxaa(i2,i)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i2,b,j)*Uxaa(i2,i)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2
#
            DO b2
#
               REQUEST Vbbai(b,b2,a,i) a 
               GET Uxbb(b2,j)
#
               t1ppqq(a,i,b,j) = Vbbai(b,b2,a,i)*Uxbb(b2,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2
#
            DO j2
#
               REQUEST Vpiqj(a,i,b,j2) a 
               GET Uxbb(j2,j)
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b,j2)*Uxbb(j2,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2
#
            PREPARE VXFullab(a,i,b,j) = tppqq(a,i,b,j)
#
      ENDPARDO a, b, i, j
#
      execute sip_barrier
      execute server_barrier
#
      ENDPROC VX_UX
#     -------------
#
# ---------------------------------------------------------------------------
#
      PROC T1PERTA  
#     ------------ 
#
#     alpha/alpha component first. 
#     ---------------------------- 
#
#     Create new and old t1y arrays. 
#     ------------------------------ 
#
      create t1aa_old 
      create t1yaa 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO a,i 
#
            GET                        Fya(a,i) 
            tai(a,i)                 = Fya(a,i) 
            execute energy_denominator tai(a,i) 
            PUT t1aa_old(a,i)        = tai(a,i) 
#
            etemp                    = tai(a,i)*Fya(a,i) 
            esum                    += etemp 
#
      ENDPARDO a,i 
# 
      execute sip_barrier 
      collective eold   += esum 
      execute print_scalar eold 
#
#     Start iterations. 
#     ----------------- 
# 
      DO kiter 
#
         esum  = 0.0 
         enew  = 0.0 
         execute sip_barrier 
#
         PARDO a, i 
#
               GET        Fya(a,i) 
               tai(a,i) = Fya(a,i)  
#
               DO i1 
#
                  GET         t1aa_old(a,i1) 
                  GET         Fya(i,i1) 
                  GET         t1ai_a(a,i1) 
#
                  t1ai(a,i) = t1aa_old(a,i1)*focknd_a(i,i1) 
                  tai(a,i) -= t1ai(a,i) 
                  t1ai(a,i) = t1ai_a(a,i1)*Fya(i,i1)  
                  tai(a,i) -= t1ai(a,i) 
#
               ENDDO i1 
#
               DO a1 
#
                  GET         t1aa_old(a1,i) 
                  GET         Fya(a,a1) 
                  GET         t1ai_a(a1,i) 
                  t1ai(a,i) = focknd_a(a,a1)*t1aa_old(a1,i) 
                  tai(a,i) += t1ai(a,i) 
#
                  t1ai(a,i) = t1ai_a(a1,i)*Fya(a,a1) 
                  tai(a,i) += t1ai(a,i) 
#
               ENDDO a1 
#
               execute energy_denominator tai(a,i) 
               PUT           t1yaa(a,i) = tai(a,i)  
#
               etemp                    = tai(a,i)*Fya(a,i) 
               esum                    += etemp 
#
         ENDPARDO a, i 
#
         execute sip_barrier
         collective   enew += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         PARDO a,i 
#
              GET                 t1yaa(a,i) 
              PUT t1aa_old(a,i) = t1yaa(a,i) 
#
         ENDPARDO a,i 
# 
         execute sip_barrier 
# 
      ENDDO kiter 
#
      ENDPROC T1PERTA 
#     --------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T1PERTB  
#     ------------ 
#
#     alpha/alpha component first. 
#     ---------------------------- 
#
#     Create new and old t1y arrays. 
#     ------------------------------ 
#
      create t1bb_old 
      create t1ybb 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO b,j 
#
            GET                        Fyb(b,j) 
            tbj(b,j)                 = Fyb(b,j) 
            execute energy_denominator tbj(b,j) 
            PUT t1bb_old(b,j)        = tbj(b,j) 
#
            etemp                    = tbj(b,j)*Fyb(b,j) 
            esum                    += etemp 
#
      ENDPARDO b,j 
# 
      execute sip_barrier 
      collective eold   += esum 
      execute print_scalar eold 
#
#     Start iterations. 
#     ----------------- 
# 
      DO kiter 
#
         esum  = 0.0 
         enew  = 0.0 
         execute sip_barrier 
#
         PARDO b, j 
#
               GET        Fyb(b,j) 
               tbj(b,j) = Fyb(b,j)  
#
               DO j1 
#
                  GET         t1bb_old(b,j1) 
                  GET         Fyb(j,j1) 
                  GET         t1ai_b(b,j1) 
#
                  t1bj(b,j) = t1bb_old(b,j1)*focknd_b(j,j1) 
                  tbj(b,j) -= t1bj(b,j) 
                  t1bj(b,j) = t1ai_b(b,j1)*Fyb(j,j1)  
                  tbj(b,j) -= t1bj(b,j) 
#
               ENDDO j1 
#
               DO b1 
#
                  GET         t1bb_old(b1,j) 
                  GET         Fyb(b,b1) 
                  GET         t1ai_b(b1,j) 
                  t1bj(b,j) = focknd_b(b,b1)*t1bb_old(b1,j) 
                  tbj(b,j) += t1bj(b,j) 
#
                  t1bj(b,j) = t1ai_b(b1,j)*Fyb(b,b1) 
                  tbj(b,j) += t1bj(b,j) 
#
               ENDDO b1 
#
               execute energy_denominator tbj(b,j) 
               PUT           t1ybb(b,j) = tbj(b,j)  
#
               etemp                    = tbj(b,j)*Fyb(b,j) 
               esum                    += etemp 
#
         ENDPARDO b, j 
#
         execute    sip_barrier
         collective enew   += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         PARDO b,j 
#
              GET                 t1ybb(b,j) 
              PUT t1bb_old(b,j) = t1ybb(b,j) 
#
         ENDPARDO b,j 
# 
         execute sip_barrier 
# 
      ENDDO kiter 
#
      ENDPROC T1PERTB 
#     --------------- 
#
# ----------------------------------------------------------------------
#
#
# ----------------------------------------------------------------------
#
      PROC T2PERTAA  
#     ------------- 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO a, a1, i, i1 
#
            REQUEST                  T2yFullaa(a,i,a1,i1) a  
            REQUEST                  DTpppi(a,i,a1,i1) a  
            PREPARE t2aa_old(a,i,a1,i1)= T2yFullaa(a,i,a1,i1) 
#
            etemp                  = T2yFullaa(a,i,a1,i1)*DTpppi(a,i,a1,i1) 
            esum                  += etemp 
#
      ENDPARDO a, a1, i, i1 
# 
      execute    sip_barrier 
      execute    server_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
#     Start iterations. 
#     ----------------- 
# 
      DO kiter 
#
         esum  = 0.0 
         enew  = 0.0 
         execute server_barrier 
#
         PARDO a, a1, i, i1 
#
#           Bare term. 
#           ---------- 
#
            REQUEST             T2yFullaa(a,i,a1,i1) a  
            REQUEST             DTpppi(a,i,a1,i1) a  
            taiai(a,i,a1,i1)  = 0.0  
#
            DO i2 
#
               REQUEST             T1aiai_aa(a,i2,a1,i1) a  
               REQUEST             T1aiai_aa(a,i,a1,i2)  a  
               REQUEST             T2aa_old(a,i2,a1,i1)  a  
               REQUEST             T2aa_old(a,i,a1,i2)   a  
               GET                 Fya(i2,i) 
               GET                 Fya(i2,i1) 
#
               t1aiai(a,i,a1,i1) = T1aiai_aa(a,i2,a1,i1)*Fya(i2,i) 
               taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T1aiai_aa(a,i,a1,i2)*Fya(i2,i1) 
               taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T2aa_old(a,i2,a1,i1)*focknd_a(i2,i) 
               taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T2aa_old(a,i,a1,i2)*focknd_a(i2,i1) 
               taiai(a,i,a1,i1) -= t1aiai(a,i,a1,i1) 
#
            ENDDO i2 
#
            DO a2 
#
               REQUEST             T1aiai_aa(a2,i,a1,i1) a1  
               REQUEST             T1aiai_aa(a,i,a2,i1)  a  
               REQUEST             T2aa_old(a2,i,a1,i1)  a1  
               REQUEST             T2aa_old(a,i,a2,i1)   a 
               GET                 Fya(a,a2) 
               GET                 Fya(a1,a2) 
#
               t1aiai(a,i,a1,i1) = T1aiai_aa(a2,i,a1,i1)*Fya(a,a2) 
               taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T2aa_old(a2,i,a1,i1)*focknd_a(a,a2) 
               taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T1aiai_aa(a,i,a2,i1)*Fya(a1,a2) 
               taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
#
               t1aiai(a,i,a1,i1) = T2aa_old(a,i,a2,i1)*focknd_a(a1,a2) 
               taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
#
            ENDDO a2 
#
            execute energy_denominator  taiai(a,i,a1,i1) 
            taiai(a,i,a1,i1)         += T2yFullaa(a,i,a1,i1) 
            PREPARE T2aa_new(a,i,a1,i1)   = taiai(a,i,a1,i1) 
#
            etemp                   = taiai(a,i,a1,i1)*DTpppi(a,i,a1,i1) 
            esum                   += etemp 
#
         ENDPARDO a, a1, i, i1 
#
         execute    sip_barrier
         execute    server_barrier
         collective enew += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         PARDO a, a1, i, i1  
#
              REQUEST                       t2aa_new(a,i,a1,i1) a  
              PREPARE t2aa_old(a,i,a1,i1) = t2aa_new(a,i,a1,i1) 
#
         ENDPARDO a, a1, i, i1  
# 
         execute sip_barrier 
# 
      ENDDO kiter 
#
      execute sip_barrier 
      execute server_barrier 
#
#     Put converged amplitudes into proper place. 
#     ------------------------------------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST                        t2aa_new(a,i,a1,i1) a  
            PREPARE T2yFullaa(a,i,a1,i1) = t2aa_new(a,i,a1,i1)  
#
      ENDPARDO a, a1, i, i1 
#
      execute server_barrier 
#
      ENDPROC T2PERTAA  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T2PERTBB  
#     ------------- 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO b, b1, j, j1 
#
            REQUEST                  T2yFullbb(b,j,b1,j1) b  
            REQUEST                  DTqqqj(b,j,b1,j1) b  
            PREPARE t2bb_old(b,j,b1,j1)= T2yFullbb(b,j,b1,j1) 
#
            etemp                  = T2yFullbb(b,j,b1,j1)*DTqqqj(b,j,b1,j1) 
            esum                  += etemp 
#
      ENDPARDO b, b1, j, j1 
# 
      execute    sip_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
#     Start iterations. 
#     ----------------- 
# 
      DO kiter 
#
         esum  = 0.0 
         enew  = 0.0 
         execute server_barrier 
#
         PARDO b, b1, j, j1 
#
#           Bare term. 
#           ---------- 
#
            REQUEST             T2yFullbb(b,j,b1,j1) b  
            REQUEST             DTqqqj(b,j,b1,j1) b  
            tbjbj(b,j,b1,j1)  = 0.0  
#
            DO j2 
#
               REQUEST             T1bjbj_bb(b,j2,b1,j1) b  
               REQUEST             T1bjbj_bb(b,j,b1,j2)  b  
               REQUEST             T2bb_old(b,j2,b1,j1)  b  
               REQUEST             T2bb_old(b,j,b1,j2)   b  
               GET                 Fyb(j2,j) 
               GET                 Fyb(j2,j1) 
#
               t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j2,b1,j1)*Fyb(j2,j) 
               tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j,b1,j2)*Fyb(j2,j1) 
               tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T2bb_old(b,j2,b1,j1)*focknd_b(j2,j) 
               tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T2bb_old(b,j,b1,j2)*focknd_b(j2,j1) 
               tbjbj(b,j,b1,j1) -= t1bjbj(b,j,b1,j1) 
#
            ENDDO j2 
#
            DO b2 
#
               REQUEST             T1bjbj_bb(b2,j,b1,j1) j  
               REQUEST             T1bjbj_bb(b,j,b2,j1)  j  
               REQUEST             T2bb_old(b2,j,b1,j1)  j  
               REQUEST             T2bb_old(b,j,b2,j1)   j  
               GET                 Fyb(b,b2) 
               GET                 Fyb(b1,b2) 
#
               t1bjbj(b,j,b1,j1) = T1bjbj_bb(b2,j,b1,j1)*Fyb(b,b2) 
               tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T2bb_old(b2,j,b1,j1)*focknd_b(b,b2) 
               tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T1bjbj_bb(b,j,b2,j1)*Fyb(b1,b2) 
               tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1) 
#
               t1bjbj(b,j,b1,j1) = T2bb_old(b,j,b2,j1)*focknd_b(b1,b2) 
               tbjbj(b,j,b1,j1) += t1bjbj(b,j,b1,j1) 
#
            ENDDO b2 
#
            execute energy_denominator    tbjbj(b,j,b1,j1) 
            tbjbj(b,j,b1,j1)           += T2yFullbb(b,j,b1,j1)  
            PREPARE T2bb_new(b,j,b1,j1) = tbjbj(b,j,b1,j1) 
#
            etemp                    = tbjbj(b,j,b1,j1)*DTqqqj(b,j,b1,j1)
            esum                    += etemp 
#
         ENDPARDO b, b1, j, j1 
#
         execute    sip_barrier
         execute    server_barrier
         collective enew += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         PARDO b, b1, j, j1  
#
              REQUEST                       t2bb_new(b,j,b1,j1) b  
              PREPARE t2bb_old(b,j,b1,j1) = t2bb_new(b,j,b1,j1) 
#
         ENDPARDO b, b1, j, j1  
# 
         execute sip_barrier 
# 
      ENDDO kiter 
#
      execute sip_barrier 
      execute server_barrier 
#
#     Put converged amplitudes into proper place. 
#     ------------------------------------------- 
#
      PARDO b, b1, j, j1 
#
            REQUEST                        t2bb_new(b,j,b1,j1) b  
            PREPARE T2yFullbb(b,j,b1,j1) = t2bb_new(b,j,b1,j1)  
#
      ENDPARDO b, b1, j, j1 
#
      execute sip_barrier 
      execute server_barrier 
#
      ENDPROC T2PERTBB  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T2PERTAB  
#     ------------- 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO a, b, i, j 
#
            REQUEST                  T2yFullab(a,i,b,j) a  
            REQUEST                  DTppqj(a,i,b,j) a  
            PREPARE t2ab_old(a,i,b,j)  = T2yFullab(a,i,b,j) 
#
            etemp                  = T2yFullab(a,i,b,j)*DTppqj(a,i,b,j) 
            esum                  += etemp 
#
      ENDPARDO a, b, i, j 
# 
      execute    sip_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
#     Start iterations. 
#     ----------------- 
# 
      DO kiter 
#
         esum  = 0.0 
         enew  = 0.0 
         execute server_barrier 
#
         PARDO a, b, i, j 
#
#           Bare term. 
#           ---------- 
#
            REQUEST           T2yFullab(a,i,b,j) a 
            REQUEST           DTppqj(a,i,b,j) a  
            taibj(a,i,b,j)  = 0.0  
#
            DO i1 
#
               REQUEST           T1aibj_ab(a,i1,b,j) a  
               REQUEST           T2ab_old(a,i1,b,j)  a  
               GET               Fya(i1,i) 
#
               t1aibj(a,i,b,j) = T1aibj_ab(a,i1,b,j)*Fya(i1,i) 
               taibj(a,i,b,j) -= t1aibj(a,i,b,j) 
#
               t1aibj(a,i,b,j) = T2ab_old(a,i1,b,j)*focknd_a(i1,i) 
               taibj(a,i,b,j) -= t1aibj(a,i,b,j) 
#
            ENDDO i1 
#
            DO j1 
#
               REQUEST           T1aibj_ab(a,i,b,j1) a  
               REQUEST           T2ab_old(a,i,b,j1)  a  
               GET               Fyb(j1,j) 
#
               t1aibj(a,i,b,j) = T1aibj_ab(a,i,b,j1)*Fyb(j1,j) 
               taibj(a,i,b,j) -= t1aibj(a,i,b,j) 
#
               t1aibj(a,i,b,j) = T2ab_old(a,i,b,j1)*focknd_b(j1,j) 
               taibj(a,i,b,j) -= t1aibj(a,i,b,j) 
#
            ENDDO j1 
#
            DO a1 
#
               REQUEST           T1aibj_ab(a1,i,b,j) b  
               REQUEST           T2ab_old(a1,i,b,j)  b  
               GET               Fya(a,a1) 
#
               t1aibj(a,i,b,j) = T1aibj_ab(a1,i,b,j)*Fya(a,a1) 
               taibj(a,i,b,j) += t1aibj(a,i,b,j) 
#
               t1aibj(a,i,b,j) = T2ab_old(a1,i,b,j)*focknd_a(a,a1) 
               taibj(a,i,b,j) += t1aibj(a,i,b,j) 
#
            ENDDO a1 
#
            DO b1 
#
               REQUEST           T1aibj_ab(a,i,b1,j) a  
               REQUEST           T2ab_old(a,i,b1,j)  a  
               GET               Fyb(b,b1) 
#
               t1aibj(a,i,b,j) = T1aibj_ab(a,i,b1,j)*Fyb(b,b1) 
               taibj(a,i,b,j) += t1aibj(a,i,b,j) 
#
               t1aibj(a,i,b,j) = T2ab_old(a,i,b1,j)*focknd_b(b,b1) 
               taibj(a,i,b,j) += t1aibj(a,i,b,j) 
#
            ENDDO b1 
#
            execute energy_denominator taibj(a,i,b,j) 
            taibj(a,i,b,j)          += T2yFullab(a,i,b,j) 
            PREPARE T2ab_new(a,i,b,j)    = taibj(a,i,b,j) 
#
            etemp = taibj(a,i,b,j)*DTppqj(a,i,b,j)
            esum += etemp 
#
         ENDPARDO a, b, i, j 
#
         execute    sip_barrier
         execute    server_barrier
         collective enew += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         PARDO a, b, i, j  
#
              REQUEST                     t2ab_new(a,i,b,j) a  
              PREPARE t2ab_old(a,i,b,j) = t2ab_new(a,i,b,j) 
#
         ENDPARDO a, b, i, j  
# 
         execute sip_barrier 
# 
      ENDDO kiter 
#
      execute sip_barrier 
      execute server_barrier 
#
#     Put converged amplitudes into proper place. 
#     ------------------------------------------- 
#
      PARDO a, b, i, j 
#
            REQUEST                      t2ab_new(a,i,b,j) a  
            PREPARE T2yFullab(a,i,b,j) = t2ab_new(a,i,b,j)  
#
      ENDPARDO a, b, i, j 
#
      execute sip_barrier 
      execute server_barrier 
#
      ENDPROC T2PERTAB  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
      PROC PAMP 
#     --------- 
#
         CALL T1PERTA
         delete t1aa_old
         CALL T1PERTB
         delete t1bb_old
#
         CALL T2PERTAA
         CALL T2PERTAB
         CALL T2PERTBB
#
      ENDPROC PAMP 
#     ------------ 
#
# ---------------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC IUUP # --> Eq.(9)
#     ---------------------
#
#     Alpha contribution.
#     -------------------
#
      PARDO p, p1
#
            GET         Ipq_a(p,p1)
            tpp(p,p1) = 0.0
#
            DO p2
#
               GET           Uxaa(p2,p1)
               GET           Uyaa(p,p2)
               GET           Uyaa(p2,p)
#
               t1pp(p2,p)  = Uyaa(p,p2)
               t1pp(p2,p) *= 2.0
               t1pp(p2,p) += Uyaa(p2,p)
#
               t2pp(p,p1)  = Uxaa(p2,p1)*t1pp(p2,p)
               tpp(p,p1)  += t2pp(p,p1)
#
            ENDDO p2
#
            etemp   = Ipq_a(p,p1)*tpp(p,p1)
            hessxy -= etemp
#
      ENDPARDO p, p1
#
#     End Alpha contribution.
#     -----------------------
#
#     Beta contribution.
#     ------------------
#
      PARDO q, q1
#
            GET         Ipq_b(q,q1)
            tqq(q,q1) = 0.0
#
            DO q2
#
               GET           Uxbb(q2,q1)
               GET           Uybb(q,q2)
               GET           Uybb(q2,q)
#
               t1qq(q2,q)  = Uybb(q,q2)
               t1qq(q2,q) *= 2.0
               t1qq(q2,q) += Uybb(q2,q)
#
               t2qq(q,q1)  = Uxbb(q2,q1)*t1qq(q2,q)
               tqq(q,q1)  += t2qq(q,q1)
#
            ENDDO q2
#
            etemp   = Ipq_b(q,q1)*tqq(q,q1)
            hessxy -= etemp
#
      ENDPARDO q, q1
#
#     End Beta contribution.
#     ----------------------
#
      ENDPROC IUUP 
#     -----------
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC DUF # --> Eq.(8)  
#     --------------------- 
#
      create Y8aa 
      create Y8bb 
#
      execute sip_barrier 
#
#     First form one-particle intermediates used. 
#     ------------------------------------------- 
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO p, p1 
#
            GET         Fxa(p,p1) 
            tpp(p,p1) = Fxa(p,p1)
            tpp(p,p1)*= 2.0  
#
            DO p2 
#
               GET          Uxaa(p2,p1) 
               GET          Uxaa(p2,p) 
#
               t1pp(p,p1) = Uxaa(p2,p1)*Fockmo_a(p,p2) 
               tpp(p,p1) -= t1pp(p,p1) 
#
               t1pp(p,p1) = Uxaa(p2,p)*Fockmo_a(p2,p1) 
               t1pp(p,p1)*= 2.0  
               tpp(p,p1) -= t1pp(p,p1) 
#
            ENDDO p2 
#
            PUT Y8aa(p,p1) = tpp(p,p1) 
#
      ENDPARDO p, p1 
#
#     Beta contribution. 
#     ------------------ 
#
      PARDO q, q1 
#
            GET         Fxb(q,q1) 
            tqq(q,q1) = Fxb(q,q1)
            tqq(q,q1)*= 2.0  
#
            DO q2 
#
#
               GET          Uxbb(q2,q1) 
               GET          Uxbb(q2,q) 
#
               t1qq(q,q1) = Uxbb(q2,q1)*Fockmo_b(q,q2) 
               tqq(q,q1) -= t1qq(q,q1) 
#
               t1qq(q,q1) = Uxbb(q2,q)*Fockmo_b(q2,q1) 
               t1qq(q,q1)*= 2.0  
               tqq(q,q1) -= t1qq(q,q1) 
#
            ENDDO q2 
#
            PUT Y8bb(q,q1) = tqq(q,q1) 
#
      ENDPARDO q, q1 
#
      execute sip_barrier 
#
#     Done form one-particle intermediates used. 
#     ------------------------------------------ 
#
      PARDO p, p1 
#
            GET         Dpq_a(p,p1) 
            tpp(p,p1) = 0.0 
#
            DO p2 
#
               GET          Y8aa(p2,p)
               GET          Uyaa(p2,p1) 
#
               t1pp(p,p1) = Y8aa(p2,p)*Uyaa(p2,p1) 
               tpp(p,p1) += t1pp(p,p1) 
#
            ENDDO p2 
#
            etemp   = Dpq_a(p,p1)*tpp(p,p1)
            hessxy += etemp 
#
      ENDPARDO p, p1 
#
      PARDO q, q1 
#
            GET         Dpq_b(q,q1) 
            tqq(q,q1) = 0.0 
#
            DO q2 
#
               GET          Y8bb(q2,q)
               GET          Uybb(q2,q1) 
#
               t1qq(q,q1) = Y8bb(q2,q)*Uybb(q2,q1) 
               tqq(q,q1) += t1qq(q,q1) 
#
            ENDDO q2 
#
            etemp   = Dpq_b(q,q1)*tqq(q,q1)
            hessxy += etemp 
#
      ENDPARDO q, q1 
#
#     Done Beta contribution. 
#     ----------------------- 
#
      execute sip_barrier 
#
      delete Y8aa 
      delete Y8bb 
#
      ENDPROC DUF # --> Eq.(8)  
#     ----------------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC FTTAB # --> Eq.(6)  
#     ----------------------- 
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO a, a1 
#
            GET         Fxa(a,a1) 
            taa(a,a1) = 0.0 
#
            DO i 
#
               GET          T1yaa(a,i)
               GET          T1ai_a(a1,i) 
               t1aa(a,a1) = T1yaa(a,i)*T1ai_a(a1,i) 
               taa(a,a1) += t1aa(a,a1)
# 
               DO i1 
               DO a2 
#
                  REQUEST       T1aiai_aa(a,i,a2,i1)  a  
                  REQUEST       T2yFullaa(a1,i,a2,i1) a1   
#
                  t1aa(a,a1)  = T1aiai_aa(a,i,a2,i1)*T2yFullaa(a1,i,a2,i1) 
                  t1aa(a,a1) *= 0.5 
                  taa(a,a1)  += t1aa(a,a1)
#
               ENDDO a2 
               ENDDO i1 
# 
               DO j 
               DO b 
#
                  REQUEST      T1aibj_ab(a,i,b,j)  a  
                  REQUEST      T2yFullab(a1,i,b,j) a1   
#
                  t1aa(a,a1) = T1aibj_ab(a,i,b,j)*T2yFullab(a1,i,b,j) 
                  taa(a,a1) += t1aa(a,a1)
#
               ENDDO b 
               ENDDO j 
#
            ENDDO i 
# 
            etemp   = Fxa(a,a1)*taa(a,a1) 
            hessxy += etemp 
#
      ENDPARDO a, a1 
#
#     END Alpha contribution. 
#     ----------------------- 
#
#     BETA contribution. 
#     ------------------ 
#
      PARDO b, b1 
#
            GET         Fxb(b,b1) 
            tbb(b,b1) = 0.0 
#
            DO j 
#
               GET          T1ybb(b,j)
               GET          T1ai_b(b1,j) 
               t1bb(b,b1) = T1ybb(b,j)*T1ai_b(b1,j) 
               tbb(b,b1) += t1bb(b,b1)
# 
               DO j1 
               DO b2 
#
                  REQUEST       T1bjbj_bb(b,j,b2,j1)  b  
                  REQUEST       T2yFullbb(b1,j,b2,j1) b1  
#
                  t1bb(b,b1)  = T1bjbj_bb(b,j,b2,j1)*T2yFullbb(b1,j,b2,j1) 
                  t1bb(b,b1) *= 0.5 
                  tbb(b,b1)  += t1bb(b,b1)
#
               ENDDO b2 
               ENDDO j1 
# 
               DO i 
               DO a 
#
                  REQUEST      T1aibj_ab(a,i,b,j)  a 
                  REQUEST      T2yFullab(a,i,b1,j) a  
#
                  t1bb(b,b1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i,b1,j) 
                  tbb(b,b1) += t1bb(b,b1)
#
               ENDDO a 
               ENDDO i 
#
            ENDDO j 
# 
            etemp   = Fxb(b,b1)*tbb(b,b1) 
            hessxy += etemp 
#
      ENDPARDO b, b1 
#
#     END Beta contribution. 
#     ---------------------- 
#
      ENDPROC FTTAB # --> Eq.(6)  
#     -------------------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC FTTIJ # --> Eq.(5)  
#     -----------------------  
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO i, i1 
#
           GET         Fxa(i,i1) 
           tpp(i,i1) = 0.0 
#
           DO a 
#
              GET          T1yaa(a,i1)
              GET          T1ai_a(a,i) 
              t1pp(i,i1) = T1yaa(a,i1)*T1ai_a(a,i) 
              tpp(i,i1) += t1pp(i,i1)
#
              DO a1 
              DO i2 
#
                 REQUEST      T1aiai_aa(a,i,a1,i2)  a  
                 REQUEST      T2yFullaa(a,i1,a1,i2) a  
# 
                 t1pp(i,i1) = T1aiai_aa(a,i,a1,i2)*T2yFullaa(a,i1,a1,i2) 
                 t1pp(i,i1)*= 0.5  
                 tpp(i,i1) += t1pp(i,i1) 
#
              ENDDO i2 
              ENDDO a1 
#
              DO b 
              DO j 
#
                 REQUEST      T1aibj_ab(a,i,b,j)  a  
                 REQUEST      T2yFullab(a,i1,b,j) a  
# 
                 t1pp(i,i1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i1,b,j) 
                 tpp(i,i1) += t1pp(i,i1) 
#
              ENDDO j 
              ENDDO b 
#
           ENDDO a 
#
           etemp   = Fxa(i,i1)*tpp(i,i1)
           hessxy -= etemp 
#
      ENDPARDO i, i1 
#
#     END Alpha contribution. 
#     ----------------------- 
#
#     Beta contribution. 
#     ------------------ 
#
      PARDO j, j1 
#
           GET         Fxb(j,j1) 
           tqq(j,j1) = 0.0 
#
           DO b 
#
              GET          T1ybb(b,j1)
              GET          T1ai_b(b,j) 
              t1qq(j,j1) = T1ybb(b,j1)*T1ai_b(b,j) 
              tqq(j,j1) += t1qq(j,j1)
#
              DO b1 
              DO j2 
#
                 REQUEST      T1bjbj_bb(b,j,b1,j2)  b  
                 REQUEST      T2yFullbb(b,j1,b1,j2) b  
# 
                 t1qq(j,j1) = T1bjbj_bb(b,j,b1,j2)*T2yFullbb(b,j1,b1,j2) 
                 t1qq(j,j1)*= 0.5  
                 tqq(j,j1) += t1qq(j,j1) 
#
              ENDDO j2 
              ENDDO b1 
#
              DO a 
              DO i 
#
                 REQUEST      T1aibj_ab(a,i,b,j)  a  
                 REQUEST      T2yFullab(a,i,b,j1) a  
# 
                 t1qq(j,j1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i,b,j1) 
                 tqq(j,j1) += t1qq(j,j1) 
#
              ENDDO i 
              ENDDO a 
#
           ENDDO b 
#
           etemp   = Fxb(j,j1)*tqq(j,j1)
           hessxy -= etemp 
#
      ENDPARDO j, j1 
#
#     END Beta contribution. 
#     ---------------------- 
#
      ENDPROC FTTIJ # --> Eq.(5)  
#     --------------------------  
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC DT1 # --> Eq.(7)
#     ---------------------
#
#     Alpha contribution.
#     -------------------
#
      PARDO a, i
#
           GET       T1yaa(a,i)
           GET       Fxa(a,i)
#
           etemp   = Fxa(a,i)*T1yaa(a,i)
           hessxy += etemp
#
      ENDPARDO a, i
#
#     Beta contribution.
#     ------------------
#
      PARDO b, j
#
           GET       T1ybb(b,j)
           GET       Fxb(b,j)
#
           etemp   = Fxb(b,j)*T1ybb(b,j)
           hessxy += etemp
#
      ENDPARDO b, j
#
      ENDPROC DT1 # --> Eq.(7)
#     ------------------------
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
# Terms 5-9 of equation 4 are computed. 
# ------------------------------------- 
#
      PROC PART1 
#     ---------- 
#
         CALL IUUP  # --> Eq.(9) # --> Passed  
         CALL DUF   # --> Eq.(8) # --> Passed       
#
         CALL FTTAB # --> Eq.(6) # --> Passed  
         CALL FTTIJ # --> Eq.(5) # --> Passed   
         CALL DT1   # --> Eq.(7) # 
#
      ENDPROC PART1 
#     ------------- 
#
# ----------------------------------------------------------------------
#
# ---------------------------------------------------------------------- 
#
# The contributions to the Hessian which depend on the two-electron
# integral first-derivatives are computed. These are terms 10-14 in
# Eq.(4). 
#
# ---------------------------------------------------------------------- 
#
      PROC PART2  
#     ---------- 
#
#     Term 10. 
#     --------  
#
#     Contribution from Uxxaa. 
#     ------------------------ 
#
      PARDO i, i1 
#
            GET         Uxaa(i,i1) 
            tii(i,i1) = 0.0  
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i2 
            DO a 
            DO a1 
#
               REQUEST             T1aiai_aa(a,i1,a1,i2) a  
               REQUEST             DTpppi(a,i,a1,i2) a # + 
               REQUEST             DTpppi(a,i2,a1,i) a # - 
#
               Tpppi(a,i,a1,i2)  = DTpppi(a,i,a1,i2)  
               T1pppi(a,i,a1,i2) = DTpppi(a,i2,a1,i)  
               Tpppi(a,i,a1,i2) -= T1pppi(a,i,a1,i2)  
#
               t1ii(i,i1)        = Tpppi(a,i,a1,i2)*T1aiai_aa(a,i1,a1,i2) 
               tii(i,i1)        += t1ii(i,i1) 
#
            ENDDO a1 
            ENDDO a 
            ENDDO i2 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO j 
            DO a 
            DO b 
#
               REQUEST      T1aibj_ab(a,i1,b,j) a  
               REQUEST      DTppqj(a,i,b,j) a  
#
               t1ii(i,i1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i1,b,j) 
               t1ii(i,i1)*= 2.0  
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO b 
            ENDDO a 
            ENDDO j 
#
            etemp   = Uxaa(i,i1)*tii(i,i1) 
            hessxy += etemp 
#
      ENDPARDO i, i1 
#
#     Contribution from Uxxbb. 
#     ------------------------ 
#
      PARDO j, j1 
#
            GET         Uxbb(j,j1) 
            tjj(j,j1) = 0.0  
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j2 
            DO b 
            DO b1 
#
               REQUEST             T1bjbj_bb(b,j1,b1,j2) b  
               REQUEST             DTqqqj(b,j,b1,j2) b # + 
               REQUEST             DTqqqj(b,j2,b1,j) b # - 
#
               Tqqqj(b,j,b1,j2)  = DTqqqj(b,j,b1,j2)  
               T1qqqj(b,j,b1,j2) = DTqqqj(b,j2,b1,j)  
               Tqqqj(b,j,b1,j2) -= T1qqqj(b,j,b1,j2)  
#
               t1jj(j,j1)        = Tqqqj(b,j,b1,j2)*T1bjbj_bb(b,j1,b1,j2) 
               tjj(j,j1)        += t1jj(j,j1) 
#
            ENDDO b1 
            ENDDO b 
            ENDDO j2 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO b 
            DO a 
#
               REQUEST      T1aibj_ab(a,i,b,j1) a  
               REQUEST      DTppqj(a,i,b,j) a 
#
               t1jj(j,j1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i,b,j1) 
               t1jj(j,j1)*= 2.0  
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO a 
            ENDDO b 
            ENDDO i 
#
            etemp   = Uxbb(j,j1)*tjj(j,j1) 
            hessxy += etemp 
#
      ENDPARDO j, j1 
#
#     Term 10 Finished. 
#     ----------------- 
#
#     Term 11. 
#     --------  
#
#     Contribution from Uxai. 
#     ----------------------- 
#
      PARDO a, i 
#
            GET        Uxaa(a,i) 
            tai(a,i) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO a1 
            DO i1 
            DO a2 
#
               REQUEST T1aiai_aa(a1,i,a2,i1) a1  
               REQUEST DTpppi(a1,a,a2,i1) a # + 
               REQUEST DTpppi(a2,a,a1,i1) a # - 
#
               Tpppi(a1,a,a2,i1)  = DTpppi(a1,a,a2,i1) 
               T1pppi(a1,a,a2,i1) = DTpppi(a2,a,a1,i1)  
               Tpppi(a1,a,a2,i1) -= T1pppi(a1,a,a2,i1)
#
               t1ai(a,i) = Tpppi(a1,a,a2,i1)*T1aiai_aa(a1,i,a2,i1) 
               tai(a,i) += t1ai(a,i)  
#
            ENDDO a2 
            ENDDO i1 
            ENDDO a1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO a1 
            DO j 
            DO b 
#
               REQUEST T1aibj_ab(a1,i,b,j) a1  
               REQUEST DTppqj(a1,a,b,j) a 
#
               t1ai(a,i) = DTppqj(a1,a,b,j)*T1aibj_ab(a1,i,b,j) 
               t1ai(a,i)*= 2.0  
               tai(a,i) += t1ai(a,i)  
#
            ENDDO b 
            ENDDO j 
            ENDDO a1 
#
            etemp   = tai(a,i)*Uxaa(a,i)  
            hessxy += etemp 
#
      ENDPARDO a, i 
#
#     Contribution from Uxbj. 
#     ----------------------- 
#
      PARDO b, j 
#
            GET        Uxbb(b,j) 
            tbj(b,j) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO b1 
            DO j1 
            DO b2 
#
               REQUEST T1bjbj_bb(b1,j,b2,j1) b1  
               REQUEST DTqqqj(b1,b,b2,j1) b # + 
               REQUEST DTqqqj(b2,b,b1,j1) b # - 
#
               Tqqqj(b1,b,b2,j1)  = DTqqqj(b1,b,b2,j1) 
               T1qqqj(b1,b,b2,j1) = DTqqqj(b2,b,b1,j1)  
               Tqqqj(b1,b,b2,j1) -= T1qqqj(b1,b,b2,j1)
#
               t1bj(b,j) = Tqqqj(b1,b,b2,j1)*T1bjbj_bb(b1,j,b2,j1) 
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO b2 
            ENDDO j1 
            ENDDO b1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO b1 
            DO i 
            DO a 
#
               REQUEST T1aibj_ab(a,i,b1,j) a  
               REQUEST DTqqpi(b1,b,a,i) a 
#
               t1bj(b,j) = DTqqpi(b1,b,a,i)*T1aibj_ab(a,i,b1,j) 
               t1bj(b,j)*= 2.0  
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO a 
            ENDDO i 
            ENDDO b1 
#
            etemp   = tbj(b,j)*Uxbb(b,j)  
            hessxy += etemp 
#
      ENDPARDO b, j 
#
#     Term 11 Finished. 
#     ----------------- 
#
#     Term 12. 
#     -------- 
#
#     Contribution from Uxia. 
#     ----------------------- 
#
      PARDO a, i 
#
            GET        Uxaa(i,a) 
            tia(i,a) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i1 
            DO i2 
            DO a1 
#
               REQUEST DTpppi(a1,i2,i,i1) a1 # + 
               REQUEST DTpppi(a1,i1,i,i2) a1 # - 
               REQUEST T1aiai_aa(a,i1,a1,i2) a  
#
               tpppi(a1,i2,i,i1)  = DTpppi(a1,i2,i,i1) 
               t1pppi(a1,i2,i,i1) = DTpppi(a1,i1,i,i2) 
               tpppi(a1,i2,i,i1) -= t1pppi(a1,i2,i,i1)  
#
               t1ia(i,a) = tpppi(a1,i2,i,i1)*T1aiai_aa(a,i1,a1,i2) 
               tia(i,a) += t1ia(i,a) 
#
            ENDDO a1 
            ENDDO i2 
            ENDDO i1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i1 
            DO j 
            DO b 
#
               REQUEST DTqqpi(b,j,i,i1) b # + 
               REQUEST T1aibj_ab(a,i1,b,j) a  
#
               t1ia(i,a) = DTqqpi(b,j,i,i1)*T1aibj_ab(a,i1,b,j) 
               t1ia(i,a)*= 2.0 
               tia(i,a) += t1ia(i,a) 
#
            ENDDO b 
            ENDDO j 
            ENDDO i1 
#
            etemp   = tia(i,a)*Uxaa(i,a) 
            hessxy += etemp 
#
      ENDPARDO a, i 
#
#     Contribution from Uxjb. 
#     ----------------------- 
#
      PARDO b, j 
#
            GET        Uxbb(j,b) 
            tjb(j,b) = 0.0 
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j1 
            DO j2 
            DO b1 
#
               REQUEST DTqqqj(b1,j2,j,j1) j # + 
               REQUEST DTqqqj(b1,j1,j,j2) j # - 
               REQUEST T1bjbj_bb(b,j1,b1,j2) b  
#
               tqqqj(b1,j2,j,j1)  = DTqqqj(b1,j2,j,j1) 
               t1qqqj(b1,j2,j,j1) = DTqqqj(b1,j1,j,j2) 
               tqqqj(b1,j2,j,j1) -= t1qqqj(b1,j2,j,j1)  
#
               t1jb(j,b) = tqqqj(b1,j2,j,j1)*T1bjbj_bb(b,j1,b1,j2) 
               tjb(j,b) += t1jb(j,b) 
#
            ENDDO b1 
            ENDDO j2 
            ENDDO j1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO j1 
            DO i 
            DO a 
#
               REQUEST DTqqpi(j,j1,a,i) a  
               REQUEST T1aibj_ab(a,i,b,j1) a  
#
               t1jb(j,b) = DTqqpi(j,j1,a,i)*T1aibj_ab(a,i,b,j1) 
               t1jb(j,b)*= 2.0 
               tjb(j,b) += t1jb(j,b) 
#
            ENDDO a 
            ENDDO i 
            ENDDO j1 
#
            etemp   = tjb(j,b)*Uxbb(j,b) 
            hessxy += etemp 
#
      ENDPARDO b, j 
#
#     Term 12 Finished. 
#     ----------------- 
#
#     Term 13. 
#     -------- 
#
#     Contribution from Uxaa. 
#     ----------------------- 
#
      PARDO a, a1 
#
            GET         Uxaa(a,a1) 
            taa(a,a1) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i 
            DO i1 
            DO a2 
#
               REQUEST DTpppi(a,i,a2,i1) a # + 
               REQUEST DTpppi(a,i1,a2,i) a # - 
               REQUEST T1aiai_aa(a1,i,a2,i1) a1  
#
               Tpppi(a,i,a2,i1)  = DTpppi(a,i,a2,i1) 
               T1pppi(a,i,a2,i1) = DTpppi(a,i1,a2,i) 
               Tpppi(a,i,a2,i1) -= T1pppi(a,i,a2,i1) 
#
               t1aa(a,a1) = Tpppi(a,i,a2,i1)*T1aiai_aa(a1,i,a2,i1) 
               taa(a,a1) += t1aa(a,a1)  
#
            ENDDO a2 
            ENDDO i1 
            ENDDO i 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO j 
            DO b 
#
               REQUEST DTppqj(a,i,b,j) a # + 
               REQUEST T1aibj_ab(a1,i,b,j) a1  
#
               t1aa(a,a1) = DTppqj(a,i,b,j)*T1aibj_ab(a1,i,b,j) 
               t1aa(a,a1)*= 2.0  
               taa(a,a1) += t1aa(a,a1)  
#
            ENDDO b 
            ENDDO j 
            ENDDO i 
#
            etemp   = taa(a,a1)*Uxaa(a,a1) 
            hessxy += etemp 
#
      ENDPARDO a, a1 
#
#     Contribution from Uxbb. 
#     ----------------------- 
#
      PARDO b, b1 
#
            GET         Uxbb(b,b1) 
            tbb(b,b1) = 0.0 
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j 
            DO j1 
            DO b2 
#
               REQUEST DTqqqj(b,j,b2,j1) b # + 
               REQUEST DTqqqj(b,j1,b2,j) b # - 
               REQUEST T1bjbj_bb(b1,j,b2,j1) b1  
#
               Tqqqj(b,j,b2,j1)  = DTqqqj(b,j,b2,j1) 
               T1qqqj(b,j,b2,j1) = DTqqqj(b,j1,b2,j) 
               Tqqqj(b,j,b2,j1) -= T1qqqj(b,j,b2,j1) 
#
               t1bb(b,b1) = Tqqqj(b,j,b2,j1)*T1bjbj_bb(b1,j,b2,j1) 
               tbb(b,b1) += t1bb(b,b1)  
#
            ENDDO b2 
            ENDDO j1 
            ENDDO j 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO j 
            DO a 
#
               REQUEST DTppqj(a,i,b,j) a # + 
               REQUEST T1aibj_ab(a,i,b1,j) a  
#
               t1bb(b,b1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i,b1,j) 
               t1bb(b,b1)*= 2.0  
               tbb(b,b1) += t1bb(b,b1)  
#
            ENDDO a 
            ENDDO j 
            ENDDO i 
#
            etemp   = tbb(b,b1)*Uxbb(b,b1) 
            hessxy += etemp 
#
      ENDPARDO b, b1 
#
#     Term 13 Finished. 
#     ----------------- 
#
      ENDPROC PART2  
#     ------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM14 
#     ----------- 
#
#     Term 14. 
#     -------- 
#
#     Contributions from Uxpi. 
#     ----------------------- 
#
      PARDO p, i 
#
           GET        Uxaa(p,i) 
           tpi(p,i) = 0.0 
#
#          alpha/alpha contribution. 
#          ------------------------- 
#
           DO p1 
           DO p2 
#
              REQUEST             DTpppi(p2,p1,p,i) i # + 
              REQUEST             DTpppi(p,p1,p2,i) i # - 
              GET                 Dpq_a(p1,p2) 
#
              tpppi(p2,p1,p,i)  = DTpppi(p2,p1,p,i) 
              t1pppi(p2,p1,p,i) = DTpppi(p,p1,p2,i) 
              tpppi(p2,p1,p,i) -= t1pppi(p2,p1,p,i)
#
              t1pi(p,i)         = tpppi(p2,p1,p,i)*Dpq_a(p1,p2)
              t1pi(p,i)        *= 2.0 
              tpi(p,i)         += t1pi(p,i) 
#
           ENDDO p2 
           ENDDO p1 
#
#          alpha/beta contribution. 
#          ------------------------ 
#
           DO q1 
           DO q 
#
              REQUEST      DTqqpi(q,q1,p,i) p # + 
              GET          Dpq_b(q1,q) 
#
              t1pi(p,i)  = DTqqpi(q,q1,p,i)*Dpq_b(q1,q)
              t1pi(p,i) *= 2.0 
              tpi(p,i)  += t1pi(p,i) 
#
           ENDDO q 
           ENDDO q1 
#
           etemp   = tpi(p,i)*Uxaa(p,i) 
           hessxy += etemp 
#
      ENDPARDO p, i 
#
#     Contributions from Uxqj. 
#     ----------------------- 
#
      PARDO q, j 
#
           GET        Uxbb(q,j) 
           tqj(q,j) = 0.0 
#
#          beta/beta contribution. 
#          ----------------------- 
#
           DO q1 
           DO q2 
#
              REQUEST             DTqqqj(q2,q1,q,j) q # + 
              REQUEST             DTqqqj(q,q1,q2,j) q # - 
              GET                 Dpq_b(q1,q2) 
#
              tqqqj(q2,q1,q,j)  = DTqqqj(q2,q1,q,j) 
              t1qqqj(q2,q1,q,j) = DTqqqj(q,q1,q2,j) 
              tqqqj(q2,q1,q,j) -= t1qqqj(q2,q1,q,j)
#
              t1qj(q,j)         = tqqqj(q2,q1,q,j)*Dpq_b(q1,q2)
              t1qj(q,j)        *= 2.0 
              tqj(q,j)         += t1qj(q,j) 
#
           ENDDO q2 
           ENDDO q1 
#
#          alpha/beta contribution. 
#          ------------------------ 
#
           DO p1 
           DO p 
#
              REQUEST      DTppqj(p,p1,q,j) p # + 
              GET          Dpq_a(p1,p) 
#
              t1qj(q,j)  = DTppqj(p,p1,q,j)*Dpq_a(p1,p)
              t1qj(q,j) *= 2.0 
              tqj(q,j)  += t1qj(q,j) 
#
           ENDDO p 
           ENDDO p1 
#
           etemp   = tqj(q,j)*Uxbb(q,j) 
           hessxy += etemp 
#
      ENDPARDO q, j 
#
#     Term 14 Finished. 
#     ----------------- 
#
      ENDPROC TERM14   
#     -------------- 
#
# ------------------------------------------------------------
#
# ------------------------------------------------------------
#
# The terms linear in the two-electron integrals are computed
# in the procedure. These are terms 15 of Eq.(4). 
#
# ------------------------------------------------------------
#
      PROC TERM15   
#     ----------- 
#
#     Term 15.
#     --------
#
#     U*U -> alpha/alpha.
#     -------------------
#
#     (p,p1) --> (i,i1) 
#     ----------------- 
#
      PARDO i, i1
#
           tpp(i,i1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              REQUEST      VSpipi(i,i1,i2,i3) i 
              GET          Dpq_a(i2,i3)
#
              t1pp(i,i1) = VSpipi(i,i1,i2,i3)*Dpq_a(i2,i3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              REQUEST      VSpipi(i1,i,a3,i2) i  
              GET          Dpq_a(i2,a3)
#
              t1pp(i,i1) = VSpipi(i1,i,a3,i2)*Dpq_a(i2,a3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              REQUEST      VSpipi(i,i1,a2,i3) i 
              GET          Dpq_a(a2,i3)
#
              t1pp(i,i1) = VSpipi(i,i1,a2,i3)*Dpq_a(a2,i3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              REQUEST              Vaaii(a2,a3,i,i1) i # VSpppp(i,i1,a2,a3)
              REQUEST              Viaai(i,a3,a2,i1) i  
              GET                  Dpq_a(a2,a3)
#
              tiiaa(i,i1,a2,a3)  = Vaaii(a2,a3,i,i1) 
              t1iiaa(i,i1,a2,a3) = Viaai(i,a3,a2,i1) 
              tiiaa(i,i1,a2,a3) -= t1iiaa(i,i1,a2,a3)  
#
              t1pp(i,i1)         = tiiaa(i,i1,a2,a3)*Dpq_a(a2,a3)
              tpp(i,i1)         += t1pp(i,i1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              REQUEST      Vpiqj(i,i1,j,j1) i 
              GET          Dpq_b(j,j1)
#
              t1pp(i,i1) = Vpiqj(i,i1,j,j1)*Dpq_b(j,j1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              REQUEST      Vpiqj(i1,i,b1,j) j # Vppqq(i,i1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(i,i1) = Vpiqj(i1,i,b1,j)*Dpq_b(j,b1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              REQUEST      Vpiqj(i,i1,b,j1) b 
              GET          Dpq_b(b,j1)
#
              t1pp(i,i1) = Vpiqj(i,i1,b,j1)*Dpq_b(b,j1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1  
#
              REQUEST      Vbbii(b,b1,i,i1) b # Vppqq(i,i1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(i,i1) = Vbbii(b,b1,i,i1)*Dpq_b(b,b1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(i,i1) = 0.0 
#
           DO i2 
#
              GET           Uxaa(i,i2)
              GET           Uyaa(i1,i2)
#
              t2pp(i,i1)  = Uxaa(i,i2)*Uyaa(i1,i2)
              t1pp(i,i1) += t2pp(i,i1) 
#
           ENDDO i2  
#
           etemp = tpp(i,i1)*t1pp(i,i1) 
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO i, i1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (i,a1) 
#     ----------------- 
#
      PARDO i, a1
#
           tpp(i,a1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              REQUEST      VSpipi(a1,i,i3,i2) i # VSpppp(i,a1,i2,i3)
              GET          Dpq_a(i2,i3)
#
              t1pp(i,a1) = VSpipi(a1,i,i3,i2)*Dpq_a(i2,i3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              REQUEST               Viaai(i,a1,a2,i3) i 
              REQUEST               Vaaii(a2,a1,i,i3) i 
              GET                   Dpq_a(a2,i3)
#
              tiaai(i,a1,a2,i3)   = Viaai(i,a1,a2,i3) 
              t1iaai(i,a1,a2,i3)  = Vaaii(a2,a1,i,i3) 
              tiaai(i,a1,a2,i3)  -= t1iaai(i,a1,a2,i3)  
#
              t1pp(i,a1)          = tiaai(i,a1,a2,i3)*Dpq_a(a2,i3)
              tpp(i,a1)          += t1pp(i,a1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              REQUEST      VSpipi(a1,i,a3,i2) i 
              GET          Dpq_a(i2,a3)
#
              t1pp(i,a1) = VSpipi(a1,i,a3,i2)*Dpq_a(i2,a3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              REQUEST      VSaaai(a3,a2,a1,i) i # (i,a1,a2,a3)
              GET          Dpq_a(a2,a3)
#
              t1pp(i,a1) = VSaaai(a3,a2,a1,i)*Dpq_a(a2,a3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              REQUEST      Vpiqj(a1,i,j1,j) j 
              GET          Dpq_b(j,j1)
#
              t1pp(i,a1) = Vpiqj(a1,i,j1,j)*Dpq_b(j,j1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              REQUEST      Vpiqj(a1,i,b1,j) a1 
              GET          Dpq_b(j,b1)
#
              t1pp(i,a1) = Vpiqj(a1,i,b1,j)*Dpq_b(j,b1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              REQUEST      Viabj(i,a1,b,j1) b 
              GET          Dpq_b(b,j1)
#
              t1pp(i,a1) = Viabj(i,a1,b,j1)*Dpq_b(b,j1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1
#
              REQUEST      Vbbai(b1,b,a1,i) a1 # (i,a1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(i,a1) = Vbbai(b1,b,a1,i)*Dpq_b(b,b1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(a1,i) = 0.0 
#
           DO i1 
#
              GET           Uxaa(i,i1)
              GET           Uyaa(a1,i1)
#
              t2pp(a1,i)  = Uyaa(a1,i1)*Uxaa(i,i1)
              t1pp(a1,i) += t2pp(a1,i) 
#
           ENDDO i1  
#
           etemp   = t1pp(a1,i)*tpp(i,a1)
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO i, a1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (a,i1) 
#     ----------------- 
#
      PARDO a, i1
#
           tpp(a,i1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              REQUEST      VSpipi(a,i1,i2,i3) a 
              GET          Dpq_a(i2,i3)
#
              t1pp(a,i1) = VSpipi(a,i1,i2,i3)*Dpq_a(i2,i3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              REQUEST      VSpipi(a,i1,a2,i3) a 
              GET          Dpq_a(a2,i3)
#
              t1pp(a,i1) = VSpipi(a,i1,a2,i3)*Dpq_a(a2,i3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              REQUEST              Viaai(i1,a,a3,i2) a # VSpppp(a,i1,i2,a3)
              REQUEST              Vaaii(a,a3,i2,i1) a  
              GET                  Dpq_a(i2,a3)
#
              taiia(a,i1,i2,a3)  = Viaai(i1,a,a3,i2) 
              t1aiia(a,i1,i2,a3) = Vaaii(a,a3,i2,i1)
              taiia(a,i1,i2,a3) -= t1aiia(a,i1,i2,a3)  
#             
              t1pp(a,i1)         = taiia(a,i1,i2,a3)*Dpq_a(i2,a3)
              tpp(a,i1)         += t1pp(a,i1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              REQUEST      VSaaai(a2,a3,a,i1) a # (a,i1,a2,a3)
              GET          Dpq_a(a2,a3)
#
              t1pp(a,i1) = VSaaai(a2,a3,a,i1)*Dpq_a(a2,a3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              REQUEST      Vpiqj(a,i1,j,j1) a 
              GET          Dpq_b(j,j1)
#
              t1pp(a,i1) = Vpiqj(a,i1,j,j1)*Dpq_b(j,j1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              REQUEST      Vpiqj(a,i1,b,j1) a 
              GET          Dpq_b(b,j1)
#
              t1pp(a,i1) = Vpiqj(a,i1,b,j1)*Dpq_b(b,j1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              REQUEST      Viabj(i1,a,b1,j) a # Vppqq(a,i1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(a,i1) = Viabj(i1,a,b1,j)*Dpq_b(j,b1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1
#
              REQUEST      Vbbai(b,b1,a,i1) a # (a,i1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(a,i1) = Vbbai(b,b1,a,i1)*Dpq_b(b,b1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(a,i1) = 0.0 
#
           DO i
#
              GET           Uxaa(a,i)
              GET           Uyaa(i1,i)
#
              t2pp(a,i1)  = Uxaa(a,i)*Uyaa(i1,i)
              t1pp(a,i1) += t2pp(a,i1)  
#
           ENDDO i
#
           etemp   = t1pp(a,i1)*tpp(a,i1) 
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO a, i1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (a,a1) 
#     ----------------- 
#
      PARDO a, a1
#
           tpp(a,a1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              REQUEST              Vaaii(a,a1,i2,i3) a # VSpppp(a,a1,i2,i3)
              REQUEST              Viaai(i2,a1,a,i3) a  
              GET                  Dpq_a(i2,i3)
#
              taaii(a,a1,i2,i3)  = Vaaii(a,a1,i2,i3) 
              t1aaii(a,a1,i2,i3) = Viaai(i2,a1,a,i3) 
              taaii(a,a1,i2,i3) -= t1aaii(a,a1,i2,i3) 
# 
              t1pp(a,a1)         = taaii(a,a1,i2,i3)*Dpq_a(i2,i3)
              tpp(a,a1)         += t1pp(a,a1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              REQUEST      VSaaai(a,a1,a2,i3) a 
              GET          Dpq_a(a2,i3)
#
              t1pp(a,a1) = VSaaai(a,a1,a2,i3)*Dpq_a(a2,i3)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              REQUEST      VSaaai(a1,a,a3,i2) a # (a,a1,i2,a3)
              GET          Dpq_a(i2,a3)
#
              t1pp(a,a1) = VSaaai(a1,a,a3,i2)*Dpq_a(i2,a3)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
          #DO a2
          #DO a3
#
          #   REQUEST      VSaaaa(a,a1,a2,a3) a 
          #   GET          Dpq_a(a2,a3)
#
          #   t1pp(a,a1) = VSaaaa(a,a1,a2,a3)*Dpq_a(a2,a3)
          #   tpp(a,a1) += t1pp(a,a1)
#
          #ENDDO a3
          #ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              REQUEST      Vaajj(a,a1,j,j1) a 
              GET          Dpq_b(j,j1)
#
              t1pp(a,a1) = Vaajj(a,a1,j,j1)*Dpq_b(j,j1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              REQUEST      Vaabj(a,a1,b,j1) a 
              GET          Dpq_b(b,j1)
#
              t1pp(a,a1) = Vaabj(a,a1,b,j1)*Dpq_b(b,j1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              REQUESt      Vaabj(a1,a,b1,j) a # (a,a1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(a,a1) = Vaabj(a1,a,b1,j)*Dpq_b(j,b1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
          #DO b
          #DO b1  
#
          #   REQUEST      Vaabb(a,a1,b,b1) a 
          #   GET          Dpq_b(b,b1)
#
          #   t1pp(a,a1) = Vaabb(a,a1,b,b1)*Dpq_b(b,b1)
          #   tpp(a,a1) += t1pp(a,a1)
#
          #ENDDO b1
          #ENDDO b
#
           t1pp(a,a1) = 0.0 
#
           DO i
#
              GET           Uxaa(a,i)
              GET           Uyaa(a1,i)
#
              t2pp(a,a1)  = Uxaa(a,i)*Uyaa(a1,i)
              t1pp(a,a1) += t2pp(a,a1)  
#
           ENDDO i
# 
           etemp   = tpp(a,a1)*t1pp(a,a1)  
           hessxy += etemp
#
      ENDPARDO a, a1
#
#     U*U -> beta/beta.
#     -------------------
#
#     (q,q1) --> (j,j1) 
#     ----------------- 
#
      PARDO j, j1
#
           tqq(j,j1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              REQUEST      VSqjqj(j,j1,j2,j3) j 
              GET          Dpq_b(j2,j3)
#
              t1qq(j,j1) = VSqjqj(j,j1,j2,j3)*Dpq_b(j2,j3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              REQUEST      VSqjqj(j1,j,b3,j2) j # VSqqqq(j,j1,j2,b3)
              GET          Dpq_b(j2,b3)
#
              t1qq(j,j1) = VSqjqj(j1,j,b3,j2)*Dpq_b(j2,b3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              REQUEST      VSqjqj(j,j1,b2,j3) j 
              GET          Dpq_b(b2,j3)
#
              t1qq(j,j1) = VSqjqj(j,j1,b2,j3)*Dpq_b(b2,j3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              REQUEST              Vbbjj(b2,b3,j,j1) j # VSqqqq(j,j1,b2,b3)
              REQUEST              Vjbbj(j,b3,b2,j1) j  
              GET                  Dpq_b(b2,b3)
#
              tjjbb(j,j1,b2,b3)  = Vbbjj(b2,b3,j,j1) 
              t1jjbb(j,j1,b2,b3) = Vjbbj(j,b3,b2,j1) 
              tjjbb(j,j1,b2,b3) -= t1jjbb(j,j1,b2,b3)  
#
              t1qq(j,j1)         = tjjbb(j,j1,b2,b3)*Dpq_b(b2,b3)
              tqq(j,j1)         += t1qq(j,j1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              REQUEST      Vpiqj(i,i1,j,j1) i 
              GET          Dpq_a(i,i1)
#
              t1qq(j,j1) = Vpiqj(i,i1,j,j1)*Dpq_a(i,i1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              REQUEST      Vpiqj(a1,i,j1,j) i # Vppqq(j,j1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(j,j1) = Vpiqj(a1,i,j1,j)*Dpq_a(i,a1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              REQUEST      Vpiqj(a,i1,j,j1) a 
              GET          Dpq_a(a,i1)
#
              t1qq(j,j1) = Vpiqj(a,i1,j,j1)*Dpq_a(a,i1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1  
#
              REQUEST      Vaajj(a,a1,j,j1) a # Vppqq(j,j1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(j,j1) = Vaajj(a,a1,j,j1)*Dpq_a(a,a1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO a1
           ENDDO a
#
           t1qq(j,j1) = 0.0 
#
           DO j2 
#
              GET           Uxbb(j,j2)
              GET           Uybb(j1,j2)
#
              t2qq(j,j1)  = Uxbb(j,j2)*Uybb(j1,j2)
              t1qq(j,j1) += t2qq(j,j1)  
#
           ENDDO j2  
#
           etemp   = tqq(j,j1)*t1qq(j,j1)
           hessxy += etemp
#
      ENDPARDO j, j1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (j,b1) 
#     ----------------- 
#
      PARDO j, b1
#
           tqq(j,b1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              REQUEST      VSqjqj(b1,j,j3,j2) j # VSqqqq(j,b1,j2,j3)
              GET          Dpq_b(j2,j3)
#
              t1qq(j,b1) = VSqjqj(b1,j,j3,j2)*Dpq_b(j2,j3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              REQUEST              Vjbbj(j,b1,b2,j3) j 
              REQUEST              Vbbjj(b2,b1,j,j3) b1 
              GET                  Dpq_b(b2,j3)
#
              tjbbj(j,b1,b2,j3)  = Vjbbj(j,b1,b2,j3) 
              t1jbbj(j,b1,b2,j3) = Vbbjj(b2,b1,j,j3) 
              tjbbj(j,b1,b2,j3) -= t1jbbj(j,b1,b2,j3)  
#
              t1qq(j,b1)         = tjbbj(j,b1,b2,j3)*Dpq_b(b2,j3)
              tqq(j,b1)         += t1qq(j,b1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              REQUEST      VSqjqj(b1,j,b3,j2) j 
              GET          Dpq_b(j2,b3)
#
              t1qq(j,b1) = VSqjqj(b1,j,b3,j2)*Dpq_b(j2,b3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              REQUEST      VSbbbj(b3,b2,b1,j) j # (j,b1,b2,b3)
              GET          Dpq_b(b2,b3)
#
              t1qq(j,b1) = VSbbbj(b3,b2,b1,j)*Dpq_b(b2,b3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              REQUEST      Vpiqj(i1,i,b1,j) j 
              GET          Dpq_a(i,i1)
#
              t1qq(j,b1) = Vpiqj(i1,i,b1,j)*Dpq_a(i,i1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              REQUEST      Vpiqj(a1,i,b1,j) a1 
              GET          Dpq_a(i,a1)
#
              t1qq(j,b1) = Vpiqj(a1,i,b1,j)*Dpq_a(i,a1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              REQUEST      Viabj(i1,a,b1,j) a # (j,b1,a,i1)
              GET          Dpq_a(a,i1)
#
              t1qq(j,b1) = Viabj(i1,a,b1,j)*Dpq_a(a,i1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1
#
              REQUEST      Vaabj(a1,a,b1,j) a # (j,b1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(j,b1) = Vaabj(a1,a,b1,j)*Dpq_a(a,a1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO a1
           ENDDO a
#
           DO j1 
#
              GET           Uxbb(j,j1)
              GET           Uybb(b1,j1)
#
              t1qq(b1,j1) = tqq(j,b1)*Uxbb(j,j1)
              etemp       = t1qq(b1,j1)*Uybb(b1,j1)
              hessxy     += etemp
#
           ENDDO j1  
#
      ENDPARDO j, b1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (b,j1) 
#     ----------------- 
#
      PARDO b, j1
#
           tqq(b,j1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              REQUEST      VSqjqj(b,j1,j2,j3) b 
              GET          Dpq_b(j2,j3)
#
              t1qq(b,j1) = VSqjqj(b,j1,j2,j3)*Dpq_b(j2,j3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              REQUEST      VSqjqj(b,j1,b2,j3) b 
              GET          Dpq_b(b2,j3)
#
              t1qq(b,j1) = VSqjqj(b,j1,b2,j3)*Dpq_b(b2,j3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              REQUEST              Vjbbj(j1,b,b3,j2) b # VSqqqq(b,j1,j2,b3)
              REQUEST              Vbbjj(b,b3,j2,j1) b  
              GET                  Dpq_b(j2,b3)
#
              tbjjb(b,j1,j2,b3)  = Vjbbj(j1,b,b3,j2) 
              t1bjjb(b,j1,j2,b3) = Vbbjj(b,b3,j2,j1)
              tbjjb(b,j1,j2,b3) -= t1bjjb(b,j1,j2,b3)  
#              
              t1qq(b,j1)         = tbjjb(b,j1,j2,b3)*Dpq_b(j2,b3)
              tqq(b,j1)         += t1qq(b,j1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              REQUEST      VSbbbj(b2,b3,b,j1) b # (b,j1,b2,b3)
              GET          Dpq_b(b2,b3)
#
              t1qq(b,j1) = VSbbbj(b2,b3,b,j1)*Dpq_b(b2,b3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              REQUEST      Vpiqj(i,i1,b,j1) b 
              GET          Dpq_a(i,i1)
#
              t1qq(b,j1) = Vpiqj(i,i1,b,j1)*Dpq_a(i,i1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              REQUEST      Vpiqj(a,i1,b,j1) a 
              GET          Dpq_a(a,i1)
#
              t1qq(b,j1) = Vpiqj(a,i1,b,j1)*Dpq_a(a,i1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              REQUEST      Viabj(i,a1,b,j1) b # Vppqq(b,j1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(b,j1) = Viabj(i,a1,b,j1)*Dpq_a(i,a1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1
#
              REQUEST      Vaabj(a,a1,b,j1) a # (b,j1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(b,j1) = Vaabj(a,a1,b,j1)*Dpq_a(a,a1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO a1
           ENDDO a
#
           DO j
#
              GET          Uxbb(b,j)
              GET          Uybb(j1,j)
#
              t1qq(j1,j) = tqq(b,j1)*Uxbb(b,j)
              etemp      = t1qq(j1,j)*Uybb(j1,j)
              hessxy    += etemp
#
           ENDDO j
#
      ENDPARDO b, j1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (b,b1) 
#     ----------------- 
#
      PARDO b, b1
#
           tqq(b,b1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              REQUEST              Vbbjj(b,b1,j2,j3) b # VSqqqq(b,b1,j2,j3)
              REQUEST              Vjbbj(j2,b1,b,j3) b  
              GET                  Dpq_b(j2,j3)
#
              tbbjj(b,b1,j2,j3)  = Vbbjj(b,b1,j2,j3) 
              t1bbjj(b,b1,j2,j3) = Vjbbj(j2,b1,b,j3) 
              tbbjj(b,b1,j2,j3) -= t1bbjj(b,b1,j2,j3) 
# 
              t1qq(b,b1)         = tbbjj(b,b1,j2,j3)*Dpq_b(j2,j3)
              tqq(b,b1)         += t1qq(b,b1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              REQUEST      VSbbbj(b,b1,b2,j3) b 
              GET          Dpq_b(b2,j3)
#
              t1qq(b,b1) = VSbbbj(b,b1,b2,j3)*Dpq_b(b2,j3)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              REQUEST      VSbbbj(b1,b,b3,j2) b # (b,b1,j2,b3)
              GET          Dpq_b(j2,b3)
#
              t1qq(b,b1) = VSbbbj(b1,b,b3,j2)*Dpq_b(j2,b3)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
          #DO b2
          #DO b3
#
          #   REQUEST      VSbbbb(b,b1,b2,b3) b 
          #   GET          Dpq_b(b2,b3)
#
          #   t1qq(b,b1) = VSbbbb(b,b1,b2,b3)*Dpq_b(b2,b3)
          #   tqq(b,b1) += t1qq(b,b1)
#
          #ENDDO b3
          #ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              REQUEST      Vbbii(b,b1,i,i1) b 
              GET          Dpq_a(i,i1)
#
              t1qq(b,b1) = Vbbii(b,b1,i,i1)*Dpq_a(i,i1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              REQUEST      Vbbai(b,b1,a,i1) a 
              GET          Dpq_a(a,i1)
#
              t1qq(b,b1) = Vbbai(b,b1,a,i1)*Dpq_a(a,i1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              REQUEST      Vbbai(b1,b,a1,i) b # (b,b1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(b,b1) = Vbbai(b1,b,a1,i)*Dpq_a(i,a1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
          #DO a
          #DO a1  
#
          #   REQUEST      Vaabb(a,a1,b,b1) a 
          #   GET          Dpq_a(a,a1)
#
          #   t1qq(b,b1) = Vaabb(a,a1,b,b1)*Dpq_a(a,a1)
          #   tqq(b,b1) += t1qq(b,b1)
#
          #ENDDO a1
          #ENDDO a
#
           DO j
#
              GET          Uxbb(b,j)
              GET          Uybb(b1,j)
#
              t1qq(b1,j) = tqq(b,b1)*Uxbb(b,j)
              etemp      = t1qq(b1,j)*Uybb(b1,j)
              hessxy    += etemp
#
           ENDDO j
#
      ENDPARDO b, b1
#
# ---------------------------------------------------------------------------
#
      ENDPROC TERM15   
#     --------------  
#
# ---------------------------------------------------------------------------
#
#
# ----------------------------------------------------------------------
#
      PROC T2PERVPERT
#     ---------------
#
#     Alpha/alpha contribution first.
#     -------------------------------
#
      PARDO a, a1, i, i1
#
            REQUEST                  VXSFullaa(a,i,a1,i1) a 
            REQUEST                  T2yFullaa(a,i,a1,i1) a 
#
            etemp                  = VXSFullaa(a,i,a1,i1)*T2yFullaa(a,i,a1,i1)
            etemp                 *= 0.25
            hessxy                += etemp
#
      ENDPARDO a, a1, i, i1
#
#     Beta/beta contribution.
#     -----------------------
#
      PARDO b, b1, j, j1
#
            REQUEST                  VXSFullbb(b,j,b1,j1) b 
            REQUEST                  T2yFullbb(b,j,b1,j1) b 
#
            etemp                  = VXSFullbb(b,j,b1,j1)*T2yFullbb(b,j,b1,j1)
            etemp                 *= 0.25
            hessxy                += etemp
#
      ENDPARDO b, b1, j, j1
#
#     Alpha/beta contribution.
#     ------------------------
#
      PARDO a, b, i, j
#
            REQUEST                  VXFullab(a,i,b,j)  a
            REQUEST                  T2yFullab(a,i,b,j) a 
#
            etemp                  = VXFullab(a,i,b,j)*T2yFullab(a,i,b,j)
            hessxy                += etemp
#
      ENDPARDO a, b, i, j
#
      ENDPROC T2PERVPERT
#     ------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------- 
#
      PROC TERM16 
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i 
#
            allocate Laiai(a,i,a1,*) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a1,a3) = 0.0 
#
              #DO a2  
#
              #   REQUEST             VSaaaa(a,a2,a1,a3) a  
              #   GET                 Uxaa(a2,i) 
#
              #   t1pppp(a,i,a1,a3) = VSaaaa(a,a2,a1,a3)*Uxaa(a2,i) 
              #   tpppp(a,i,a1,a3) += t1pppp(a,i,a1,a3)  
#
              #ENDDO a2 
#
               DO i1 
#
                  GET                 Uyaa(a3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,a3)*Uyaa(a3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO a3 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,a1,i3) = 0.0 
#
               DO a2  
#
                  REQUEST             VSaaai(a,a2,a1,i3) a  
                  GET                 Uxaa(a2,i) 
#
                  t1pppp(a,i,a1,i3) = VSaaai(a,a2,a1,i3)*Uxaa(a2,i) 
                  tpppp(a,i,a1,i3) += t1pppp(a,i,a1,i3)  
#
               ENDDO a2 
#
               DO i1 
#
                  GET                 Uyaa(i3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,i3)*Uyaa(i3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO i3 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a1,a3) = 0.0 
#
               DO i2  
#
                  REQUEST             VSaaai(a1,a3,a,i2) a  
                  GET                 Uxaa(i2,i) 
#
                  t1pppp(a,i,a1,a3) = VSaaai(a1,a3,a,i2)*Uxaa(i2,i) 
                  tpppp(a,i,a1,a3) += t1pppp(a,i,a1,a3)  
#
               ENDDO i2 
#
               DO i1 
#
                  GET                 Uyaa(a3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,a3)*Uyaa(a3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO a3 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,a1,i3) = 0.0 
#
               DO i2  
#
                  REQUEST             VSpipi(a,i2,a1,i3) a  
                  GET                 Uxaa(i2,i) 
#
                  t1pppp(a,i,a1,i3) = VSpipi(a,i2,a1,i3)*Uxaa(i2,i) 
                  tpppp(a,i,a1,i3) += t1pppp(a,i,a1,i3)  
#
               ENDDO i2 
#
               DO i1 
#
                  GET                 Uyaa(i3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,i3)*Uyaa(i3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO i3 
#
            DO i1 
#
               REQUEST   T1aiai_aa(a,i,a1,i1) a  
               etemp   = T1aiai_aa(a,i,a1,i1) *Laiai(a,i,a1,i1) 
               etemp  *= 0.5  
               hessxy += etemp 
#
            ENDDO i1 
#
            deallocate Laiai(a,i,a1,*) 
#
      ENDPARDO a, a1, i 
#
#     End contributions from Taiai. 
#     ----------------------------- 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j 
#
            allocate Lbjbj(b,j,b1,*) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b1,b3) = 0.0 
#
              #DO b2  
#
              #   REQUEST             VSbbbb(b,b2,b1,b3) b  
              #   GET                 Uxbb(b2,j) 
#
              #   t1qqqq(b,j,b1,b3) = VSbbbb(b,b2,b1,b3)*Uxbb(b2,j) 
              #   tqqqq(b,j,b1,b3) += t1qqqq(b,j,b1,b3)  
#
              #ENDDO b2 
#
               DO j1 
#
                  GET                 Uybb(b3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,b3)*Uybb(b3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO b3 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,b1,j3) = 0.0 
#
               DO b2  
#
                  REQUEST             VSbbbj(b,b2,b1,j3) b  
                  GET                 Uxbb(b2,j) 
#
                  t1qqqq(b,j,b1,j3) = VSbbbj(b,b2,b1,j3)*Uxbb(b2,j) 
                  tqqqq(b,j,b1,j3) += t1qqqq(b,j,b1,j3)  
#
               ENDDO b2 
#
               DO j1 
#
                  GET                 Uybb(j3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,j3)*Uybb(j3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO j3 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b1,b3) = 0.0 
#
               DO j2  
#
                  REQUEST             VSbbbj(b1,b3,b,j2) b  
                  GET                 Uxbb(j2,j) 
#
                  t1qqqq(b,j,b1,b3) = VSbbbj(b1,b3,b,j2)*Uxbb(j2,j) 
                  tqqqq(b,j,b1,b3) += t1qqqq(b,j,b1,b3)  
#
               ENDDO j2 
#
               DO j1 
#
                  GET                 Uybb(b3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,b3)*Uybb(b3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO b3 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,b1,j3) = 0.0 
#
               DO j2  
#
                  REQUEST             VSqjqj(b,j2,b1,j3) b  
                  GET                 Uxbb(j2,j) 
#
                  t1qqqq(b,j,b1,j3) = VSqjqj(b,j2,b1,j3)*Uxbb(j2,j) 
                  tqqqq(b,j,b1,j3) += t1qqqq(b,j,b1,j3)  
#
               ENDDO j2 
#
               DO j1 
#
                  GET                 Uybb(j3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,j3)*Uybb(j3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO j3 
#
            DO j1 
#
               REQUEST       T1bjbj_bb(b,j,b1,j1) b  
               etemp   = T1bjbj_bb(b,j,b1,j1) *Lbjbj(b,j,b1,j1) 
               etemp  *=0.5  
               hessxy += etemp 
#
            ENDDO j1 
#
            deallocate Lbjbj(b,j,b1,*) 
#
      ENDPARDO b, b1, j 
#
#     End contributions from Tbjbj. 
#     ----------------------------- 
#
#     Contributions from Taibj. 
#     ------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0   
#
              #DO a1 
#
              #   REQUEST            Vaabb(a,a1,b,b1) a  
              #   GET                Uxaa(a1,i) 
#
              #   t1ppqq(a,i,b,b1) = Vaabb(a,a1,b,b1)*Uxaa(a1,i) 
              #   tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#
              #ENDDO a1 
#
               DO j 
#
                  GET               Uybb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uybb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0   
#
               DO i1 
# 
                  REQUEST            Vbbai(b,b1,a,i1) a  
                  GET                Uxaa(i1,i) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a,i1)*Uxaa(i1,i) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uybb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uybb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0   
#
               DO a1 
# 
                  REQUEST            Vaabj(a,a1,b,j1) a  
                  GET                Uxaa(a1,i) 
#
                  t1ppqq(a,i,b,j1) = Vaabj(a,a1,b,j1)*Uxaa(a1,i) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uybb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uybb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0   
#
               DO i1 
# 
                  REQUEST            Vpiqj(a,i1,b,j1) a  
                  GET                Uxaa(i1,i) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i1,b,j1)*Uxaa(i1,i) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uybb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uybb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
               etemp  *=2.0 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
      ENDPROC TERM16 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
# Note the since term17 and term 18 are equivalent up to a permutation 
# which is included later all contributions are multiplied by 2. 
#
      PROC TERM17 
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i1 
#
            allocate Laiai(a,*,a1,i1) 
#
#           (p,q) --> a2,a3 
#           --------------- 
#
            DO a2  
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO a3 
#
                  REQUEST              VSaaai(a3,a2,a1,i1) a1  
                  GET                  Uyaa(a3,a)  
#
                  t1pppp(a,a2,a1,i1) = VSaaai(a3,a2,a1,i1)*Uyaa(a3,a) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> i2,a3 
#           --------------- 
#
            DO i2  
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO a3 
#
                  REQUEST              VSpipi(a3,i2,a1,i1) a3  
                  GET                  Uyaa(a3,a)  
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a3,i2,a1,i1)*Uyaa(a3,a) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
#           (p,q) --> a2,i3 
#           --------------- 
#
            DO a2  
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO i3 
#
#                 GET                   VSpppp(i3,a2,a1,i1) 
#
                  REQUEST               Viaai(i3,a2,a1,i1) a1  
                  REQUEST               Vaaii(a1,a2,i3,i1) a1  
                  t2pppp(i3,a2,a1,i1) = Viaai(i3,a2,a1,i1)
                  t3pppp(i3,a2,a1,i1) = Vaaii(a1,a2,i3,i1) 
                  t2pppp(i3,a2,a1,i1)-= t3pppp(i3,a2,a1,i1)  
#
                  GET                   Uyaa(i3,a)  
#
                  t1pppp(a,a2,a1,i1)  = t2pppp(i3,a2,a1,i1)*Uyaa(i3,a) 
                  tpppp(a,a2,a1,i1)  += t1pppp(a,a2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> i2,i3 
#           --------------- 
#
            DO i2  
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO i3 
#
                  REQUEST              VSpipi(i3,i2,a1,i1) a1  
                  GET                  Uyaa(i3,a)  
#
                  t1pppp(a,i2,a1,i1) = VSpipi(i3,i2,a1,i1)*Uyaa(i3,a) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
            DO i 
#
               REQUEST       T1aiai_aa(a,i,a1,i1) a  
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laiai(a,*,a1,i1) 
#
      ENDPARDO a, a1, i1 
#
#     Done contributions from Taiai. 
#     ------------------------------ 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j1 
#
            allocate Lbjbj(b,*,b1,j1) 
#
#           (p,q) --> b2,b3 
#           --------------- 
#
            DO b2  
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO b3 
#
                  REQUEST              VSbbbj(b3,b2,b1,j1) b1  
                  GET                  Uybb(b3,b)  
#
                  t1qqqq(b,b2,b1,j1) = VSbbbj(b3,b2,b1,j1)*Uybb(b3,b) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> j2,b3 
#           --------------- 
#
            DO j2  
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO b3 
#
                  REQUEST              VSqjqj(b3,j2,b1,j1) b1  
                  GET                  Uybb(b3,b)  
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b3,j2,b1,j1)*Uybb(b3,b) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
#           (p,q) --> b2,j3 
#           --------------- 
#
            DO b2  
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO j3 
#
#                 GET                   VSqqqq(j3,b2,b1,j1) 
#
                  REQUEST               Vjbbj(j3,b2,b1,j1) b1  
                  REQUEST               Vbbjj(b1,b2,j3,j1) b1  
                  t2qqqq(j3,b2,b1,j1) = Vjbbj(j3,b2,b1,j1)
                  t3qqqq(j3,b2,b1,j1) = Vbbjj(b1,b2,j3,j1) 
                  t2qqqq(j3,b2,b1,j1)-= t3qqqq(j3,b2,b1,j1)  
#
                  GET                   Uybb(j3,b)  
#
                  t1qqqq(b,b2,b1,j1) = t2qqqq(j3,b2,b1,j1)*Uybb(j3,b) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> j2,j3 
#           --------------- 
#
            DO j2  
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO j3 
#
                  REQUEST              VSqjqj(j3,j2,b1,j1) b1  
                  GET                  Uybb(j3,b)  
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(j3,j2,b1,j1)*Uybb(j3,b) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
            DO j 
#
               REQUEST       T1bjbj_bb(b,j,b1,j1) b  
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Lbjbj(b,*,b1,j1) 
#
      ENDPARDO b, b1, j1 
#
#     Done contributions from Tbjbj. 
#     ------------------------------ 
#
#     Contributions from Taibj/Uxaa*Uyaa. 
#     ----------------------------------- 
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,a2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO a2 
#
                  REQUEST            Vaabj(a2,a1,b,j) b  
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a2,a1,b,j)*Uyaa(a2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,a2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO a2 
#
                  REQUEST            Vpiqj(a2,i1,b,j) a2  
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a2,i1,b,j)*Uyaa(a2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,i2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO i2 
#
                  REQUEST            Viabj(i2,a1,b,j) b  
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,a1,b,j) = Viabj(i2,a1,b,j)*Uyaa(i2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,i2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO i2 
#
                  REQUEST            Vpiqj(i2,i1,b,j) b  
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(i2,i1,b,j)*Uyaa(i2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
#     Contributions from Taibj/Uxbb*Uybb. 
#     ----------------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,b2) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#
               DO b2 
#
                  REQUEST            Vbbai(b2,b1,a,i) a  
                  GET                Uybb(b2,b) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b2,b1,a,i)*Uybb(b2,b) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO b2 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,b2) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#
               DO b2 
#
                  REQUEST            Vpiqj(a,i,b2,j1) a  
                  GET                Uybb(b2,b) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i,b2,j1)*Uybb(b2,b) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO b2 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (b1,j2) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#
               DO j2 
#
                  REQUEST            Viabj(i,a,b1,j2) a #j2,b1,a,i) 
                  GET                Uybb(j2,b) 
#
                  t1ppqq(a,i,b,b1) = Viabj(i,a,b1,j2)*Uybb(j2,b) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO j2 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,j2) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#
               DO j2 
#
                  REQUEST            Vpiqj(a,i,j2,j1) a  
                  GET                Uybb(j2,b) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i,j2,j1)*Uybb(j2,b) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO j2 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Contribution from Taibj/Uxii*Uyaa
#     --------------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,a1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#    
               DO a1 
#
                  REQUEST            Vbbai(b,b1,a1,i) b  
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a1,i)*Uyaa(a1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#    
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (b1,i1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#    
               DO i1 
#
                  REQUEST            Vbbii(b,b1,i1,i) b  
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbii(b,b1,i1,i)*Uyaa(i1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#    
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,a1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#    
               DO a1 
#
                  REQUEST            Vpiqj(a1,i,b,j1) b  
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a1,i,b,j1)*Uyaa(a1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#    
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (j1,i1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#    
               DO i1 
#
                  REQUEST            Vpiqj(i1,i,b,j1) b  
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(i1,i,b,j1)*Uyaa(i1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#    
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Contribution from Taibj/Uyii*Uxaa
#     --------------------------------- 
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,b1)  
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vaabj(a,a1,b1,j) a  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a,a1,b1,j)*Uybb(b1,b)  
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO b1 
#
               DO i 
#
                  GET Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1)  
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vpiqj(a,i1,b1,j) a  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,b1,j)*Uybb(b1,b)  
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1)  
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vaajj(a,a1,j1,j) a  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaajj(a,a1,j1,j)*Uybb(j1,b)  
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1)  
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vpiqj(a,i1,j1,j) a  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,j1,j)*Uybb(j1,b)  
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC TERM17 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM18
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i1 
#
            allocate Laiai(a,*,a1,i1) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a2 
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO a3 
#
                  REQUEST              VSaaai(a,a2,a3,i1) a  
                  GET                  Uyaa(a3,a1) 
#
                  t1pppp(a,a2,a1,i1) = VSaaai(a,a2,a3,i1)*Uyaa(a3,a1) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO i2 
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO a3 
#
                  REQUEST              VSpipi(a,i2,a3,i1) a  
                  GET                  Uyaa(a3,a1) 
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a,i2,a3,i1)*Uyaa(a3,a1) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO a2 
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO i3 
#
#                 GET                  VSpppp(a,a2,i3,i1) 
#
                  REQUEST              Vaaii(a,a2,i3,i1) a  
                  REQUEST              Viaai(i3,a2,a,i1) a  
                  t2pppp(a,a2,i3,i1) = Vaaii(a,a2,i3,i1) 
                  t3pppp(a,a2,i3,i1) = Viaai(i3,a2,a,i1) 
                  t2pppp(a,a2,i3,i1)-= t3pppp(a,a2,i3,i1)  
#
                  GET                  Uyaa(i3,a1) 
#
                  t1pppp(a,a2,a1,i1) = t2pppp(a,a2,i3,i1)*Uyaa(i3,a1) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i2 
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO i3 
#
                  REQUEST              VSpipi(a,i2,i3,i1) a  
                  GET                  Uyaa(i3,a1) 
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a,i2,i3,i1)*Uyaa(i3,a1) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
            DO i 
#
               REQUEST       T1aiai_aa(a,i,a1,i1) a  
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO i 
#
            deallocate Laiai(a,*,a1,i1) 
#
      ENDPARDO a, a1, i1 
#
#     Done contributions from Taiai. 
#     ------------------------------ 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j1 
#
            allocate Lbjbj(b,*,b1,j1) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b2 
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO b3 
#
                  REQUEST              VSbbbj(b,b2,b3,j1) b  
                  GET                  Uybb(b3,b1) 
#
                  t1qqqq(b,b2,b1,j1) = VSbbbj(b,b2,b3,j1)*Uybb(b3,b1) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO j2 
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO b3 
#
                  REQUEST              VSqjqj(b,j2,b3,j1) b  
                  GET                  Uybb(b3,b1) 
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b,j2,b3,j1)*Uybb(b3,b1) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO b2 
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO j3 
#
#                 GET                  VSqqqq(b,b2,j3,j1) 
#
                  REQUEST              Vbbjj(b,b2,j3,j1) b  
                  REQUEST              Vjbbj(j3,b2,b,j1) b  
                  t2qqqq(b,b2,j3,j1) = Vbbjj(b,b2,j3,j1) 
                  t3qqqq(b,b2,j3,j1) = Vjbbj(j3,b2,b,j1) 
                  t2qqqq(b,b2,j3,j1)-= t3qqqq(b,b2,j3,j1)  
#
                  GET                  Uybb(j3,b1) 
#
                  t1qqqq(b,b2,b1,j1) = t2qqqq(b,b2,j3,j1)*Uybb(j3,b1) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j2 
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO j3 
#
                  REQUEST              VSqjqj(b,j2,j3,j1) b  
                  GET                  Uybb(j3,b1) 
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b,j2,j3,j1)*Uybb(j3,b1) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
            DO j 
#
               REQUEST       T1bjbj_bb(b,j,b1,j1) b  
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO j 
#
            deallocate Lbjbj(b,*,b1,j1) 
#
      ENDPARDO b, b1, j1 
#
#     Done contributions from Tbjbj. 
#     ------------------------------ 
#
#     Contributions from Taibj: Part1. 
#     --------------------------------  
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vaabj(a,a1,b1,j) a  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a,a1,b1,j)*Uybb(b1,b) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vpiqj(a,i1,b1,j) a  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,b1,j)*Uybb(b1,b) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vaajj(a,a1,j1,j) a  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaajj(a,a1,j1,j)*Uybb(j1,b) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vpiqj(a,i1,j1,j) a  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,j1,j)*Uybb(j1,b) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
#     Done contributions from Taibj: Part1. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part2. 
#     --------------------------------  
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,a1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0  
#
               DO a1 
#
                  REQUEST            Vbbai(b,b1,a1,i) b  
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a1,i)*Uyaa(a1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (b1,i1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0  
#
               DO i1 
#
                  REQUEST            Vbbii(b,b1,i1,i) b  
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbii(b,b1,i1,i)*Uyaa(i1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,a1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0  
#
               DO a1 
#
                  REQUEST            Vpiqj(a1,i,b,j1) b  
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a1,i,b,j1)*Uyaa(a1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (j1,i1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0  
#
               DO i1 
#
                  REQUEST            Vpiqj(i1,i,b,j1) b  
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(i1,i,b,j1)*Uyaa(i1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Done contributions from Taibj: Part2. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part3. 
#     --------------------------------  
#
      PARDO a, b, i 
#
           allocate Laibj(a,i,b,*) 
#
#          (p,q) --> (b1,b2) 
#          ----------------- 
#
           DO b1 
#
              tppqq(a,i,b,b1) = 0.0 
#
              DO b2 
#
                 REQUEST            Vbbai(b2,b1,a,i) a  
                 GET                Uybb(b2,b) 
#
                 t1ppqq(a,i,b,b1) = Vbbai(b2,b1,a,i)*Uybb(b2,b) 
                 tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
              ENDDO b2 
#
              DO j 
#
                 GET               Uxbb(b1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO b1 
#
#          (p,q) --> (j1,b2) 
#          ----------------- 
#
           DO j1 
#
              tppqq(a,i,b,j1) = 0.0 
#
              DO b2 
#
                 REQUEST            Vpiqj(a,i,b2,j1) a  
                 GET                Uybb(b2,b) 
#
                 t1ppqq(a,i,b,j1) = Vpiqj(a,i,b2,j1)*Uybb(b2,b) 
                 tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
              ENDDO b2 
#
              DO j 
#
                 GET               Uxbb(j1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO j1 
#
#          (p,q) --> (b1,j2) 
#          ----------------- 
#
           DO b1 
#
              tppqq(a,i,b,b1) = 0.0 
#
              DO j2 
#
                 REQUEST            Viabj(i,a,b1,j2) a #(a,i,j2,b1) 
                 GET                Uybb(j2,b) 
#
                 t1ppqq(a,i,b,b1) = Viabj(i,a,b1,j2)*Uybb(j2,b) 
                 tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
              ENDDO j2 
#
              DO j 
#
                 GET               Uxbb(b1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO b1 
#
#          (p,q) --> (j1,j2) 
#          ----------------- 
#
           DO j1 
#
              tppqq(a,i,b,j1) = 0.0 
#
              DO j2 
#
                 REQUEST            Vpiqj(a,i,j2,j1) a  
                 GET                Uybb(j2,b) 
#
                 t1ppqq(a,i,b,j1) = Vpiqj(a,i,j2,j1)*Uybb(j2,b) 
                 tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
              ENDDO j2 
#
              DO j 
#
                 GET               Uxbb(j1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO j1 
#
           DO j 
#
              REQUEST       T1aibj_ab(a,i,b,j) a  
              etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
             #etemp  *=0.5
              hessxy += etemp 
#
           ENDDO j 
#
           deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Done contributions from Taibj: Part3. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part4. 
#     --------------------------------  
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,a2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO a2 
#
                  REQUEST            Vaabj(a2,a1,b,j) b  
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a2,a1,b,j)*Uyaa(a2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,a2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO a2 
#
                  REQUEST            Vpiqj(a2,i1,b,j) b  
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a2,i1,b,j)*Uyaa(a2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,i2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO i2 
#
                  REQUEST            Viabj(i2,a1,b,j) b  
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,a1,b,j) = Viabj(i2,a1,b,j)*Uyaa(i2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,i2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO i2 
#
                  REQUEST            Vpiqj(i2,i1,b,j) b  
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(i2,i1,b,j)*Uyaa(i2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j)
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC TERM18
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM21 
#     ----------- 
#
#     Contribution from Taiai. 
#     ------------------------ 
#
      PARDO a, i, i1  
#
            allocate Laiai(a,i,*,i1) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a3,i1) = 0.0 
#
               DO a2 
#
                  REQUEST             VSpipi(a2,i,a3,i1) a2  
                  GET                 Uxaa(a2,a) 
#
                  t1pppp(a,i,a3,i1) = VSpipi(a2,i,a3,i1)*Uxaa(a2,a)  
                  tpppp(a,i,a3,i1) += t1pppp(a,i,a3,i1)
#
               ENDDO a2 
#
               DO a1 
#
                  GET                 Uyaa(a3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a3,i1)*Uyaa(a3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO a3 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a3,i1) = 0.0 
#
               DO i2 
#
                  REQUEST             VSpipi(i2,i,a3,i1) a3  
                  GET                 Uxaa(i2,a) 
#
                  t1pppp(a,i,a3,i1) = VSpipi(i2,i,a3,i1)*Uxaa(i2,a)  
                  tpppp(a,i,a3,i1) += t1pppp(a,i,a3,i1)
#
               ENDDO i2 
#
               DO a1 
#
                  GET                 Uyaa(a3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a3,i1)*Uyaa(a3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO a3 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,i3,i1) = 0.0 
#
               DO a2 
#
                  REQUEST             VSpipi(a2,i,i3,i1) a2  
                  GET                 Uxaa(a2,a) 
#
                  t1pppp(a,i,i3,i1) = VSpipi(a2,i,i3,i1)*Uxaa(a2,a)  
                  tpppp(a,i,i3,i1) += t1pppp(a,i,i3,i1)
#
               ENDDO a2 
#
               DO a1 
#
                  GET                 Uyaa(i3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,i3,i1)*Uyaa(i3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO i3 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,i3,i1) = 0.0 
#
               DO i2 
#
                  REQUEST             VSpipi(i2,i,i3,i1) i  
                  GET                 Uxaa(i2,a) 
#
                  t1pppp(a,i,i3,i1) = VSpipi(i2,i,i3,i1)*Uxaa(i2,a)  
                  tpppp(a,i,i3,i1) += t1pppp(a,i,i3,i1)
#
               ENDDO i2 
#
               DO a1 
#
                  GET                 Uyaa(i3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,i3,i1)*Uyaa(i3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO i3 
#
            DO a1 
#
               REQUEST       T1aiai_aa(a,i,a1,i1) a  
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
               etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO a1 
#
            deallocate Laiai(a,i,*,i1) 
#
      ENDPARDO a, i, i1  
#
#     End contribution from Taiai. 
#     ---------------------------- 
#
#     Contribution from Tbjbj. 
#     ------------------------ 
#
      PARDO b, j, j1  
#
            allocate Lbjbj(b,j,*,j1) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b3,j1) = 0.0 
#
               DO b2 
#
                  REQUEST             VSqjqj(b2,j,b3,j1) b2  
                  GET                 Uxbb(b2,b) 
#
                  t1qqqq(b,j,b3,j1) = VSqjqj(b2,j,b3,j1)*Uxbb(b2,b)  
                  tqqqq(b,j,b3,j1) += t1qqqq(b,j,b3,j1)
#
               ENDDO b2 
#
               DO b1 
#
                  GET                 Uybb(b3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b3,j1)*Uybb(b3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO b3 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b3,j1) = 0.0 
#
               DO j2 
#
                  REQUEST             VSqjqj(j2,j,b3,j1) b3  
                  GET                 Uxbb(j2,b) 
#
                  t1qqqq(b,j,b3,j1) = VSqjqj(j2,j,b3,j1)*Uxbb(j2,b)  
                  tqqqq(b,j,b3,j1) += t1qqqq(b,j,b3,j1)
#
               ENDDO j2 
#
               DO b1 
#
                  GET                 Uybb(b3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b3,j1)*Uybb(b3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO b3 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,j3,j1) = 0.0 
#
               DO b2 
#
                  REQUEST             VSqjqj(b2,j,j3,j1) b2  
                  GET                 Uxbb(b2,b) 
#
                  t1qqqq(b,j,j3,j1) = VSqjqj(b2,j,j3,j1)*Uxbb(b2,b)  
                  tqqqq(b,j,j3,j1) += t1qqqq(b,j,j3,j1)
#
               ENDDO b2 
#
               DO b1 
#
                  GET                 Uybb(j3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,j3,j1)*Uybb(j3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO j3 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,j3,j1) = 0.0 
#
               DO j2 
#
                  REQUEST             VSqjqj(j2,j,j3,j1) j  
                  GET                 Uxbb(j2,b) 
#
                  t1qqqq(b,j,j3,j1) = VSqjqj(j2,j,j3,j1)*Uxbb(j2,b)  
                  tqqqq(b,j,j3,j1) += t1qqqq(b,j,j3,j1)
#
               ENDDO j2 
#
               DO b1 
#
                  GET                 Uybb(j3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,j3,j1)*Uybb(j3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO j3 
#
            DO b1 
#
               REQUEST       T1bjbj_bb(b,j,b1,j1) b  
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
               etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO b1 
#
            deallocate Lbjbj(b,j,*,j1) 
#
      ENDPARDO b, j, j1  
#
#     End contribution from Tbjbj. 
#     ---------------------------- 
#
#     Contribution from Taibj. 
#     ------------------------ 
#
      PARDO b, i, j 
#
            allocate Laibj(*,i,b,j) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a1,i,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vpiqj(a1,i,b1,j) a1  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a1,i,b,j) = Vpiqj(a1,i,b1,j)*Uybb(b1,b) 
                  tppqq(a1,i,b,j) += t1ppqq(a1,i,b,j)  
#
               ENDDO b1 
#
               DO a 
#
                  GET               Uxaa(a1,a) 
                  taibj(a,i,b,j)  = tppqq(a1,i,b,j)*Uxaa(a1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(i1,i,b,j) = 0.0 
#
               DO b1 
#
                  REQUEST            Vpiqj(i1,i,b1,j) j  
                  GET                Uybb(b1,b) 
#
                  t1ppqq(i1,i,b,j) = Vpiqj(i1,i,b1,j)*Uybb(b1,b) 
                  tppqq(i1,i,b,j) += t1ppqq(i1,i,b,j)  
#
               ENDDO b1 
#
               DO a 
#
                  GET               Uxaa(i1,a) 
                  taibj(a,i,b,j)  = tppqq(i1,i,b,j)*Uxaa(i1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a1,i,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vpiqj(a1,i,j1,j) j  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a1,i,b,j) = Vpiqj(a1,i,j1,j)*Uybb(j1,b) 
                  tppqq(a1,i,b,j) += t1ppqq(a1,i,b,j)  
#
               ENDDO j1 
#
               DO a 
#
                  GET               Uxaa(a1,a) 
                  taibj(a,i,b,j)  = tppqq(a1,i,b,j)*Uxaa(a1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(i1,i,b,j) = 0.0 
#
               DO j1 
#
                  REQUEST            Vpiqj(i1,i,j1,j) j  
                  GET                Uybb(j1,b) 
#
                  t1ppqq(i1,i,b,j) = Vpiqj(i1,i,j1,j)*Uybb(j1,b) 
                  tppqq(i1,i,b,j) += t1ppqq(i1,i,b,j)  
#
               ENDDO j1 
#
               DO a 
#
                  GET               Uxaa(i1,a) 
                  taibj(a,i,b,j)  = tppqq(i1,i,b,j)*Uxaa(i1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO i1 
#
            DO a 
#
               REQUEST       T1aibj_ab(a,i,b,j) a  
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
               etemp  *= 2.0 
               hessxy += etemp 
#
            ENDDO a 
#
            deallocate Laibj(*,i,b,j) 
#
      ENDPARDO b, i, j 
#
#     End contribution from Taibj. 
#     ---------------------------- 
#
      ENDPROC TERM21 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC FORM_IPQ
#
      PARDO i, i1
            GET               Iij_a(i,i1)
            PUT Ipq_a(i,i1) = Iij_a(i,i1)
      ENDPARDO i, i1
#
      PARDO a, a1
            GET               Iab_a(a,a1)
            PUT Ipq_a(a,a1) = Iab_a(a,a1)
      ENDPARDO a, a1
#
      PARDO j, j1
            GET               Iij_b(j,j1)
            PUT Ipq_b(j,j1) = Iij_b(j,j1)
      ENDPARDO j, j1
#
      PARDO b, b1
            GET               Iab_b(b,b1)
            PUT Ipq_b(b,b1) = Iab_b(b,b1)
      ENDPARDO b, b1
#
      PARDO a, i
            GET              Iia_a(i,a)
            tai(a,i)       = Iia_a(i,a)
            PUT Ipq_a(i,a) = Iia_a(i,a) 
            PUT Ipq_a(a,i) = tai(a,i)
      ENDPARDO a, i
#
      PARDO b, j
            GET              Iia_b(j,b)
            tbj(b,j)       = Iia_b(j,b)
            PUT Ipq_b(j,b) = Iia_b(j,b)  
            PUT Ipq_b(b,j) = tbj(b,j)
      ENDPARDO b, j
#
      execute sip_barrier
#
      ENDPROC FORM_IPQ
#
# ---------------------------------------------------------------------- 
#
      PROC FORM_DENS 
#
      PARDO i, i1
            GET               Dij_a(i,i1)
            PUT Dpq_a(i,i1) = Dij_a(i,i1)
      ENDPARDO i, i1
#
      PARDO a, a1
            GET               Dab_a(a,a1)
            PUT Dpq_a(a,a1) = Dab_a(a,a1)
      ENDPARDO a, a1
#
      PARDO j, j1
            GET               Dij_b(j,j1)
            PUT Dpq_b(j,j1) = Dij_b(j,j1)
      ENDPARDO j, j1
#
      PARDO b, b1
            GET               Dab_b(b,b1)
            PUT Dpq_b(b,b1) = Dab_b(b,b1)
      ENDPARDO b, b1
#
      PARDO a, i
            GET              Dai_a(a,i)
            tia(i,a)       = Dai_a(a,i) 
            PUT Dpq_a(a,i) = Dai_a(a,i) 
            PUT Dpq_a(i,a) = tia(i,a)
      ENDPARDO a, i
#
      PARDO b, j
            GET              Dai_b(b,j)
            tjb(j,b)       = Dai_b(b,j)
            PUT Dpq_b(b,j) = Dai_b(b,j)  
            PUT Dpq_b(j,b) = tjb(j,b)
      ENDPARDO b, j
#
      execute sip_barrier
#
      ENDPROC FORM_DENS 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC VT_XAI 
#     ----------- 
#
#     The intermediates used to remove the 4-virtual arrays are constructed. 
#
#     Create one-particle intermediates used in this routine and used
#     later in the 'direct' computation. 
#     ----------------------------------------------------------------------- 
#
      create VD_aa
      create VDX_aa
      create VD_bb
      create VDX_bb
      create D_aa 
      create D_bb 
      create VDD_aa  
      create VDD_bb  
      create VXX_aa  
      create VXX_bb  
      execute sip_barrier
#
#     Form backtransformed virtual-virtual block of the density matrix. 
#     ----------------------------------------------------------------- 
#
#     alpha-alpha block. 
#     ------------------ 
#
      PARDO a, a1 
#
           GET Dpq_a(a,a1) 
#
           DO mu 
#
              txp(mu,a1) = Dpq_a(a,a1)*ca(mu,a)  
#
              DO nu 
#
                 txx(mu,nu)       = txp(mu,a1)*ca(nu,a1) 
                 PUT D_aa(mu,nu) += txx(mu,nu)
#
              ENDDO nu 
#
           ENDDO mu 
#
      ENDPARDO a, a1 
#
#     beta-beta block. 
#     ---------------- 
#
      PARDO b, b1 
#
           GET Dpq_b(b,b1) 
#
           DO mu 
#
              txq(mu,b1) = Dpq_b(b,b1)*cb(mu,b)  
#
              DO nu 
#
                 txx(mu,nu)       = txq(mu,b1)*cb(nu,b1) 
                 PUT D_bb(mu,nu) += txx(mu,nu)
#
              ENDDO nu 
#
           ENDDO mu 
#
      ENDPARDO b, b1 
#
#     Form Half back transformed cluster arrays
#     -----------------------------------------
#
      PARDO a1, i1, i
#
           allocate LLaiai(*,i,a1,i1)
#
           DO a
#
              REQUEST              T1aiai_aa(a,i,a1,i1) i1
              REQUEST              T1aiai_aa(a,i1,a1,i) i1
              LLaiai(a,i,a1,i1)  = T1aiai_aa(a,i,a1,i1)
              Taiai(a,i,a1,i1)   = T1aiai_aa(a,i1,a1,i)
              LLaiai(a,i,a1,i1) -= Taiai(a,i,a1,i1)
#
           ENDDO a
#
           DO lambda
#
              Txipi(lambda,i,a1,i1) = 0.0
#
              DO a
#
                 Txiai(lambda,i,a1,i1)   = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Txipi(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1)
#
              ENDDO a
#
              PREPARE T1AO_aa(lambda,i,a1,i1) = Txipi(lambda,i,a1,i1)
#
           ENDDO lambda
#
           deallocate LLaiai(*,i,a1,i1)
#
      ENDPARDO a1, i1, i
#
      PARDO b1, j1, j
#
           allocate LLbjbj(*,j,b1,j1)
#
           DO b
#
              REQUEST              T1bjbj_bb(b,j,b1,j1) j1
              REQUEST              T1bjbj_bb(b,j1,b1,j) j1
              LLbjbj(b,j,b1,j1)  = T1bjbj_bb(b,j,b1,j1)
              Tbjbj(b,j,b1,j1)   = T1bjbj_bb(b,j1,b1,j)
              LLbjbj(b,j,b1,j1) -= Tbjbj(b,j,b1,j1)
#
           ENDDO b
#
           DO lambda
#
              Txjqj(lambda,j,b1,j1) = 0.0
#
              DO b
#
                 Txjbj(lambda,j,b1,j1)   = LLbjbj(b,j,b1,j1)*cb(lambda,b)
                 Txjqj(lambda,j,b1,j1)  += Txjbj(lambda,j,b1,j1)
#
              ENDDO b
#
              PREPARE T1AO_bb(lambda,j,b1,j1) = Txjqj(lambda,j,b1,j1)
#
           ENDDO lambda
#
           deallocate LLbjbj(*,j,b1,j1)
#
      ENDPARDO b1, j1, j
#
      PARDO b, j, i
#
           allocate LLaibj(*,i,b,j)
#
           DO a
#
              REQUEST            T1aibj_ab(a,i,b,j) i
              LLaibj(a,i,b,j)  = T1aibj_ab(a,i,b,j)
#
           ENDDO a
#
           DO lambda
#
              Txiqj(lambda,i,b,j) = 0.0
#
              DO a
#
                 Txibj(lambda,i,b,j)   = LLaibj(a,i,b,j)*ca(lambda,a)
                 Txiqj(lambda,i,b,j)  += Txibj(lambda,i,b,j)
#
              ENDDO a
#
              PREPARE T1AO_ab(lambda,i,b,j) = Txiqj(lambda,i,b,j)
#
           ENDDO lambda
#
           deallocate LLaibj(*,i,b,j)
#
      ENDPARDO b, j, i
#
      execute server_barrier 
#
      PARDO lambda, i, i1
#
           allocate Lxiai(lambda,i,*,i1)
#
           DO a1
#
              REQUEST                 T1AO_aa(lambda,i,a1,i1) i1
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1)
#
           ENDDO a1
#
           DO sigma
#
              Txixi(lambda,i,sigma,i1)  = 0.0
#
              DO a1
#
                 T1xixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 Txixi(lambda,i,sigma,i1)  += T1xixi(lambda,i,sigma,i1)
#
              ENDDO a1
#
              PREPARE TAO_aa(lambda,i,sigma,i1) = Txixi(lambda,i,sigma,i1)
#
           ENDDO sigma
#
           deallocate Lxiai(lambda,i,*,i1)
#
      ENDPARDO lambda, i, i1
#
      PARDO lambda, j, j1
#
           allocate Lxjbj(lambda,j,*,j1)
#
           DO b1
#
              REQUEST                 T1AO_bb(lambda,j,b1,j1) j1
              Lxjbj(lambda,j,b1,j1) = T1AO_bb(lambda,j,b1,j1)
#
           ENDDO b1
#
           DO sigma
#
              Txjxj(lambda,j,sigma,j1)  = 0.0
#
              DO b1
#
                 T1xjxj(lambda,j,sigma,j1) = Lxjbj(lambda,j,b1,j1)*cb(sigma,b1)
                 Txjxj(lambda,j,sigma,j1)  += T1xjxj(lambda,j,sigma,j1)
#
              ENDDO b1
#
              PREPARE TAO_bb(lambda,j,sigma,j1) = Txjxj(lambda,j,sigma,j1)
#
           ENDDO sigma
#
           deallocate Lxjbj(lambda,j,*,j1)
#
      ENDPARDO lambda, j, j1
#
      PARDO lambda, i, j
#
           allocate Lxibj(lambda,i,*,j)
#
           DO b
#
              REQUEST               T1AO_ab(lambda,i,b,j) j
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j)
#
           ENDDO b 
#
           DO sigma
#
              Txixj(lambda,i,sigma,j) = 0.0
#
              DO b
#
                 T1xixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*cb(sigma,b)
                 Txixj(lambda,i,sigma,j) += T1xixj(lambda,i,sigma,j)
#
              ENDDO b
#
              PREPARE TAO_ab(lambda,i,sigma,j) = Txixj(lambda,i,sigma,j)
#
           ENDDO sigma
#
           deallocate Lxibj(lambda,i,*,j)
#
      ENDPARDO lambda, i, j
#
      execute server_barrier
#
#     Contract AOINT with half back transformed Amplitudes
#     ----------------------------------------------------
#
      PARDO mu, nu
#
           allocate L1xixi(mu,*,nu,*)
           allocate L1xjxj(mu,*,nu,*)
           allocate L1xixj(mu,*,nu,*)
#
           DO lambda
           DO sigma
#
              compute_integrals aoint(lambda,mu,sigma,nu)
#
              GET                      D_aa(sigma,nu) 
              GET                      D_aa(mu,sigma) 
              GET                      D_bb(sigma,nu) 
              GET                      D_bb(mu,sigma) 
#
              txx(lambda,mu)         = aoint(lambda,mu,sigma,nu)*D_aa(sigma,nu)  
              PUT VD_aa(lambda,mu)  += txx(lambda,mu) 
#
              txx(lambda,nu)         = aoint(lambda,mu,sigma,nu)*D_aa(mu,sigma) 
              PUT VDX_aa(lambda,nu) += txx(lambda,nu) 
#
              txx(lambda,mu)         = aoint(lambda,mu,sigma,nu)*D_bb(sigma,nu)  
              PUT VD_bb(lambda,mu)  += txx(lambda,mu) 
#
              txx(lambda,nu)         = aoint(lambda,mu,sigma,nu)*D_bb(mu,sigma) 
              PUT VDX_bb(lambda,nu) += txx(lambda,nu) 
#
              DO i
              DO i1
#
                 REQUEST               TAO_aa(lambda,i,sigma,i1) i1
                 Txixi(mu,i,nu,i1)   = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                 L1xixi(mu,i,nu,i1) += Txixi(mu,i,nu,i1)
#
              ENDDO i1
              ENDDO i
#
              DO j
              DO j1
#
                 REQUEST               TAO_bb(lambda,j,sigma,j1) j1
                 Txjxj(mu,j,nu,j1)   = aoint(lambda,mu,sigma,nu)*TAO_bb(lambda,j,sigma,j1)
                 L1xjxj(mu,j,nu,j1) += Txjxj(mu,j,nu,j1)
#
              ENDDO j1
              ENDDO j
#
              DO i
              DO j
#
                 REQUEST              TAO_ab(lambda,i,sigma,j) j
                 Txixj(mu,i,nu,j)   = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
                 L1xixj(mu,i,nu,j) += Txixj(mu,i,nu,j)
#
              ENDDO j
              ENDDO i
#
           ENDDO sigma
           ENDDO lambda
#
           DO i
           DO i1
#
              PREPARE T2AO_aa(mu,i,nu,i1) = L1xixi(mu,i,nu,i1)
#
           ENDDO i1
           ENDDO i
#
           DO j
           DO j1
#
              PREPARE T2AO_bb(mu,j,nu,j1) = L1xjxj(mu,j,nu,j1)
#
           ENDDO j1
           ENDDO j
#
           DO i
           DO j
#
              PREPARE T2AO_ab(mu,i,nu,j) = L1xixj(mu,i,nu,j)
#
           ENDDO j
           ENDDO i
#
           deallocate L1xixi(mu,*,nu,*)
           deallocate L1xjxj(mu,*,nu,*)
           deallocate L1xixj(mu,*,nu,*)
#
      ENDPARDO  mu, nu
      execute sip_barrier 
      execute server_barrier 
#
#     Perform final transformation
#     ----------------------------
#
      PARDO a, a1, i, i1
#
           T1aiai(a,i,a1,i1) = 0.0
#
           DO nu
#
              Taixi(a,i,nu,i1) = 0.0
#
              DO mu
#
                 REQUEST             T2AO_aa(mu,i,nu,i1) i1
                 T1aixi(a,i,nu,i1) = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                 Taixi(a,i,nu,i1) += T1aixi(a,i,nu,i1)
#
              ENDDO mu
#
              T2aiai(a,i,a1,i1)  = Taixi(a,i,nu,i1)*ca(nu,a1)
              T1aiai(a,i,a1,i1) += T2aiai(a,i,a1,i1)
#
           ENDDO nu
#
           PREPARE VT_aa(a,i,a1,i1) = T1aiai(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
           T1bjbj(b,j,b1,j1) = 0.0
#
           DO nu
#
              Tbjxj(b,j,nu,j1) = 0.0
#
              DO mu
#
                 REQUEST             T2AO_bb(mu,j,nu,j1) j1
                 T1bjxj(b,j,nu,j1) = T2AO_bb(mu,j,nu,j1)*cb(mu,b)
                 Tbjxj(b,j,nu,j1) += T1bjxj(b,j,nu,j1)
#
              ENDDO mu
#
              T2bjbj(b,j,b1,j1)  = Tbjxj(b,j,nu,j1)*cb(nu,b1)
              T1bjbj(b,j,b1,j1) += T2bjbj(b,j,b1,j1)
#
           ENDDO nu
#
           PREPARE VT_bb(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO a, b, i, j
#
           T1aibj(a,i,b,j) = 0.0
#
           DO nu
#
              Taixj(a,i,nu,j) = 0.0
#
              DO mu
#
                 REQUEST            T2AO_ab(mu,i,nu,j) j
                 T1aixj(a,i,nu,j) = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 Taixj(a,i,nu,j) += T1aixj(a,i,nu,j)
#
              ENDDO mu
#
              T2aibj(a,i,b,j)  = Taixj(a,i,nu,j)*cb(nu,b)
              T1aibj(a,i,b,j) += T2aibj(a,i,b,j)
#
           ENDDO nu
#
           PREPARE VT_ab(a,i,b,j) = T1aibj(a,i,b,j)
#
      ENDPARDO a, b, i, j
#
      execute server_barrier 
#
      PARDO a, a1 
#
            tpp(a,a1) = 0.0 
#
            DO mu 
#
               txp(mu,a1) = 0.0 
#
               DO nu 
#
                  GET           VD_aa(mu,nu) 
                  GET           VDX_aa(mu,nu) 
                  txx(mu,nu)  = VD_aa(mu,nu) 
                  txx(mu,nu) -= VDX_aa(mu,nu) 
#
                  t1xp(mu,a1) = txx(mu,nu)*ca(nu,a1) 
                  txp(mu,a1) += t1xp(mu,a1) 
#
               ENDDO nu 
#
               t1pp(a,a1) = txp(mu,a1)*ca(mu,a) 
               tpp(a,a1) += t1pp(a,a1) 
#
            ENDDO mu 
#
            PUT VDD_aa(a,a1) = tpp(a,a1) 
#
            tpp(a,a1) = 0.0 
#
            DO mu 
#
               txp(mu,a1) = 0.0 
#
               DO nu 
#
                  GET           VD_bb(mu,nu) 
                  t1xp(mu,a1) = VD_bb(mu,nu)*ca(nu,a1) 
                  txp(mu,a1) += t1xp(mu,a1) 
#
               ENDDO nu 
#
               t1pp(a,a1) = txp(mu,a1)*ca(mu,a) 
               tpp(a,a1) += t1pp(a,a1) 
#
            ENDDO mu 
#
            PUT VXX_aa(a,a1) = tpp(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO b, b1 
#
            tqq(b,b1) = 0.0 
#
            DO mu 
#
               txq(mu,b1) = 0.0 
#
               DO nu 
#
                  GET           VD_bb(mu,nu) 
                  GET           VDX_bb(mu,nu) 
                  txx(mu,nu)  = VD_bb(mu,nu) 
                  txx(mu,nu) -= VDX_bb(mu,nu) 
#
                  t1xq(mu,b1) = txx(mu,nu)*cb(nu,b1) 
                  txq(mu,b1) += t1xq(mu,b1) 
#
               ENDDO nu 
#
               t1qq(b,b1) = txq(mu,b1)*cb(mu,b) 
               tqq(b,b1) += t1qq(b,b1) 
#
            ENDDO mu 
#
            PUT VDD_bb(b,b1) = tqq(b,b1) 
#
            tqq(b,b1) = 0.0 
#
            DO mu 
#
               txq(mu,b1) = 0.0 
#
               DO nu 
#
                  GET           VD_aa(mu,nu) 
                  t1xq(mu,b1) = VD_aa(mu,nu)*cb(nu,b1) 
                  txq(mu,b1) += t1xq(mu,b1) 
#
               ENDDO nu 
#
               t1qq(b,b1) = txq(mu,b1)*cb(mu,b) 
               tqq(b,b1) += t1qq(b,b1) 
#
            ENDDO mu 
#
            PUT VXX_bb(b,b1) = tqq(b,b1) 
#
      ENDPARDO b, b1 
      execute sip_barrier
#
#     Remove one-particle arrays never used again. 
#     -------------------------------------------- 
#
      delete VD_aa
      delete VDX_aa
      delete VD_bb
      delete VDX_bb
      delete D_aa 
      delete D_bb 
#
      ENDPROC VT_XAI 
#     -------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC T15_16_DIRECT 
#     ------------------ 
#
# Compute the 'direct' terms from V^{ab}_{cd}.
# -------------------------------------------- 
#
      PARDO a, a1 
#
            GET         VDD_aa(a,a1) 
            GET         VXX_aa(a,a1) 
            tpp(a,a1) = 0.0 
#
            DO i 
#
               GET          Uxaa(a,i) 
               GET          Uyaa(a1,i) 
#
               t1pp(a,a1) = Uxaa(a,i)*Uyaa(a1,i) 
               tpp(a,a1) += t1pp(a,a1) 
#
            ENDDO i 
#
            t1pp(a,a1)  = VDD_aa(a,a1) 
            t1pp(a,a1) += VXX_aa(a,a1) 
            etemp       = t1pp(a,a1)*tpp(a,a1) 
            hessxy     += etemp 
#
      ENDPARDO a, a1 
#
      PARDO a, i 
#
            GET        Uxaa(a,i) 
            tpp(a,i) = 0.0 
#
            DO a1 
            DO i1 
#
               REQUEST      VT_aa(a,i,a1,i1) a 
               GET          Uyaa(a1,i1) 
#
               t1pp(a,i)  = VT_aa(a,i,a1,i1)*Uyaa(a1,i1) 
               t1pp(a,i) *= 0.5 
               tpp(a,i)  += t1pp(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            etemp   = Uxaa(a,i)*tpp(a,i) 
            hessxy += etemp 
#
      ENDPARDO a, i 
#
      PARDO b, b1 
#
            GET         VDD_bb(b,b1) 
            GET         VXX_bb(b,b1) 
            tqq(b,b1) = 0.0 
#
            DO j 
#
               GET          Uxbb(b,j) 
               GET          Uybb(b1,j) 
#
               t1qq(b,b1) = Uxbb(b,j)*Uybb(b1,j) 
               tqq(b,b1) += t1qq(b,b1) 
#
            ENDDO j 
#
            t1qq(b,b1)  = VDD_bb(b,b1) 
            t1qq(b,b1) += VXX_bb(b,b1) 
            etemp       = t1qq(b,b1)*tqq(b,b1) 
            hessxy     += etemp 
#
      ENDPARDO b, b1 
#
      PARDO b, j 
#
            GET        Uxbb(b,j) 
            tqq(b,j) = 0.0 
#
            DO b1 
            DO j1 
#
               REQUEST      VT_bb(b,j,b1,j1) b 
               GET          Uybb(b1,j1) 
#
               t1qq(b,j)  = VT_bb(b,j,b1,j1)*Uybb(b1,j1) 
               t1qq(b,j) *= 0.5 
               tqq(b,j)  += t1qq(b,j) 
#
            ENDDO j1 
            ENDDO b1 
#
            etemp   = Uxbb(b,j)*tqq(b,j) 
            hessxy += etemp 
#
      ENDPARDO b, j 
#
      PARDO a, i 
#
            GET        Uxaa(a,i) 
            tpp(a,i) = 0.0 
#
            DO b 
            DO j 
#
               REQUEST      VT_ab(a,i,b,j) a 
               GET          Uybb(b,j) 
#
               t1pp(a,i)  = VT_ab(a,i,b,j)*Uybb(b,j) 
               t1pp(a,i) *= 2.0 
               tpp(a,i)  += t1pp(a,i) 
#
            ENDDO j 
            ENDDO b 
#
            etemp   = Uxaa(a,i)*tpp(a,i) 
            hessxy += etemp 
#
      ENDPARDO a, i 
#
      ENDPROC T15_16_DIRECT 
#     --------------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
#                  BEGIN  MAIN PROGRAM 
#
# ---------------------------------------------------------------------------
#
# First compute unperturbed quantities
# ------------------------------------
#
#     1. 2-electron integral transformation 
#     2. First order amplitudes T2aiai, T2bjbj, T2aibj   
#     3. Intermediate Ipq/Xai  
#     4. Density Dpq  
#
# 1. Two-electron integral transformation. 
# ---------------------------------------- 
#
      CALL CREATE_MOINTS
      CALL READ_2EL  
      execute server_barrier
      execute sip_barrier
#
# 2. First order amplitudes T2aiai, T2bjbj, T2aibj, t1ai, t2bj. 
# -------------------------------------------------------------  
#
      CALL FOCK_TRANS     #--> transform fock matrix to MO basis
      CALL REMOVE_DIAG    #--> remove diagonal elements from fock matrix
      CALL T1A_REFERANCE  #--> compute the rohf referance amplitudes t1a
      CALL T1B_REFERANCE  #--> compute the rohf referance amplitudes t1b
      CALL T2AA_REFERANCE #--> compute the rohf referance amplitudes T2aa
      CALL T2BB_REFERANCE #--> compute the rohf referance amplitudes T2bb
      CALL T2AB_REFERANCE #--> compute the rohf referance amplitudes T2bb
      CALL ROHF_ENERGY    #--> compute final total rohf correlation energy
#
# 3. Construct the occupied-occupied and virtual-virtual blocks of the 
#    one-particle density matrix and the virtual-occupied block(non 
#    orbital-response). 
# ---------------------------------------------------------------------
#
      CALL DENSIJ 
      CALL DENSAB
      CALL DENSAI
#
# 4. Compute the one-particle intermediates required to compute the 
#    orbital-response contribution to Dai --> Dai_or. 
# ------------------------------------------------------------------ 
#
      CALL Iij_p # --> CHECKS   
      CALL Iab_p # --> CHECKS  
      CALL Iia_p # --> CHECKS   
      CALL Iai_p # --> CHECKS  
      create Ipq_a  
      create Ipq_b  
      execute sip_barrier 
#
# 5. Copy all one-electron arrays needed in the Z-vector equations 
#    into alpha blocks. 
# ----------------------------------------------------------------- 
#
      CALL FCOPY 
      create Dold_dd 
      create Dnew_dd 
      create Dold_ds 
      create Dnew_ds 
      create Dold_sd 
      create Dnew_sd 
      create Tyaa 
      create Tybb 
      create Ixx 
      eold = 0.0 
      enew = 0.0 
      execute sip_barrier 
#
      DO kiter 
         CALL DENS_DD 
         CALL DENS_DS 
         CALL DENS_SD 
         CALL DENS_UPDATE 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew
#
      ENDDO kiter  
#
      CALL DENSAI_FINISH # --> CHECKS  
      CALL IOO_FINISH    # --> CHECKS 
      CALL IOV_FINISH    # --> CHECKS 
#
      execute sip_barrier 
      delete Dold_dd 
      delete Dnew_dd 
      delete Dold_ds 
      delete Dnew_ds 
      delete Dold_sd  
      delete Dnew_sd 
#
# 6. Form the HF density. 
# ----------------------- 
#
      CALL HFDENS 
#
# 7. Transform the density and contract with H^x. 
# ----------------------------------------------- 
#
      CALL DENS_TRAN # --> OK!!!  
#
# 8. Transform the intermediates and contract with S^x. 
# ----------------------------------------------------- 
#
      CALL I_HF 
      CALL INTER_TRAN # --> OK!!! 
#
# 9. Backtransform the two-particle gamma and contract with the derivative integrals. 
# ----------------------------------------------------------------------------------- 
#
      CALL ZERO_VXIXI 
      CALL D2TRANS # --> OK!!! 
#
# 10. Start the Hessian calculation. 
# ---------------------------------- 
#
      CALL FORM_IPQ 
      CALL FORM_DENS  
#
#     'Contract' the backtransformed intermediates with S''.
#     ------------------------------------------------------
#
      CALL SXY_CONT # --> Passed
#
#     'Contract' the backtransformed density with H''.
#     ------------------------------------------------
#
      CALL DXY_CONT # --> Passed  
#
#     'Contract' the backtransformed gamma array with <mu nu|lambda sigma>^x.
#     -----------------------------------------------------------------------
#
      CALL ZERO_VXIXI 
      CALL GIJAB_CONT # --> Passed
#
# 11. Compute 'directly' computed intermediates.
# ----------------------------------------------
#
      CALL VT_XAI 

      execute sip_barrier
#
      DO jatom 
#
      DO jx 
#
#        Set flags --> perturbation.
#        ---------------------------
#
         execute set_flags2 dflags2(jatom,jx)
#
#        Compute the perturbed quantities DTpppi, DTqqqj, DTppqi
#        and DTqqpi.
#        --> Transformed first-derivative two-electron integrals.
#        --------------------------------------------------------
#
         CALL DINT_TRAN
#
#        Compute the perturbed quantities Fya and Fyb, Sya and Syb.
#        --> Transformed first-derivative one-electron integrals.
#        ----------------------------------------------------------
#
         CALL SINTY_TRAN
#
#        Compute CHF coefficients.
#        -------------------------
#
         CALL QYAI_H
         CALL Uy_XX
         execute sip_barrier
# 
#        Calculate the CPHF coefficients for j-perturbation. 
#        --------------------------------------------------- 
#
         CALL QYCOPY 
         create Dold_dd 
         create Dnew_dd 
         create Dold_ds 
         create Dnew_ds 
         create Dold_sd 
         create Dnew_sd 
         eold = 0.0 
         enew = 0.0 
         execute sip_barrier 
#
         DO kiter 
            CALL UY_DD 
            CALL UY_DS 
            CALL UY_SD 
            CALL UY_UPDATE 
#
#           Check on convergence
#           --------------------
#
            IF enew < eold
               ediff = eold - enew
               IF ediff < ecrit
                  exit # kiter
               ENDIF
            ENDIF
#
            IF enew > eold
               ediff = enew - eold
               IF ediff < ecrit
                  exit # kiter
               ENDIF
            ENDIF
#
            IF enew == eold
               exit # kiter
            ENDIF
#
#           Reset eold --> enew
#           -------------------
#
            eold = enew
#
         ENDDO kiter  
#
         execute sip_barrier
         CALL UYAI_FINISH 
         CALL UYOO_FINISH
         CALL UYVV_FINISH
#
         execute sip_barrier 
         delete Dold_dd 
         delete Dnew_dd 
         delete Dold_ds 
         delete Dnew_ds 
         delete Dold_sd 
         delete Dnew_sd 
#
#        Done calculating coefficients for j-perturbation. 
#        ------------------------------------------------- 
#
         CALL FINTY_TRAN
         execute sip_barrier
#
#        Prepare perturbed arrays used to complete the HF hessian.
#        ---------------------------------------------------------
#
         CALL FSCF_HESS
#
#        COMPLETE DERIVATIVE TWO-ELECTRON INTEGRALS
#        ------------------------------------------
#
         CALL VY_UY
#
#        Compute the perturbed amplitudes --> TPaiai, TPbjbj, TPaibj.
#        ------------------------------------------------------------
#
         CALL PAMP
#
         DO iatom
#
         DO ix
#
#           Zero out the hessian element.
#           -----------------------------
#
            hessxy                   = 0.0
            phessxy                  = 0.0
            thess(jatom,jx,iatom,ix) = 2.0
#
#           Set flags --> perturbation.
#           ---------------------------
#
            execute set_flags2 dflags2(iatom,ix)
#
#           Form transformed perturbed two-electron integrals.
#           --------------------------------------------------
#
            CALL TRAN_VX_XIXI
#
#           Compute the perturbed quantities Fxa and Fxb, Sxa and Sxb.
#           --> Transformed first-derivative one-electron integrals.
#           ----------------------------------------------------------
#
            CALL SINTX_TRAN
            execute sip_barrier
#
#           Compute CHF coefficients.
#           -------------------------
#
            CALL QXAI_H
            execute sip_barrier
            CALL Ux_XX
            execute sip_barrier
# 
#           Calculate the CPHF coefficients for i-perturbation. 
#           --------------------------------------------------- 
#
            CALL QXCOPY 
            create Dold_dd 
            create Dnew_dd 
            create Dold_ds 
            create Dnew_ds 
            create Dold_sd 
            create Dnew_sd 
            eold = 0.0 
            enew = 0.0 
            execute sip_barrier 
#
            DO kiter 
               CALL UX_DD 
               CALL UX_DS 
               CALL UX_SD 
               CALL UX_UPDATE 
#
#              Check on convergence
#              --------------------
#
               IF enew < eold
                  ediff = eold - enew
                  IF ediff < ecrit
                     exit # kiter
                  ENDIF
               ENDIF
#
               IF enew > eold
                  ediff = enew - eold
                  IF ediff < ecrit
                     exit # kiter
                  ENDIF
               ENDIF
#
               IF enew == eold
                  exit # kiter
               ENDIF
#
#              Reset eold --> enew
#              -------------------
#
               eold = enew
#
            ENDDO kiter  
#
            execute sip_barrier
            CALL UXAI_FINISH 
            execute sip_barrier
            CALL UXOO_FINISH
            CALL UXVV_FINISH
#
            execute sip_barrier 
            delete Dold_dd 
            delete Dnew_dd 
            delete Dold_ds 
            delete Dnew_ds 
            delete Dold_sd 
            delete Dnew_sd 
#
#           Done calculating coefficients for j-perturbation. 
#           ------------------------------------------------- 
#
            CALL FINTX_TRAN
            execute sip_barrier
#
#           COMPLETE DERIVATIVE TWO-ELECTRON INTEGRALS
#           ------------------------------------------
#
            CALL VX_UX 
#
#           Compute term4. 
#           -------------- 
#
            CALL T2PERVPERT  
#
#           Compute terms 5-9
#           ----------------- 
#
            CALL PART1  
#
#           Compute terms 10-15  
#           -------------------  
#
            CALL TERM14 # --> 
            CALL TERM15 # -->  
            CALL PART2  # -->  
#
#           Compute terms 16-21 
#           ------------------- 
#
            CALL TERM16 # -->  
#
            CALL TERM17 # -->  
#
            CALL TERM18 # -->  
#
            CALL TERM21 # --> 
#
#           Compute the 'direct' terms. 
#           --------------------------- 
#
            CALL T15_16_DIRECT 
#
#           Remove x-perturbed distributed arrays.
#           --------------------------------------
#
            execute sip_barrier
            CALL ZERO_VX 
            delete Fxa
            delete Fxb
            delete Sxa
            delete Sxb
            delete Uxaa
            delete Uxbb
            delete Qxai
            delete Qxbj
#
            delete QAxx
            delete QBxx
            delete QABxx
#
            collective phessxy += hessxy
            execute print_scalar phessxy
            thess(jatom,jx,iatom,ix) *= phessxy
            execute read_hess thess(jatom,jx,iatom,ix)
#
         ENDDO ix
#
         ENDDO iatom
#
#        Remove distributed arrays not used anymore.
#        -------------------------------------------
#
         execute sip_barrier
#
         delete Fya
         delete Fyb
         delete Sya
         delete Syb
         delete Uyaa
         delete Uybb
         delete Qyai
         delete Qybj
         delete dhfya
         delete dhfyb
         delete whfya
         delete whfyb
#
         delete QAyy
         delete QByy
         delete QAByy
#
         delete t1yaa 
         delete t1ybb 
#
      ENDDO jx 
#
      ENDDO jatom 
#
      execute sip_barrier

                   ENDSIAL ROHF_HESS_PRELIM
#
# ---------------------------------------------------------------------------
#
